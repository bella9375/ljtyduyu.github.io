<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>raindu&#39;s home</title>
  <subtitle>A lifelong learner!!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.raindu.com/"/>
  <updated>2017-06-20T04:10:21.359Z</updated>
  <id>http://www.raindu.com/</id>
  
  <author>
    <name>RainDu</name>
    <email>578708965@.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>那些培训师都不曾告诉你的关于Excel图表的秘密~</title>
    <link href="http://www.raindu.com/2017/06/20/%E9%82%A3%E4%BA%9B%E5%9F%B9%E8%AE%AD%E5%B8%88%E9%83%BD%E4%B8%8D%E6%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0%E7%9A%84%E5%85%B3%E4%BA%8EExcel%E5%9B%BE%E8%A1%A8%E7%9A%84%E7%A7%98%E5%AF%86/"/>
    <id>http://www.raindu.com/2017/06/20/那些培训师都不曾告诉你的关于Excel图表的秘密/</id>
    <published>2017-06-20T03:48:08.000Z</published>
    <updated>2017-06-20T04:10:21.359Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇关于Excel数据可视化的心得汇总！</p>
<a id="more"></a>
<p>Excel对宽数据和长数据的适用范围：</p>
<h3 id="Excel的图表模块更适合宽数据"><a href="#Excel的图表模块更适合宽数据" class="headerlink" title="Excel的图表模块更适合宽数据"></a>Excel的图表模块更适合宽数据</h3><p>（即汇总过的二维表）；</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image1.jpg" alt=""><br><img src="http://ortu7ddty.bkt.clouddn.com/image2.jpg" alt=""></p>
<p>在长表中，我将选中得三列全部作为簇状柱形图的数据源，默认的柱形图如下所示，虽然在横轴上也出现了两个维度信息（公司维度、日期维度），但是两个维度布局的很不友好。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image3.jpg" alt=""></p>
<h3 id="Excel图表数据源行列限制规则："><a href="#Excel图表数据源行列限制规则：" class="headerlink" title="Excel图表数据源行列限制规则："></a>Excel图表数据源行列限制规则：</h3><p>针对宽数据而言，Excel并不严格限定行列（允许行列自由转置），过渡的自由有时候会造成制图效率的低下，所以如果等领会我接下来交给你的心得，那么你的制图效率将会提高很多。</p>
<p>在详细解释以上内容之前，你需要对数据结构中的基本概念有所了解，即什么叫维度、什么叫度量。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image4.jpg" alt=""></p>
<p>如果不那么严格的进行定义，你可以粗略的将数值型指标当做度量（并不绝对，要视实际意义而定），类别型指标视作度量。（这其实对应于统计学中的变量类别划分标准：定类变量/定序变量——维度，定距变量/定比变量——度量）</p>
<p>了解变量类型之后，我们可以知道，我们的源数据包含两个维度（公司、日期），一个度量（对应日期某公司的指标）。</p>
<p>源数据的维度之间可以自由的转职（与线性代数中的转至概念没什么差别，就是行列位置的对应调整，并不改变具体度量值，改变的只是呈现数据的方式）。</p>
<p>转至在Excel中有两种方式可以完成，一种是复制数据源，选择性黏贴——行列转换。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image12.jpg" alt=""></p>
<p>另一种则是在已经完成的默认图表选择菜单中点击行列数据变换。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image5.jpg" alt=""></p>
<p>我使用同一数据源的原始维度和转之后的维度分别插入了默认的簇状柱形图。结果如下。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image6.jpg" alt=""></p>
<p>仔细分析以上数据源与默认图表的行列对应关系你会发现，三个字段的位置在原始表格与图形化后的图表上分布及其有规律。</p>
<p>列标题总是对应图表中的横轴，行标题总是对应图表中的图例。而度量总是呈现在图表的纵轴（数量轴）上。</p>
<p>这个规律是Excel图表的默认规则，当然你不必要严格执行此规则，那么不执行的后果就是，如果维度呈现的顺序不符合你的意图，你要么需要在源数据中进行数据转至，要么需要在图表的选择菜单里进行行列变化，进而转换成你中意的图表呈现形式。</p>
<p>所以结论就是，你的数据源组织，需符合以下要求：</p>
<p>1、想要对比的维度按列分布；（最终将会呈现在X轴上）<br>2、需要分类的维度按行分布：（最终通过图例中的颜色分类进行区分）。<br>3、行列虽然可以自由变换（通过数据源选择性黏贴转至或者在图表的选择菜单中进行行列变换），但一定要想清楚你的图表侧重对比那个维度，按照那个维度分类。</p>
<h3 id="Excel与数据聚合功能："><a href="#Excel与数据聚合功能：" class="headerlink" title="Excel与数据聚合功能："></a>Excel与数据聚合功能：</h3><p>Excel的图表模块并没有数据聚合功能。（原因大概是这个模块并不能识别因子变量）。</p>
<p>我所说的聚合是指，通过将一组分类指标（一个维度与一个度量）按照类别分开并计算各类的均值、众数、中位数、方差、标准差、求和计算等。</p>
<p>所以，无论你的维度理念包含多少类别，Excel图表都只会把单个观测值视作单独的指标，这是它与主流可视化工具以及编程类工具在可视化功能上的最大差别和缺憾，也是验证上述观点中：Excel图表模块专为二维表（宽数据）所设计的证据之一。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image7.jpg" alt=""></p>
<p>以上图示中，列是一个呈现公司维度的指标，这种维度在数据库中非常常见，可能是日期的细分维度、也可鞥是地区的细分维度。</p>
<p>但是Excel的默认图表将维度的单个观测全部视作唯一值，而不会对齐进行任何分类聚合操作。</p>
<p>所以我们要想直接呈现汇总后的图表，需动用数据透析表进行维度透析，或者，将其整理成二维表制作多分类的可视化图表。</p>
<p>（以上操作同样适合条形图，只是条形图实质上相当于将柱形图向右旋转了90，所以条形图的行列概念与柱形图刚好颠倒过来）</p>
<h3 id="Excel维度指标的识别："><a href="#Excel维度指标的识别：" class="headerlink" title="Excel维度指标的识别："></a>Excel维度指标的识别：</h3><p>这里先放四张图供大家思考：</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image8.jpg" alt=""><br><img src="http://ortu7ddty.bkt.clouddn.com/image9.jpg" alt=""><br><img src="http://ortu7ddty.bkt.clouddn.com/image10.jpg" alt=""><br><img src="http://ortu7ddty.bkt.clouddn.com/image11.jpg" alt=""></p>
<p>我想大家一定看出了些猫腻，但是好像还不说不出其中的端倪。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image8.jpg" alt=""></p>
<p>我是这么理解的，Excel的图表模块是通过行列标题来自动探测并识别维度指标的。以上四幅图最符合我们需求的的应该是第一张图，该图完整的呈现了两个维度和度量的信息。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image9.jpg" alt=""></p>
<p>图二中，我们在首行首列的位置放入了一个YEAR的名称，我们理所当然的以为这个只是首列的标题而已，可是Excel并没有这么智能，它将其视作与后几列同样性质的公司维度中的一个名称。因为首列也成了一个特殊的公司（日期则成了该特殊公司的另一个维度不同水平的指标）。</p>
<p>所以整个图表的行维度（公司数）变成了6个，而因为没有定义列维度（原始数据中失去了行标题，其实是有的，但是因为添加了一个首行首列交叉位置的YEAR标签，结果Excel将首行作为列的一个维度，因而也就不存在名义上的日期维度分类）。</p>
<p>尽管Excel不知道丢失的维度的具体水平及名称，可是改变不了原始数据是一个二维表这样一个事实，因而还是给丢失的维度信息在图表中补全了，但是是通过默认的系列1、系列2、系列3……等方式来弥补的。</p>
<p><strong>接下来看图示3：</strong></p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image10.jpg" alt=""></p>
<p>该图的原始数据仍然是一个二维表，但是只有明确的行列维度信息（你以为你写了一组2012、2013^2016这么一组有规律的数据，Excel就能明白这是一个日期维度呀，那你真的是想多了，它跟其他的数值型指标没有任何的区别），与图2的过程类似，维度信息的丢失改变不了原始数据是二维表这样一个事实。因而Excel仍然会帮其补全行列维度（图表横轴补全了原始表列维度信息【即我们想当然以为当做行维度信息的日期和后5列指标】，图表纵轴补原始表中行维度信息，此时行为度信息已经不是我们想当然以为的那个日期指标，而是一组未知度量）。</p>
<p><strong>图示4：</strong></p>
<p>图示4中只明确了表格中列维度信息，而没有声明行维度信息，因为不存在错误识别，该状况下，Excel可以很完美的识别列维度（呈现在图表的横轴上）。而丢失的行维度信息则自动补全（呈现在图例的分类颜色指标上）。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image11.jpg" alt=""></p>
<p>综上所示，Excel识别维度信息是通过原始二维表表结构中的首行首列标签来识别的(切记不要在首行首列中写入任何信息，一定要留白、一定要留白、一定要留白)。</p>
<p>倘若不慎将首行首列（即行列维度标签的交叉单元格）标签交叉位置写入任何内容，那么结果是致命性的，你的列为度（也就是图表的横轴上）会被加入一个虚假的维度类别指标。</p>
<h3 id="关于作图效率："><a href="#关于作图效率：" class="headerlink" title="关于作图效率："></a>关于作图效率：</h3><p>以下是分别在Excel中制作多分类序列图表和其他软件工具（包含桌面端可视化工具以及编程工具等）所分别适用的数据源。</p>
<p><img src="http://ortu7ddty.bkt.clouddn.com/image13.png" alt=""><br><img src="http://ortu7ddty.bkt.clouddn.com/image14.png" alt=""></p>
<p>从效率上来说，自然是其他 工具能更高一些，Excel将每一个分类都视作一个列字段（典型二维表风格），其他的工具是通过将分类序列进行堆栈操作，聚合成一个包含类别变量（因子变量）和一个度量（数值型变量）从而大大简化了数据源，这在分类特别特别多的时候具有很大的优势。（想象一下如果有一千个分类，你难倒要在Excel里面列出1001个列字段吗，使用二维表仍然是三个字段，公司名称、日期，指标）。</p>
<p>当然 也不能说Excel这种二维表作图一无是处，二维表直观易懂，其本事就兼具图形化的信息呈现功能，否则为什么很多专业的报告中除了图表之外，包含很多表格呢，而一维表这种篇原始（但是易于存储）结构的数据应该不会常用于报告中。</p>
<p>所以说对于小数据或者二维表而言，Excel的图表工具还是非常适于此种可视化场景，而要是将二维表用于其他攻击高来进行可视化（可视化桌面端工具或者编程工具），则你需要额外进行数据的长宽转换。<br>（关于数据长宽转换以及多维数据集在不同可视化工具中的最有可视化解决方案，我会专门列一篇进行分析讲解）</p>
<p>以上关于行列维度的分析并不适用于呈现连续性数据的图表类型（如直方图、散点图、气泡图等），原因很简单，如果图表的二维坐标系中都呈现连续性指标，那么也就无所谓维度了，维度是针对分类资料所定义的一种特殊指标，连续性指标也就只剩下度量指标啦。</p>
<p>事实上Excel出了为二维表作图而生之外，还是转门为分类数据可视化而生的（可能我说的比较绝对了，大家不要喷我），为什么的，原因有两个：</p>
<ol>
<li><p>Excel的现存图表库中绝大多数图表是适应分类数据作图，（只要一个轴支持分类数据即可算作离散数据可视化类型，而真正用于连续性数据可视化呈现的图表类型及其少，比如散点图【你会发现Excel的散点图也是支持类别变量的】、气泡图、直方图【直方图以往都是在数据分析库模块中，需要单独调用才能使用，近期才加入普通图表的菜单入口】）。</p>
</li>
<li><p>普通的业务分析场景下，更多的是不同维度间的交叉对比和汇总分析，而连续数据的可视化多用于预测与建模，这在学术研究中（时间序列数据的建模）以及企业的战略数据挖掘部门（市场拓展与销售预测等）使用场景比较多，而且数据量一般都大。（这也决定了Excel使用的局限性，即更适合客观呈现、适合分类资料的汇总可视化，不适合用于大数据量的挖掘呈现）。</p>
</li>
<li><p>当然我还有一个证据在证明我以上的看法，那就是最近两年微软公司尽心尽力培育的PowerBI商务智能系统，在数据源上完美支持主流数据库，可视化形式上使用一维表进行操作，在数据量上也大大突破了Excel所能承受的量级。这或许就是当前大数据如火如荼的形势下，微软的office系统显然已经无法支撑大数据下的分析与可视化需求，必须布局其自己的大数据分析与可视化系统。</p>
</li>
</ol>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇关于Excel数据可视化的心得汇总！&lt;/p&gt;
    
    </summary>
    
      <category term="Excel" scheme="http://www.raindu.com/categories/Excel/"/>
    
    
      <category term="Excel" scheme="http://www.raindu.com/tags/Excel/"/>
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="商务图表" scheme="http://www.raindu.com/tags/%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——ggplot图表中的线条</title>
    <link href="http://www.raindu.com/2017/06/19/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E5%9B%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%9D%A1/"/>
    <id>http://www.raindu.com/2017/06/19/R语言可视化——ggplot图表中的线条/</id>
    <published>2017-06-19T14:08:27.000Z</published>
    <updated>2017-06-19T14:22:58.141Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享的是<code>ggplot</code>图表中的一类重要元素——线条。</p>
<p>不要觉得专门为线条写一章推送有点小题大做，其实线条对于图表而言，功不可没，即便是不起眼的网格、轴线、或者线条的粗线、线型、磅数等都将决定着你的图表品质。</p>
<p>R语言中ggplot函数系统中涉及到线条的地方有很多，最常见的场景就是我们做<code>geom_line()</code>（折线图）、<code>geom_path（）</code>(路径图),以及图表的绘图区（<code>panel</code>）、图表区、网格系统（<code>grid</code>）中所涉及到的线条。</p>
<a id="more"></a>
<p>今天以一个折线图为例，简要说明ggplot函数中关于线条的主要参数及其效果。</p>
<h3 id="数据构造过程："><a href="#数据构造过程：" class="headerlink" title="数据构造过程："></a>数据构造过程：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(reshape2)</div><div class="line"><span class="keyword">library</span>(ggthemes)</div><div class="line"><span class="keyword">library</span>(RColorBrewer)</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data&lt;-data.frame(Name = c(<span class="string">"苹果"</span>,<span class="string">"谷歌"</span>,<span class="string">"脸书"</span>,<span class="string">"亚马逊"</span>,<span class="string">"腾讯"</span>),Company = c(<span class="string">"Apple"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Amozon"</span>,<span class="string">"Tencent"</span>),Sale2013 = c(<span class="number">5000</span>,<span class="number">3500</span>,<span class="number">2300</span>,<span class="number">2100</span>,<span class="number">3100</span>),Sale2014 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>),Sale2015 = c(<span class="number">5050</span>,<span class="number">4000</span>,<span class="number">3200</span>,<span class="number">2800</span>,<span class="number">3700</span>),Sale2016 = c(<span class="number">6000</span>,<span class="number">4800</span>,<span class="number">4500</span>,<span class="number">3500</span>,<span class="number">4300</span>))</div><div class="line">mydata&lt;-melt(data,id.vars=c(<span class="string">"Name"</span>,<span class="string">"Company"</span>),variable.name=<span class="string">"Year"</span>,value.name=<span class="string">"Sale"</span>)</div></pre></td></tr></table></figure>
<h3 id="案例引入："><a href="#案例引入：" class="headerlink" title="案例引入："></a>案例引入：</h3><p>我先用一个简单的折线图代码跑出来一个折线图：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Company,Sale,fill=Year))+geom_line()</div></pre></td></tr></table></figure></p>
<p><img src="http://orssvamao.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orssvamao.bkt.clouddn.com/image2.png" alt=""></p>
<blockquote>
<p>geom_path: Each group consists of only one observation. Do you need to adjust the group aesthetic?</p>
</blockquote>
<p>当我用以上代码运行的时候，软件报错，提示如上：</p>
<p>图表展示区给出了一个只有坐标系的空白图表；</p>
<p>相信根据英文意思也可以明白怎么回事，因为我们给折线图的X轴映射是一个离散的因子变量，而默认状态下软件会将单条记录都会视作一个分类，这样肯定是无法出来图表的，而如果是一个连续变量，则会只会当做一个类别进行映射。</p>
<p>我们使用过ggplot内内置数据集验证我们的猜想。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">head(LakeHuron)</div><div class="line">LakeHuron$data&lt;-seq(<span class="number">1875</span>,<span class="number">1972</span>,<span class="number">1</span>)</div><div class="line">ggplot(LakeHuron,aes(data,LakeHuron))+geom_line()</div></pre></td></tr></table></figure></p>
<h3 id="参数解释说明："><a href="#参数解释说明：" class="headerlink" title="参数解释说明："></a>参数解释说明：</h3><p>以上使用了一个时间序列数据，很顺利的完成了折线图的制作。</p>
<p>那么针对离散变量的折线图到底如何来做呢，我们可以通过group指定分组的形式来达到目的。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Company,Sale,group=Year,fill=Year))+geom_line()</div></pre></td></tr></table></figure>
<p><img src="http://orssvamao.bkt.clouddn.com/image3.png" alt=""></p>
<p>通过指定group即告知软件将变量按照年份变量分组，否则单个不重复记录都会被当做一个单独分组。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(newdata,aes(Company,Sale,group=Year))+geom_line()+geom_point()</div></pre></td></tr></table></figure>
<p><img src="http://orssvamao.bkt.clouddn.com/image4.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point()  <span class="comment">#按照年份分组的同时按照年份进行线条的颜色映射</span></div></pre></td></tr></table></figure>
<p><img src="http://orssvamao.bkt.clouddn.com/image5.png" alt=""></p>
<h3 id="参数变化的对比效果："><a href="#参数变化的对比效果：" class="headerlink" title="参数变化的对比效果："></a>参数变化的对比效果：</h3><p>接下来通过对线条内部参数的修改，我们可以体会到ggplot对于线条细节的把控是多么的专注：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point()</div></pre></td></tr></table></figure>
<p><img src="http://orssvamao.bkt.clouddn.com/image6.png" alt=""></p>
<p>线条的参数主要有<code>size</code>、<code>colour</code>、<code>linetype</code>.</p>
<p>其中线条的类型主要有<code>0=blank</code>,<code>1=solid</code>,<code>2=dashed</code>,<code>3=dotted</code>,<code>4=dotdash</code>,<code>5=longdash</code>,<code>6=twodash</code></p>
<p><img src="http://orssvamao.bkt.clouddn.com/image7.png" alt=""></p>
<p><strong>每一个类型示例如下：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point() </div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">1</span>,size=<span class="number">1.5</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">2</span>,size=<span class="number">1.5</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">3</span>,size=<span class="number">1.5</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">4</span>,size=<span class="number">1.5</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">5</span>,size=<span class="number">1.5</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=<span class="number">6</span>,size=<span class="number">1.5</span>)+geom_point()</div></pre></td></tr></table></figure>
<p><img src="http://orssvamao.bkt.clouddn.com/image10.png" alt=""></p>
<p><strong>下面是关于线条粗度的不同感知：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">1</span>,linetype=<span class="number">1</span>)+geom_point() </div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">2</span>,linetype=<span class="number">1</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">3</span>,linetype=<span class="number">1</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">4</span>,linetype=<span class="number">1</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">5</span>,linetype=<span class="number">1</span>)+geom_point()</div><div class="line">ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=<span class="number">6</span>,linetype=<span class="number">1</span>)+geom_point()</div></pre></td></tr></table></figure></p>
<p><img src="http://orssvamao.bkt.clouddn.com/image8.png" alt=""></p>
<p>以上依次使用的线条粗度值为1,2,3,4,5,6，大家可以通过图表感受到ggplot图表中线条的粗度变化规律。</p>
<p>除了折线图（以及路径图，等图层中的线条之外），在theme系统中存在大量的关于线条的属性设置(网格系统、图表边框、轴线、图例系统)，均可以参照以上参数进行设置。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天跟大家分享的是&lt;code&gt;ggplot&lt;/code&gt;图表中的一类重要元素——线条。&lt;/p&gt;
&lt;p&gt;不要觉得专门为线条写一章推送有点小题大做，其实线条对于图表而言，功不可没，即便是不起眼的网格、轴线、或者线条的粗线、线型、磅数等都将决定着你的图表品质。&lt;/p&gt;
&lt;p&gt;R语言中ggplot函数系统中涉及到线条的地方有很多，最常见的场景就是我们做&lt;code&gt;geom_line()&lt;/code&gt;（折线图）、&lt;code&gt;geom_path（）&lt;/code&gt;(路径图),以及图表的绘图区（&lt;code&gt;panel&lt;/code&gt;）、图表区、网格系统（&lt;code&gt;grid&lt;/code&gt;）中所涉及到的线条。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="图表美化" scheme="http://www.raindu.com/tags/%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96/"/>
    
      <category term="theme" scheme="http://www.raindu.com/tags/theme/"/>
    
      <category term="视觉信号" scheme="http://www.raindu.com/tags/%E8%A7%86%E8%A7%89%E4%BF%A1%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>Word天呀，气泡图居然还有这种操作~</title>
    <link href="http://www.raindu.com/2017/06/19/Word%E5%A4%A9%E5%91%80%EF%BC%8C%E6%B0%94%E6%B3%A1%E5%9B%BE%E5%B1%85%E7%84%B6%E8%BF%98%E6%9C%89%E8%BF%99%E7%A7%8D%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.raindu.com/2017/06/19/Word天呀，气泡图居然还有这种操作/</id>
    <published>2017-06-19T00:49:56.000Z</published>
    <updated>2017-06-19T01:02:30.539Z</updated>
    
    <content type="html"><![CDATA[<p>在之前写实习僧爬虫可视化案例之时，曾经用过一个很类似气泡图的图表——气泡云图（superbubble）。</p>
<p>它的图表信息呈现与文字云非常相似，都是在控制一组元素的大小，文字云的大小是文字，气泡云图的大小是形状（气泡）。</p>
<a id="more"></a>
<h3 id="关于可视思维的一些感想："><a href="#关于可视思维的一些感想：" class="headerlink" title="关于可视思维的一些感想："></a>关于可视思维的一些感想：</h3><p>虽然看起来，它与普通气泡图比起来非常相似，但是实质上数据信息含量已经大相径庭，气泡图实际上使用了三个指标变量，而气泡云图仅适用了两个（而且仅有大小变量是数值型的）。</p>
<p>实际上以上对比是为了启发大家一种认识图表的思路：</p>
<p>通常情况下，我们被各种课程或者书籍指导着，认识到的可视化无一例外的是从数据如何转换为图表，坦白的说，这中思路问题不大，至少没有方向性的失误。</p>
<p>但是可视化是一套理念，而非流程或者过程，从数据到图表仅仅解决的是数据（变量）通过视觉信号映射到图表的过程，更为完善的可视化视角应该是：</p>
<p>你既要知道视觉元素是是如何通过数据映射到图表上的，更要知道一张已经被映射完成的图表，其视觉信号如何还原为原始的数据结构，毕竟很多职场人士是先看到自己觉得满意的图表之后，再回过头来思考自己的数据怎么做成那种理想的图表。</p>
<p>即可视化是一套从数据信息到视觉信息，再由视觉信息还原数据信息的过程。（个人愚见）</p>
<p>今天要讲的气泡云图，你可以这么理解，我们有一组指标（离散），并且想要呈现（从宏观上）该组指标的客观大小。以上属于正向的从数据到图表的可视化思维。</p>
<p>更加常见的情况是，我看到了一张非常漂亮的气泡云图，我想要将其用在我的项目或者业务报告之中，那么你一定要搞明白，你是否有这么一组指标（数据），仅需从宏观上呈现其大小。（因为这种需求有很多图表类型可以运用，而且达到的目的大同小异）。</p>
<p>这里仍然以之前那个实习僧职位需求top100企业为例：</p>
<p>我会分别使用PowerBI、Tableau、R语言来制作这一案例。</p>
<h3 id="PowerBI："><a href="#PowerBI：" class="headerlink" title="PowerBI："></a>PowerBI：</h3><p>我完成后的整个软件界面是这样的，大家可以看到，我只使用了两个字段：分别是一个文本标签和一组对应频率。</p>
<p><img src="http://orrrzlir6.bkt.clouddn.com/image1.jpg" alt=""></p>
<p>在superbubble的菜单中，刚好对应category选项和Role_DisplayName_Values字段。</p>
<p>就这样，完成了PowerBI中的气泡云图的制作。（该图表对象并非PowerBI内置图表对象，需要在其官方的在线社区中下载对应插件并加载之后才可用）。</p>
<p><img src="http://orrrzlir6.bkt.clouddn.com/image2.jpg" alt=""></p>
<h3 id="Tableau"><a href="#Tableau" class="headerlink" title="Tableau:"></a>Tableau:</h3><p>在Tableau操作界面中，仍然是使用两个字段，我将文本字段作为标签，freq作为大小映射给了该图表对象，同时因为Tableau系统中的图形对于颜色设置了非常严格的使用标准，所以默认是单色的，为了不过于单调，我将freq又映射给了一个颜色标度。（由此可见Tableau在数据可视化领域的专业性和权威性，PowerBI一直是在替用户选择，Tbaleau是用户掌握选择权）。</p>
<p><img src="http://orrrzlir6.bkt.clouddn.com/image3.jpg" alt=""><br><img src="http://orrrzlir6.bkt.clouddn.com/image4.jpg" alt=""></p>
<h3 id="R语言："><a href="#R语言：" class="headerlink" title="R语言："></a>R语言：</h3><p>R语言的官方社区中没有气泡云图（superbubble），但是在HTMLwidgets的开发者社区里，有一个制作该图表的扩展包：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">devtools::install_github(<span class="string">"jcheng5/bubbles"</span>)</div><div class="line"><span class="keyword">library</span>(bubbles)</div><div class="line"><span class="keyword">library</span>(RColorBrewer)</div></pre></td></tr></table></figure></p>
<p><strong>example：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bubbles(value = runif(<span class="number">26</span>),label=LETTERS,color=rainbow(<span class="number">26</span>, alpha=<span class="literal">NULL</span>)[sample(<span class="number">26</span>)])</div></pre></td></tr></table></figure></p>
<p><strong>以下接前面案例：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mydata&lt;-read.csv(&quot;D:R/File/shixiseng_job.csv&quot;,stringsAsFactors=FALSE,check.names=FALSE)</div><div class="line">color1&lt;-brewer.pal(9,&quot;YlOrRd&quot;)</div><div class="line">color2&lt;-brewer.pal(9,&quot;Greens&quot;)</div><div class="line">color&lt;-c(color1,color2)</div><div class="line">colorpan&lt;-sample(color,100,replace = TRUE)</div><div class="line">bubbles(value =mydata$Freq,label=mydata$Var1,color=colorpan)</div></pre></td></tr></table></figure>
<p><img src="http://orrrzlir6.bkt.clouddn.com/image5.jpg" alt=""></p>
<p>简单几行代码，一幅还算看的过眼的superbubble图表就完美出炉了，关键是，它的信息呈现角度与众不同，给人的视觉感受比较震撼，令人耳目一新，心领神会。</p>
<h3 id="本文总结："><a href="#本文总结：" class="headerlink" title="本文总结："></a>本文总结：</h3><p><strong>总结一下今天的分享概要：</strong></p>
<p>1 可视化的两个环节：</p>
<ul>
<li>从数据到图表——数据元素到视觉信号的映射过程</li>
<li>从图表到数据——视觉信号还原为数据结构的过程<br>2 图表的数据信息含量一致，与所使用的软件无关：</li>
</ul>
<p>因而所有的可视化工具在设计底层理念的时候，都是有规律的，不要害怕软件操作难，我们掌握心法就好。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前写实习僧爬虫可视化案例之时，曾经用过一个很类似气泡图的图表——气泡云图（superbubble）。&lt;/p&gt;
&lt;p&gt;它的图表信息呈现与文字云非常相似，都是在控制一组元素的大小，文字云的大小是文字，气泡云图的大小是形状（气泡）。&lt;/p&gt;
    
    </summary>
    
      <category term="数据可视化" scheme="http://www.raindu.com/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="气泡云图.superbubble" scheme="http://www.raindu.com/tags/%E6%B0%94%E6%B3%A1%E4%BA%91%E5%9B%BE-superbubble/"/>
    
      <category term="PowerBI" scheme="http://www.raindu.com/tags/PowerBI/"/>
    
      <category term="Tableau" scheme="http://www.raindu.com/tags/Tableau/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——ggplot图表配色技巧</title>
    <link href="http://www.raindu.com/2017/06/18/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E5%9B%BE%E8%A1%A8%E9%85%8D%E8%89%B2%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.raindu.com/2017/06/18/R语言可视化——ggplot图表配色技巧/</id>
    <published>2017-06-18T14:03:45.000Z</published>
    <updated>2017-06-18T14:22:15.782Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享ggplot图表的配色原理与基本技巧。</p>
<p>图表配色是一个很深奥的话题，多亏了R语言平台的众多开发者贡献的配色包，让图表的配色不再深不可测。</p>
<a id="more"></a>
<h3 id="图表配色常用类型："><a href="#图表配色常用类型：" class="headerlink" title="图表配色常用类型："></a>图表配色常用类型：</h3><p><strong>这里我暂且将所有的配色场景划分为两类：</strong></p>
<blockquote>
<p>离散变量配色与连续变量配色</p>
</blockquote>
<p><code>ggplot</code>函数的配色机制相对来说比较智能，当你给<code>colour</code>或者<code>fill</code>属性指定给变量映射的时候，该函数就会自动的区分变量属性（是离散变量或者是连续变量），进而给出适用于两种情况的配色风格。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()</div></pre></td></tr></table></figure></p>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orqx7zr30.bkt.clouddn.com/image2.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()</div></pre></td></tr></table></figure>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image3.png" alt=""></p>
<p>大家可以对比以上两句代码：我并没有指定任何实际的颜色，只是将<code>colour</code>颜色属性指定给离散变量cut或者连续变量<code>depth</code>,而输出的图表已经完成了默认的离散颜色映射和连续颜色渐变映射。</p>
<p>对于以上两种类型颜色使用场景，如果是要自行修改，则需要自行定义颜色标度：</p>
<h3 id="常用配色方案简介："><a href="#常用配色方案简介：" class="headerlink" title="常用配色方案简介："></a>常用配色方案简介：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale_colour_XXX:</div></pre></td></tr></table></figure>
<p>这里最经常适用的三种情况</p>
<p>第一种情况，使用<code>ggthemes</code>包中的颜色主题，其中有些非常流行的颜色主题，如经济学人的主题<code>scale_colour_economist()</code>、<code>scale_colour_wsj()</code>,还有<code>excel</code>的主题、<code>tableau</code>主题以及<code>stata</code>主题。</p>
<p>第二种情况，可以使用<code>RColorBrewer</code>包中的配色卡，以下是该包<code>scale_colour_brewer()</code>函数所允许使用的所有离散颜色色卡。</p>
<p>该配色系统方案给予我们三种关于分类变量的配色场景：</p>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image4.png" alt=""></p>
<ul>
<li><p>同色系方案，即在同一个色系中均匀取出若干个色段，用于分类变量填充，最终呈现的效果，看起来非常清爽，图中最上面的一排颜色均为此类。（适用于表达有序因子分类变量，比如GDP的分段呈现等）</p>
</li>
<li><p>二分色系方案，即两个色系方向平滑过渡，均匀取值，中间色一般为白色或者淡色。（适用于表达含有正负值的分类数量段，譬如增长率指标、利润率等）</p>
</li>
<li><p>多分类不同色系方案，取不同色系相对协调的一组颜色，这种情况比较适合用于表达仅作分类，分类项之间没有顺序和大小的普通情况。</p>
</li>
</ul>
<p>以上色卡以及配色包是由一个著名的专做地图可视化配色方案的团队所开发的，网址如下，提供在线配色并免费下载服务。（网站可能被屏蔽，如无法打开需要使用VPN）</p>
<p><a href="http://colorbrewer2.org/#" target="_blank" rel="external">RColorBrewer</a></p>
<p>当然第三种就是自己DIY了，R支持直接调用可识别的颜色名称以及颜色代码（16进制代码）。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale_fill_manual(values=c(<span class="string">"#FB882C"</span>,<span class="string">"#5B88A0"</span>))</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scale_fill_manual(values=c(&quot;Linen&quot;,&quot;Peru&quot;,&quot;PeachPuff&quot;,&quot;SandyBrown&quot;,&quot;Chocolate&quot;))</div></pre></td></tr></table></figure></p>
<p>连续型配色方案：</p>
<p>而针对连续型变量颜色修改的情况，可探讨的余地不多：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">scale_fill_gradient（）</div><div class="line">scale_fill_gradient2（）</div><div class="line">scale_fill_gradient（） <span class="comment">#允许分配一组双色连续渐变，low="white",high="red"</span></div><div class="line">scale_fill_gradient2（）<span class="comment">#允许分配一组三色连续渐变，low="blue",mid="white",high="red"</span></div></pre></td></tr></table></figure>
<h3 id="配色方案案例演示："><a href="#配色方案案例演示：" class="headerlink" title="配色方案案例演示："></a>配色方案案例演示：</h3><p>接下来针对以上几种情况，我分别演示一个案例：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(<span class="string">"ggthemes"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"RColorBrewer"</span>)</div></pre></td></tr></table></figure>
<p><strong>离散型配色方案：</strong></p>
<p>使用ggthemes包中的颜色主题（华尔街日报的主题色模板）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_wsj()</div></pre></td></tr></table></figure></p>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image5.png" alt=""></p>
<p>使用RColorBrewer包中的配色卡</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_brewer(palette=<span class="string">"Greens"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image6.png" alt=""></p>
<p>使用DIY方式自己制作配色卡</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_manual(values=c(<span class="string">"#84CEFC"</span>,<span class="string">"#ACDAE4"</span>,<span class="string">"#5C9EA4"</span>,<span class="string">"#04FEFC"</span>,<span class="string">"#4CD2CC"</span>))</div></pre></td></tr></table></figure>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image7.png" alt=""></p>
<p><strong>连续型：</strong></p>
<p>双色渐变：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()+scale_colour_gradient(low=<span class="string">"white"</span>,high=<span class="string">"Blue"</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image8.png" alt=""></p>
<p>三色渐变：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()+scale_colour_gradient2(low=<span class="string">"#8E0F2E"</span>, mid=<span class="string">"#BFBEBE"</span>, high=<span class="string">"#0E4E75"</span>,midpoint=median(na.omit(diamonds$depth)))</div></pre></td></tr></table></figure></p>
<p><img src="http://orqx7zr30.bkt.clouddn.com/image9.png" alt=""></p>
<p>以上就是R中最常用到的配色技巧，可以满足我们大部分使用场景的需求。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天跟大家分享ggplot图表的配色原理与基本技巧。&lt;/p&gt;
&lt;p&gt;图表配色是一个很深奥的话题，多亏了R语言平台的众多开发者贡献的配色包，让图表的配色不再深不可测。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="图表美化" scheme="http://www.raindu.com/tags/%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96/"/>
    
      <category term="配色技巧" scheme="http://www.raindu.com/tags/%E9%85%8D%E8%89%B2%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>关于数据地图的几个遗留问题解决方案</title>
    <link href="http://www.raindu.com/2017/06/18/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%87%A0%E4%B8%AA%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://www.raindu.com/2017/06/18/关于数据地图的几个遗留问题解决方案/</id>
    <published>2017-06-18T01:44:43.000Z</published>
    <updated>2017-06-19T00:55:50.483Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享三个数据地图的遗留问题，包括以前因为技术手段限制无法解决的问题，以及读者吐槽最多的问题。</p>
<a id="more"></a>
<ul>
<li>如何在一个版面上呈现不同行政级别的地理信息；</li>
<li>如何给版面添加mini导航定位窗口；</li>
<li>关于九段线问题。</li>
</ul>
<h3 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h3><p>关于第一个问题的解决方案，其实很简单，就是通过两个不同行政级别的图层进行叠加来达到目的。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(maps)  </div><div class="line"><span class="keyword">library</span>(<span class="string">"ggplot2"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"ggthemes"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"dplyr"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"maptools"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"grid"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"ggimage"</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">world_map&lt;-map_data(<span class="string">"world"</span>)</div><div class="line">data&lt;-read.csv(<span class="string">"D:/R/mapdata/Word_State.csv"</span>,stringsAsFactors = <span class="literal">FALSE</span>,check.names = <span class="literal">FALSE</span>)  </div><div class="line">data1&lt;-filter(data,region==<span class="string">"Russia"</span> | Address==<span class="string">"Asia"</span>)</div><div class="line">mymapdata&lt;-merge(world_map[,<span class="number">1</span>:<span class="number">5</span>],data1,type=<span class="string">"right"</span>)%&gt;%filter(long&gt;=<span class="number">30</span> &amp; lat&gt;=<span class="number">10</span>)%&gt;%arrange(group,order)</div></pre></td></tr></table></figure>
<p><strong>底层的区域地图：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ggplot(mymapdata)+</div><div class="line">geom_polygon(aes(x=long,y=lat,group=group),fill=<span class="string">"grey95"</span>,col=<span class="string">"black"</span>)+</div><div class="line">coord_map(<span class="string">"polyconic"</span>) +</div><div class="line">theme_map()</div></pre></td></tr></table></figure></p>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image1.jpg" alt=""></p>
<p><strong>表层的中国省级行政区划地图：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">china_map &lt;- readShapePoly(<span class="string">"D:/R/rstudy/CHN_adm/bou2_4p.shp"</span>)      </div><div class="line">china_map1 &lt;- fortify(china_map)</div></pre></td></tr></table></figure></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ggplot(china_map1)+</div><div class="line">geom_polygon(aes(x=long,y=lat,group=group),fill=<span class="string">"white"</span>,col=<span class="string">"black"</span>)+</div><div class="line">coord_map(<span class="string">"polyconic"</span>) +</div><div class="line">theme_map()</div></pre></td></tr></table></figure>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image2.jpg" alt=""></p>
<p><strong>将两个图层对象放在同一个图形对象中</strong>（注意先后顺序）。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ggplot()+</div><div class="line">geom_polygon(data=mymapdata,aes(x=long,y=lat,group=group),fill=<span class="string">"grey95"</span>,col=<span class="string">"grey"</span>)+</div><div class="line">geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill=<span class="string">"white"</span>,col=<span class="string">"black"</span>)+</div><div class="line">coord_map(<span class="string">"polyconic"</span>) +</div><div class="line">theme_map()</div></pre></td></tr></table></figure>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image3.jpg" alt=""></p>
<h3 id="minimini导航窗口"><a href="#minimini导航窗口" class="headerlink" title="minimini导航窗口"></a>minimini导航窗口</h3><p>第二个问题，关于minimini导航窗口。</p>
<p>其实这个问题多少跟第一个问题有些关联，也是旨在给我们要呈现的中心地图一个区域定位的作用。解决方案依然是拼图，不过这次是拼的图表（整个图表对象），而非图表中的图层。</p>
<p><strong>位于中间的中国行政区划地图：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p1&lt;-ggplot()+</div><div class="line">geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill=<span class="string">"white"</span>,col=<span class="string">"grey"</span>)+</div><div class="line">coord_map(<span class="string">"polyconic"</span>) +</div><div class="line">theme_map();p1</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p2&lt;-ggplot()+</div><div class="line">geom_polygon(data=world_map,aes(x=long,y=lat,group=group),fill=<span class="string">"grey95"</span>,col=<span class="string">"grey"</span>)+</div><div class="line">annotate(geom=<span class="string">"rect"</span>,xmin =<span class="number">30</span>, xmax =<span class="number">155</span>,ymin =<span class="number">10L</span>, ymax = <span class="number">55</span>,colour=<span class="string">"grey"</span>,fill=<span class="string">"orange"</span>,alpha=<span class="number">.3</span>)+</div><div class="line">theme_map() %+replace% theme(plot.background=element_rect(colour=<span class="string">"black"</span>));p2</div></pre></td></tr></table></figure>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image4.jpg" alt=""></p>
<p><strong>拼贴合并：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vie&lt;-viewport(width=<span class="number">0.30</span>,height=<span class="number">0.25</span>,x=<span class="number">0.25</span>,y=<span class="number">0.25</span>)</div><div class="line">p1;print(p2,vp=vie)</div></pre></td></tr></table></figure></p>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image5.jpg" alt=""></p>
<p>第三个问题；也是被吐槽最多的九段线问题，这个问题，其实严格来说，我也没有办法搞定。</p>
<h3 id="关于九段线问题："><a href="#关于九段线问题：" class="headerlink" title="关于九段线问题："></a>关于九段线问题：</h3><p>一般的九段线标识方法有两种，一种是在实际位置框定九段线范围，另一种则是将九段线的实际范围单独移至版面的边缘位置。第一种方法需要精确的九段线经纬点数据，获取不易，第二种则九段线位置过于灵活，然后不好掌握数据。</p>
<p>如果你能获取带有九段线数据的地图素材，那么这是最佳的解决方案，倘若不行，我们就要对图表后期进行处理（大部分人想到的方法是使用PS等软件，当然 这也是一种解决方案，至少清晰度上可以保证）。</p>
<p>但是既然是在R里面写代码，突然跑去玩PS总感觉怪怪的，能用代码解决的问题就不算问题，没错拼图嘛，R依然搞的定。</p>
<p><strong>首先你要有个九段线素材图片。</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">jiuduanxian&lt;-<span class="string">"E:/数据可视化/R/R语言学习笔记/可视化/timg.jpg"</span></div><div class="line">ggplot()+</div><div class="line">geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill=<span class="string">"white"</span>,col=<span class="string">"grey"</span>)+</div><div class="line">geom_image(aes(image=jiuduanxian,x=<span class="number">130</span>,y=<span class="number">20</span>),size=<span class="number">.2</span>)+</div><div class="line">coord_map(<span class="string">"polyconic"</span>) +</div><div class="line">theme_map()</div></pre></td></tr></table></figure>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image7.jpg" alt=""></p>
<p>我找的这个九段线素材可能跟中国地图风格搭配的不是很好，当然各位使用的时候可以自己去找相对准确、美观的素材使用。</p>
<p>最后提醒大家，关于九段线问题，一定要在报告或者文章末尾进行免责声明，涉及到领土争端问题，不仅仅要意识到，而且要尽可能的做好应对措施，避免不必要的麻烦。</p>
<hr>
<p><strong><em>关于数据源问题的说明：</em></strong></p>
<p>点击博客左下侧的GitHub链接：</p>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image8.jpg" alt=""></p>
<p>进入本人GitHub主页之后，打开名为datawarehouse的数据仓库；</p>
<p><img src="http://orpzs13ft.bkt.clouddn.com/image9.jpg" alt=""></p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天跟大家分享三个数据地图的遗留问题，包括以前因为技术手段限制无法解决的问题，以及读者吐槽最多的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据地图" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="九段线" scheme="http://www.raindu.com/tags/%E4%B9%9D%E6%AE%B5%E7%BA%BF/"/>
    
      <category term="mini导航窗口" scheme="http://www.raindu.com/tags/mini%E5%AF%BC%E8%88%AA%E7%AA%97%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——ggplot的theme订制</title>
    <link href="http://www.raindu.com/2017/06/17/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E7%9A%84theme%E8%AE%A2%E5%88%B6/"/>
    <id>http://www.raindu.com/2017/06/17/R语言可视化——ggplot的theme订制/</id>
    <published>2017-06-17T13:41:13.000Z</published>
    <updated>2017-06-17T13:54:25.140Z</updated>
    
    <content type="html"><![CDATA[<p>ggplot作图系统在R预言诸多可视化包中之所以如此的风靡，除了它拥有自己的图层理念之外，我觉得还要归功于它对于图表细节元素的灵活调整。</p>
<p>对于ggplot的初学者而言，可能没有太多的在意图表的主题是否优雅，配色是否美观，仅求能够准确无误的出图就OK了。</p>
<p>但是如果仅限于此，那么使用ggplot作图真的就是杀鸡用了宰牛刀了。</p>
<a id="more"></a>
<p>就拿默认的图表来说，虽然你只靠两句代码就可以跑出来一幅还算及格的图表，可是ggplot语法博大精深，背后给你的代码默认匹配的参数不计其数。</p>
<p>其中有一组特别庞大的参数组就是<code>theme（）</code>参数：</p>
<p>默认的图表再不添加任何自定义主题和配色的情况下，软件会给出默认的主题和配色：</p>
<p>默认主题是<code>theme_gray</code>,中一共给出了两套主题，分别是<code>theme_gray</code>、<code>theme_bw</code></p>
<p>接下来我们来一步步验证：</p>
<h3 id="首先加载包："><a href="#首先加载包：" class="headerlink" title="首先加载包："></a>首先加载包：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>（ggplot2）</div><div class="line"><span class="keyword">library</span>（reshape2）</div><div class="line"><span class="keyword">library</span>(ggtheme)</div></pre></td></tr></table></figure>
<h3 id="构造作图数据："><a href="#构造作图数据：" class="headerlink" title="构造作图数据："></a>构造作图数据：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data&lt;-data.frame(Name = c(<span class="string">"苹果"</span>,<span class="string">"谷歌"</span>,<span class="string">"脸书"</span>,<span class="string">"亚马逊"</span>,<span class="string">"腾讯"</span>),Conpany = c(<span class="string">"Apple"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Amozon"</span>,<span class="string">"Tencent"</span>),Sale2013 = c(<span class="number">5000</span>,<span class="number">3500</span>,<span class="number">2300</span>,<span class="number">2100</span>,<span class="number">3100</span>),Sale2014 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>),Sale2015 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>),Sale2016 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>))</div><div class="line">mydata&lt;-melt(data,id.vars=c(<span class="string">"Name"</span>,<span class="string">"Conpany"</span>),variable.name=<span class="string">"Year"</span>,value.name=<span class="string">"Sale"</span>)</div></pre></td></tr></table></figure>
<h3 id="初始化绘图："><a href="#初始化绘图：" class="headerlink" title="初始化绘图："></a>初始化绘图：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image2.png" alt=""></p>
<p>以上代码（已经简化的不能再简化了，不夸张的说，再少一个标点符号，就要报错了）跑出来的默认堆积条形图。</p>
<h3 id="添加主题："><a href="#添加主题：" class="headerlink" title="添加主题："></a>添加主题：</h3><p>可是在R预言可视化这个领域内，以上图表绝对是一个烂大街的货色，怎么说呢，因为你不修改主题，它搭配的主题永远都是<code>theme_gray</code></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)+theme_gray()</div><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)+theme_bw()</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orp205tiu.bkt.clouddn.com/image3.png" alt=""></p>
<p>以上两个图表分别套用了默认主题<code>theme_gray()</code>和备用主题<code>theme_bw()</code>，所以看去来前者与第一幅图无异，后者则差别很大。</p>
<p>虽然看起来修改主题好像很简单的样纸，殊不知，在主题内部，该函数是设定了不计其数、让人眼花缭乱的参数。</p>
<h3 id="主题函数结构："><a href="#主题函数结构：" class="headerlink" title="主题函数结构："></a>主题函数结构：</h3><p>你可以通过<code>theme_gray</code> 查看主题函数内的参数配置：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme_gray</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image4.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme_bw</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image5.png" alt=""></p>
<p>哈哈看傻眼了吧，其实仔细捋一捋，主题函数内的参数虽然繁杂，但是绝对算不上晦涩。</p>
<p><strong>以下是自己整理的主题参数列表：</strong></p>
<p><img src="http://orp205tiu.bkt.clouddn.com/image6.png" alt=""></p>
<p>通过设定主题参数，你也可以制作专属的图表主题模板。</p>
<p>接下来我将设定一个简单的主题模板用于修改以上的图表主题；</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">theme_xmf &lt;- <span class="keyword">function</span>(<span class="keyword">...</span>, bg=<span class="string">'white'</span>)&#123;</div><div class="line">    <span class="keyword">require</span>(grid)</div><div class="line">    theme_classic(<span class="keyword">...</span>) +</div><div class="line">        theme(rect=element_rect(fill=bg),</div><div class="line">              plot.margin=unit(rep(<span class="number">0.5</span>,<span class="number">4</span>), <span class="string">'lines'</span>),</div><div class="line">              panel.background=element_rect(fill=<span class="string">'transparent'</span>, color=<span class="string">'transparent'</span>),</div><div class="line">              panel.border=element_rect(fill=<span class="string">'transparent'</span>, color=<span class="string">'transparent'</span>),</div><div class="line">              panel.grid=element_blank(),</div><div class="line">              axis.title = element_text(color=<span class="string">'black'</span>, vjust=<span class="number">0.1</span>),</div><div class="line">              axis.ticks.length = unit(-<span class="number">0.3</span>,<span class="string">"lines"</span>),</div><div class="line">              axis.ticks = element_line(colour = <span class="string">"grey20"</span>),             </div><div class="line">              legend.title=element_blank(),</div><div class="line">              legend.key=element_rect(fill=<span class="string">'transparent'</span>, color=<span class="string">'transparent'</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="套用自己的自定义主题："><a href="#套用自己的自定义主题：" class="headerlink" title="套用自己的自定义主题："></a>套用自己的自定义主题：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)+theme_xmf()</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image7.png" alt=""></p>
<p>这里要强调一点，主题中是不包含颜色模板设定的，因为颜色的使用场景及类别比较复杂，会有专门的颜色标度进行设定，其实就是<code>scale_colour_xxx()/scale_fill_xxx()</code>进行设定（分别为点、线色以及区域色）</p>
<p>这里暂且使用一个<code>RColorbrewer</code>色板中的渐变色装饰一下，不做过多解释，下一节，专门讨论颜色。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)+theme_xmf()+scale_fill_brewer(palette=<span class="string">"Blues"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image8.png" alt=""></p>
<p>至于图表中的颜色填充顺序和图例相反，这个问题只需追加一句代码即可：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat=<span class="string">"identity"</span>)+theme_xmf()+scale_fill_brewer(palette=<span class="string">"Blues"</span>)+guides(fill = guide_legend(reverse = <span class="literal">TRUE</span>))</div></pre></td></tr></table></figure>
<p><img src="http://orp205tiu.bkt.clouddn.com/image9.png" alt=""></p>
<p>其他的细节设定，下次讲。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ggplot作图系统在R预言诸多可视化包中之所以如此的风靡，除了它拥有自己的图层理念之外，我觉得还要归功于它对于图表细节元素的灵活调整。&lt;/p&gt;
&lt;p&gt;对于ggplot的初学者而言，可能没有太多的在意图表的主题是否优雅，配色是否美观，仅求能够准确无误的出图就OK了。&lt;/p&gt;
&lt;p&gt;但是如果仅限于此，那么使用ggplot作图真的就是杀鸡用了宰牛刀了。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="图表美化" scheme="http://www.raindu.com/tags/%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96/"/>
    
      <category term="主题定制" scheme="http://www.raindu.com/tags/%E4%B8%BB%E9%A2%98%E5%AE%9A%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>leaflet的小搭档leaflet.minicharts来了，从此动态地图又多了一些乐趣~~~</title>
    <link href="http://www.raindu.com/2017/06/17/leaflet%E7%9A%84%E5%B0%8F%E6%90%AD%E6%A1%A3leaflet-minicharts%E6%9D%A5%E4%BA%86%EF%BC%8C%E4%BB%8E%E6%AD%A4%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9B%BE%E5%8F%88%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E4%B9%90%E8%B6%A3/"/>
    <id>http://www.raindu.com/2017/06/17/leaflet的小搭档leaflet-minicharts来了，从此动态地图又多了一些乐趣/</id>
    <published>2017-06-17T01:32:31.000Z</published>
    <updated>2017-06-17T03:16:25.237Z</updated>
    
    <content type="html"><![CDATA[<p>本文内容取材自leaflet.minicharts包官方主页的案例介绍，本篇案例虽然是关于leaflet在线地图的辅助包，但是该包的出现对于leaflet生态系统来说，确是有着划时代的意义。</p>
<p>该包大大扩充了leaflet包所能呈现的图表形式，打破了散点图、路径图、热力图三类图表对于传统地图数据呈现形式的垄断地位。</p>
<p>该包为此提供了气泡饼图、玫瑰图、mini柱形图以及时间维度控制器等多种数据可视化元素。</p>
<a id="more"></a>
<p>以下便是作者对该包的简要介绍及案例演示：</p>
<h3 id="leaflet-minicharts包简介："><a href="#leaflet-minicharts包简介：" class="headerlink" title="leaflet.minicharts包简介："></a>leaflet.minicharts包简介：</h3><p>一直以来，借助于Rstudio团队开发的交互式地图工具包——leaflet，在R语言中创建交互式地图已非难事。但是该包仅仅提供了很少的集中图表呈现类型，因而在一张单独的地图上呈现的数据信息量被大大限制了。</p>
<p>倘若你要在地图上呈现一些点数据，你只能需要使用两个变量定位出这些点在地图上的位置，然后更改点的半径和点的填充颜色来呈现数据。<br>然后leaflet.minicharts包的出现大大改变了这一格局。你可以在利用其提供的两个附加函数，在leaflet包的交互地图上增加更多的mini图表。</p>
<p>这些mini图表可以呈现比之前多得多的变量数据（理论上不受变量数量的限制），目前为止，仅支持三种图表类型：</p>
<p>barcharts (the default), pie charts and polar area charts.</p>
<h3 id="数据预览："><a href="#数据预览：" class="headerlink" title="数据预览："></a>数据预览：</h3><p>该包内提供了一个法国自2010~2017年包含电力产品、电力消费及结构变动趋势的数据集。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(<span class="string">"ggplot2"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"leaflet.minicharts"</span>)</div><div class="line"><span class="keyword">library</span>(geojsonio)</div><div class="line"><span class="keyword">library</span>(rgdal)</div><div class="line">data(<span class="string">"eco2mix"</span>)</div><div class="line">head(eco2mix)</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image1.jpg" alt=""></p>
<h3 id="地图数据及作图数据整理："><a href="#地图数据及作图数据整理：" class="headerlink" title="地图数据及作图数据整理："></a>地图数据及作图数据整理：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">geojson &lt;-readOGR(<span class="string">"D:/R/mapdata/State/France.json"</span>,<span class="string">"OGRGeoJSON"</span>,stringsAsFactors=<span class="literal">FALSE</span>)</div><div class="line"><span class="keyword">library</span>(dplyr)</div><div class="line">prod2016 &lt;- eco2mix %&gt;%</div><div class="line">  mutate(</div><div class="line">    renewable = bioenergy + solar + wind + hydraulic,</div><div class="line">    non_renewable = total - bioenergy - solar - wind - hydraulic</div><div class="line">  ) %&gt;%</div><div class="line">  filter(grepl(<span class="string">"2016"</span>,month) &amp; area!= <span class="string">"France"</span>) %&gt;%</div><div class="line">  select(-month) %&gt;%</div><div class="line">  group_by(area,lat,lng) %&gt;%</div><div class="line">  summarise_all(sum) %&gt;%</div><div class="line">  ungroup()</div><div class="line">``` </div><div class="line"></div><div class="line">  </div><div class="line">### 制作背景地图：</div><div class="line"></div><div class="line">抽取了法国2016年的能源消费结构数据信息：</div><div class="line"></div><div class="line">```r</div><div class="line"><span class="keyword">library</span>(leaflet)</div><div class="line"><span class="keyword">library</span>(leafletCN)</div><div class="line">basemap &lt;- leaflet(geojson,width =<span class="string">"100%"</span>,height=<span class="string">"400px"</span>) %&gt;% amap() %&gt;%</div><div class="line">addPolygons(weight=<span class="number">1</span>,color=<span class="string">"#444444"</span>,opacity=<span class="number">1</span>,fillColor =<span class="string">"white"</span>,fillOpacity =<span class="number">0.7</span>,smoothFactor=<span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<h4 id="默认图表（柱形图）"><a href="#默认图表（柱形图）" class="headerlink" title="默认图表（柱形图）"></a>默认图表（柱形图）</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">renewable2016 &lt;- prod2016 %&gt;% select(hydraulic,solar,wind)</div><div class="line">colors &lt;- c(<span class="string">"#3093e5"</span>,<span class="string">"#fcba50"</span>,<span class="string">"#a0d9e8"</span>)</div><div class="line">basemap %&gt;%</div><div class="line">  addMinicharts(</div><div class="line">    prod2016$lng, prod2016$lat,</div><div class="line">    chartdata = renewable2016,</div><div class="line">    colorPalette = colors,</div><div class="line">    width = <span class="number">45</span>, height = <span class="number">45</span></div><div class="line">  )</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image3.jpg" alt=""></p>
<h4 id="气泡饼图"><a href="#气泡饼图" class="headerlink" title="气泡饼图"></a>气泡饼图</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">colors &lt;- c(<span class="string">"#4fc13c"</span>, <span class="string">"#cccccc"</span>)</div><div class="line">basemap %&gt;% </div><div class="line">  addMinicharts(</div><div class="line">    prod2016$lng, prod2016$lat,</div><div class="line">    type = <span class="string">"pie"</span>,</div><div class="line">    chartdata = prod2016[, c(<span class="string">"renewable"</span>, <span class="string">"non_renewable"</span>)], </div><div class="line">    colorPalette = colors, </div><div class="line">    width = <span class="number">60</span> * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image2.jpg" alt=""></p>
<h4 id="玫瑰图1："><a href="#玫瑰图1：" class="headerlink" title="玫瑰图1："></a>玫瑰图1：</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">basemap %&gt;%</div><div class="line">addMinicharts(</div><div class="line">prod2016$lng, prod2016$lat,</div><div class="line">type = <span class="string">"polar-radius"</span>,</div><div class="line">chartdata = prod2016[, c(<span class="string">"renewable"</span>, <span class="string">"non_renewable"</span>)],</div><div class="line">colorPalette = colors,</div><div class="line">width = <span class="number">60</span> * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image5.jpg" alt=""></p>
<h4 id="玫瑰图2："><a href="#玫瑰图2：" class="headerlink" title="玫瑰图2："></a>玫瑰图2：</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">basemap %&gt;%</div><div class="line">addMinicharts(</div><div class="line">prod2016$lng, prod2016$lat,</div><div class="line">type = <span class="string">"polar-area"</span>,</div><div class="line">chartdata = prod2016[, c(<span class="string">"renewable"</span>, <span class="string">"non_renewable"</span>)],</div><div class="line">colorPalette = colors,</div><div class="line">width = <span class="number">60</span> * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="添加时间趋势："><a href="#添加时间趋势：" class="headerlink" title="添加时间趋势："></a>添加时间趋势：</h3><h4 id="柱形图（带时间趋势）"><a href="#柱形图（带时间趋势）" class="headerlink" title="柱形图（带时间趋势）"></a>柱形图（带时间趋势）</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">prodRegions &lt;- eco2mix %&gt;% filter(area != <span class="string">"France"</span>)</div><div class="line">basemap %&gt;% </div><div class="line">  addMinicharts(</div><div class="line">    prodRegions$lng, prodRegions$lat, </div><div class="line">    chartdata = prodRegions[, c(<span class="string">"hydraulic"</span>, <span class="string">"solar"</span>, <span class="string">"wind"</span>)],</div><div class="line">    time = prodRegions$month,</div><div class="line">    colorPalette = colors,</div><div class="line">    width = <span class="number">45</span>, height = <span class="number">45</span></div><div class="line">  )</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image4.jpg" alt=""></p>
<h4 id="饼图（带时间趋势）"><a href="#饼图（带时间趋势）" class="headerlink" title="饼图（带时间趋势）"></a>饼图（带时间趋势）</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">prodRegions &lt;- eco2mix %&gt;% filter(area != <span class="string">"France"</span>)</div><div class="line">basemap %&gt;% </div><div class="line">  addMinicharts(</div><div class="line">    prodRegions$lng, prodRegions$lat, </div><div class="line">    chartdata = prodRegions[, c(<span class="string">"hydraulic"</span>, <span class="string">"solar"</span>, <span class="string">"wind"</span>)],</div><div class="line">    time = prodRegions$month,</div><div class="line">    colorPalette = colors,</div><div class="line">    type=<span class="string">"pie"</span>,</div><div class="line">    width = <span class="number">45</span>, height = <span class="number">45</span></div><div class="line">  )</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image6.jpg" alt=""></p>
<h4 id="玫瑰图（带时间趋势）"><a href="#玫瑰图（带时间趋势）" class="headerlink" title="玫瑰图（带时间趋势）"></a>玫瑰图（带时间趋势）</h4><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">prodRegions &lt;- eco2mix %&gt;% filter(area != <span class="string">"France"</span>)</div><div class="line">basemap %&gt;% </div><div class="line">  addMinicharts(</div><div class="line">    prodRegions$lng, prodRegions$lat, </div><div class="line">    chartdata = prodRegions[, c(<span class="string">"hydraulic"</span>, <span class="string">"solar"</span>, <span class="string">"wind"</span>)],</div><div class="line">    time = prodRegions$month,</div><div class="line">    colorPalette = colors,</div><div class="line">    type=<span class="string">"pie"</span>,</div><div class="line">    width = <span class="number">45</span>, height = <span class="number">45</span></div><div class="line">  )</div></pre></td></tr></table></figure>
<p><img src="http://oro4ux3mq.bkt.clouddn.com/image7.jpg" alt="">  </p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文内容取材自leaflet.minicharts包官方主页的案例介绍，本篇案例虽然是关于leaflet在线地图的辅助包，但是该包的出现对于leaflet生态系统来说，确是有着划时代的意义。&lt;/p&gt;
&lt;p&gt;该包大大扩充了leaflet包所能呈现的图表形式，打破了散点图、路径图、热力图三类图表对于传统地图数据呈现形式的垄断地位。&lt;/p&gt;
&lt;p&gt;该包为此提供了气泡饼图、玫瑰图、mini柱形图以及时间维度控制器等多种数据可视化元素。&lt;/p&gt;
    
    </summary>
    
      <category term="地理信息可视化" scheme="http://www.raindu.com/categories/%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="地理信息可视化" scheme="http://www.raindu.com/tags/%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="在线地图" scheme="http://www.raindu.com/tags/%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="leaflet" scheme="http://www.raindu.com/tags/leaflet/"/>
    
      <category term="minicharts" scheme="http://www.raindu.com/tags/minicharts/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——图表排版之一页多图</title>
    <link href="http://www.raindu.com/2017/06/17/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9B%BE%E8%A1%A8%E6%8E%92%E7%89%88%E4%B9%8B%E4%B8%80%E9%A1%B5%E5%A4%9A%E5%9B%BE/"/>
    <id>http://www.raindu.com/2017/06/17/R语言可视化——图表排版之一页多图/</id>
    <published>2017-06-17T01:13:47.000Z</published>
    <updated>2017-06-17T01:30:13.380Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟大家分享了关于图表嵌套的函数用法，今天跟大家分享在多图情况下如何正确的进行图表的版面布局。</p>
<p>这里要分享的图表版面设计其实就是指，在做了很多图的情况下，如何将诸多图表合理的布局在一张大的版面上，而不是一幅一幅的导出最后在其他软件中手动拼凑。</p>
<a id="more"></a>
<p>这个技能在制作多图仪表盘场景下，将会特别有用：</p>
<p>还需要强调下这里所指的一页多图与我们之前介绍过的分面可是大有不同，分面其实是一幅图表中，将分类变量所构成的分类图表分图呈现，但是本质上所有分面内的单个图表共享标题、图例、坐标轴刻度（虽然可以手动定义）。</p>
<p>也就是说分面的图表类型与诸多元素都是一样的，但是分面解决不了不同图表的排版布局问题：比如单独绘制而成的一幅散点图、柱形图和一幅饼图，分面将无能为力。</p>
<p>R语言中可以实现多图同页布局的函数有很多（我所知道的旧有大概四五种），但是有些参数略微复杂不便记忆，这里只跟大家介绍两种：</p>
<p><strong>关于多图排版的函数简介：</strong></p>
<p>一种是grid.layout函数（就是我们昨天所讲到的图表嵌套所用到的是同一个包），另一个是rmisc包中的multiplot函数：</p>
<h3 id="grid-layout函数："><a href="#grid-layout函数：" class="headerlink" title="grid.layout函数："></a>grid.layout函数：</h3><ul>
<li>require(ggplot2)</li>
<li>require(grid)</li>
</ul>
<p>绘制备用图表（这里必须给图表命名，因为最后制作汇总图的时候需要引用图表名称）</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">chart1 &lt;- ggplot(mtcars, aes(mpg, wt, colour = factor(cyl))) + geom_point()</div><div class="line">chart2 &lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point()</div><div class="line">chart3&lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point() + facet_grid(.~color)</div></pre></td></tr></table></figure>
<p>以上三个函数定义了三个图表对象，如果想要查看图表则只需给出图表名称然后回车即可：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grid.newpage()  <span class="comment">###新建图表版面</span></div><div class="line">pushViewport(viewport(layout = grid.layout(<span class="number">2</span>,<span class="number">2</span>))) <span class="comment">####将版面分成2*2矩阵</span></div><div class="line">vplayout &lt;- <span class="keyword">function</span>(x,y)&#123;viewport(layout.pos.row = x, layout.pos.col = y)&#125;</div></pre></td></tr></table></figure>
<h3 id="定义图表的布局规则"><a href="#定义图表的布局规则" class="headerlink" title="定义图表的布局规则"></a>定义图表的布局规则</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(chart3, vp = vplayout(<span class="number">1</span>,<span class="number">1</span>:<span class="number">2</span>))   <span class="comment">###将（1,1)和(1,2)的位置画图chart3</span></div><div class="line">print(chart2, vp = vplayout(<span class="number">2</span>,<span class="number">1</span>))     <span class="comment">###将(2,1)的位置画图chart2          </span></div><div class="line">print(chart1 , vp = vplayout(<span class="number">2</span>,<span class="number">2</span>))    <span class="comment">###将（2,2)的位置画图chart1</span></div></pre></td></tr></table></figure>
<p><img src="http://oro3igf2g.bkt.clouddn.com/image1.png" alt=""><br><img src="http://oro3igf2g.bkt.clouddn.com/image2.png" alt=""><br><img src="http://oro3igf2g.bkt.clouddn.com/image3.png" alt=""></p>
<p>以上函数将逐步按照之前的位置规则按照对应顺序绘制三幅图表，每打印一次你都可以看到画布上增加一个图表。</p>
<p>以上是该方法制作一页多图的全部过程，其实因为里面有自定义函数，看起来稍微有点儿麻烦，不过不影响理解。</p>
<h3 id="multiplot函数："><a href="#multiplot函数：" class="headerlink" title="multiplot函数："></a>multiplot函数：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(<span class="string">"Rmisc"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"lattice"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"plyr"</span>)</div></pre></td></tr></table></figure>
<p>使用multiplot函数制作一页多图的语法非常简单，过程同样也是先制作出单个图表并命名，然后一句函数就搞定：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">multiplot(chart1,chart2,chart3, cols=<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p><img src="http://oro3igf2g.bkt.clouddn.com/image4.png" alt=""></p>
<p>虽然使用multiplot函数非常方便高效，但是默认情况下，它不会对单个的图表长宽比例做最优布局，我们的案例中，chart3是一个水平分面图，属于矮款型的，但是multiplot函数将它压缩成长宽近似的矩形，放在四象限的第二个位置。</p>
<p>整体看上去，第一种方法虽然过程复杂些，但是局部灵活些，可以调整单个图表所占的空间，第二种方式更加高效、快捷，但是布局上欠缺优化（也许是我还没有接触到内部的局部调整参数，有懂的小伙伴儿麻烦指导一下，不胜感激）！</p>
<p>对了，做完图之后记得使用<br>dev.off() #<br>函数关闭活动版面，否则会影响之后的其他不相关图表！</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天跟大家分享了关于图表嵌套的函数用法，今天跟大家分享在多图情况下如何正确的进行图表的版面布局。&lt;/p&gt;
&lt;p&gt;这里要分享的图表版面设计其实就是指，在做了很多图的情况下，如何将诸多图表合理的布局在一张大的版面上，而不是一幅一幅的导出最后在其他软件中手动拼凑。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
      <category term="版面控制" scheme="http://www.raindu.com/tags/%E7%89%88%E9%9D%A2%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——ggplot携手plotly，让你的图表灵动起来！</title>
    <link href="http://www.raindu.com/2017/06/16/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E6%90%BA%E6%89%8Bplotly%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%BE%E8%A1%A8%E7%81%B5%E5%8A%A8%E8%B5%B7%E6%9D%A5%EF%BC%81/"/>
    <id>http://www.raindu.com/2017/06/16/R语言可视化——ggplot携手plotly，让你的图表灵动起来！/</id>
    <published>2017-06-16T14:11:17.000Z</published>
    <updated>2017-06-16T14:37:37.267Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间一直在研究ggplot2这个神奇的可视化利器，可是ggplot2纵然所向披靡，唯独无法呈现动态效果！</p>
<p>最近发现R语言的官方CRAN中有一款名叫plotly的包，详细了解了下，这个plotly是基于js脚本语言开发的专用于动态交互可视化的利器，开发有在线版和桌面本，而且效果相当不错！</p>
<a id="more"></a>
<p>而这里提到的plotly包就是该机构专门针对R语言环境发布的可视化包（具有不仅R语言，给MATLAB和Python都留有接口），不但可以协助ggplot2包将静态图表动态化，而且拥有自己独特的作图函数语法（语法非常精炼，据说是参考ggplot的语法写的，基本上一看就懂）。</p>
<p>今天只涉及ggplot结合plotly而动态化图表的功能，暂不涉及plotly的独有作图函数。（主要是自己也正摸索中，找个合适的时间再跟大家分享）。</p>
<p>这个包因为是辅助ggplot2开发的，所以需要ggplot2包同时加载协同工作。</p>
<h3 id="包下载及加载："><a href="#包下载及加载：" class="headerlink" title="包下载及加载："></a>包下载及加载：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">devtools::install_github(<span class="string">"ropensci/plotly"</span>)</div><div class="line"><span class="keyword">library</span>(<span class="string">"plotly"</span>)</div><div class="line"><span class="keyword">library</span>(ggplot2)</div></pre></td></tr></table></figure>
<h3 id="数据集预览："><a href="#数据集预览：" class="headerlink" title="数据集预览："></a>数据集预览：</h3><p>这里我将使用ggplot2的内置数据集diamonds先做出图表，然后使用plotly函数进行动态化。</p>
<p>为了更加明显的看出最终的动效，这里使用随机取样，只抽取500个记录。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set.seed(<span class="number">2333</span>)</div><div class="line">mydata &lt;- mydata[sample(nrow(mydata), <span class="number">500</span>), ]</div><div class="line">head(mydata)</div></pre></td></tr></table></figure>
<p><img src="http://orn9f9laz.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orn9f9laz.bkt.clouddn.com/image2.png" alt=""></p>
<h3 id="plotly动态图表演示："><a href="#plotly动态图表演示：" class="headerlink" title="plotly动态图表演示："></a>plotly动态图表演示：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(carat,price,colour=color))+geom_point()</div></pre></td></tr></table></figure>
<p><img src="http://orn9f9laz.bkt.clouddn.com/image3.png" alt=""></p>
<p>接下来是我们要重点关注的地方，以上使用ggplot函数制作的默认的散点图，是一张静态的不带任何交互效果的图表。</p>
<p>尽管ggplot的作者在图表背后针对默认的图表主题及背景做了深度美化，但是没有动态效果这一点儿着实让人感觉有点儿美中不足：</p>
<p>我所说的动态效果是指：当鼠标悬浮到任何一个数据点，立马会有弹出文本框显示该数据点的具体指标信息，当鼠标点击图例中的分类标识时，显示对应分类项下的数据点，而其他未被选中的数据点均会自动隐藏或者淡化（变成浅灰色）。这是我所理解的动态图表的最基础属性。</p>
<p>但是有了plotly包的辅助，ggplot所做出来的图表立马可是实现以上所述的功能：</p>
<p>而所需要的函数却极其简单：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplotly()</div></pre></td></tr></table></figure>
<p><img src="http://orn9f9laz.bkt.clouddn.com/image4.png" alt=""></p>
<p>运行完以上代码，再次zoom你的图表，仔细观察你会发现，图表右上角多出了一行菜单，而且当你将鼠标悬浮在任意一个数据点上时，立马回弹出对应的文本信息对对应数据点进行详细注释。</p>
<p>更加不可思议的是，当你用鼠标单击右侧图例对应分类项，则图表中会对应只显示选中的分类项目数据点；</p>
<p>右上角的菜单中你可以自由选择将图表聚焦呈现、放大缩小、保存为图片等多种功能。</p>
<p><img src="http://orn9f9laz.bkt.clouddn.com/image5.png" alt=""></p>
<p>下面是我录制的一个动态小视频，可以感受下plotly带给ggplot的动态交互体验：<br><img src="http://orn9f9laz.bkt.clouddn.com/image6.png" alt=""></p>
<iframe frameborder="0" width="640" height="498" src="https://v.qq.com/iframe/player.html?vid=t13096cfgh5&tiny=0&auto=0" allowfullscreen></iframe>

<p>而且这种动态效果机会不受ggplot图表类型及版面的限制，在分面情况下，动态效果依然如故：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(carat,price,colour=color))+geom_point()+theme_economist()+scale_colour_economist()+facet_wrap(~cut)</div><div class="line">ggplotly()</div></pre></td></tr></table></figure></p>
<p><img src="http://orn9f9laz.bkt.clouddn.com/image7.png" alt=""></p>
<p>以上图表中加入了经济学人的主题及配色模板，动态效果依然还在，有了这种动态效果，展示呈现多维数据方面，省去了不少麻烦，特别是分类较多时，一时半会很难弄清楚某种分类的整体分布情况，而通过动态选择，可以很容易的过滤掉暂时无关的分类项对信息获取的障碍。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这段时间一直在研究ggplot2这个神奇的可视化利器，可是ggplot2纵然所向披靡，唯独无法呈现动态效果！&lt;/p&gt;
&lt;p&gt;最近发现R语言的官方CRAN中有一款名叫plotly的包，详细了解了下，这个plotly是基于js脚本语言开发的专用于动态交互可视化的利器，开发有在线版和桌面本，而且效果相当不错！&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="动态图表" scheme="http://www.raindu.com/tags/%E5%8A%A8%E6%80%81%E5%9B%BE%E8%A1%A8/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
      <category term="版面控制" scheme="http://www.raindu.com/tags/%E7%89%88%E9%9D%A2%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Excel依然是一款强大的数据可视化利器~</title>
    <link href="http://www.raindu.com/2017/06/16/Excel%E4%BE%9D%E7%84%B6%E6%98%AF%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%A9%E5%99%A8/"/>
    <id>http://www.raindu.com/2017/06/16/Excel依然是一款强大的数据可视化利器/</id>
    <published>2017-06-16T01:32:50.000Z</published>
    <updated>2017-06-16T14:17:25.610Z</updated>
    
    <content type="html"><![CDATA[<p>早期的数据小魔方用户大概都知道，我最初也是从学习Excel起步的，只是学习的深入了之后，才开开慢慢的迁移到R语言。</p>
<p>我往R语言转型并不代表自己开始放弃Excel或者觉得Excel不适合做可视化，只是想体验一下Excel外围的可视化世界是什么样子的，毕竟在这个大行业内，还活跃着太多可视化领域的佼佼者，譬如 PowerBI、Tableau等。</p>
<a id="more"></a>
<h3 id="对图表的粗浅认识："><a href="#对图表的粗浅认识：" class="headerlink" title="对图表的粗浅认识："></a>对图表的粗浅认识：</h3><p>当然，这些软件各有特点，但是在要划分一个类别的话，我觉得可以划分为三类：</p>
<ul>
<li>Excel（以及寄生于Excel平台的各种辅助软件dashboard、Think-cell-chart）</li>
<li>桌面端可视化工具（以Tableau、PowerBI等）</li>
<li>编程工具。（以R语言、Python以及各种js开源可视化库）</li>
</ul>
<p>但若要继续对其进行简化分类的话，我觉得其实可以分为两类：</p>
<ul>
<li>Excel家族；</li>
<li>非Excel家族。</li>
</ul>
<p>也许这里的分类大家会觉得摸不着头脑，我的理由是，数据可视化很重要的一步即是对原始业务数据结构的理解，而在Excel的图表库中，微软所设计的图形库是基于二维表的。（因为Excel自由灵活的表结构不限制变量类型，不识别因子变量（即用于构造模型或者用于图形映射））。</p>
<p>也许以上解释并不能令你满意，这里我只强调一点，同样制作一个多分类的柱形图（或者条形图），假若你获取的原始数据是三个字段，一个门店名称，一个季度标签，一个销售额，那么这种数据结构你是无法对其进行图表化呈现的，你需要借助Excel的数据透视功能，对其进行维度交叉透析，进而使用汇总表（二维表）进行多分类图表构建。</p>
<p>以上就是Excel中图表构建原理的大致过程，而除Excel之外的数据可视化产品，基本上都是使用一维表结构（长数据）来构建可视化图形的。其中因子变量（即通常意义上的分类变量）充当着至关重要的作用。</p>
<p>这也是用惯了Excel的小伙伴儿，如果想要迁移到其他可视化工具上，迈出的第一步往往无比艰难（也不能一概而论，假如你经常使用Excel的数据透视表功能，并且对数据库有所了解，对于数据的长宽转换应该早就烂熟于心了，这道坎不会困扰你太久）。</p>
<p>二维表有二维表的好处，即所见即所得，因为二表已经具备一定的图形化特征，而不单单是表了，但是二维表作图在效率上有着天然的劣势，即你会淡化对数据数据结构的理解，会被Excel的这种作图理念所吞噬，进而被绑架。（纯属个人愚见）</p>
<p>又扯远了，今天的主角仍然是Excel，我使用自己学习以来的案例来说明，Excel仍然是一款不折不扣的优秀可视化工具。</p>
<p>###案例模仿：</p>
<p>学习的第一步当然是模仿，所以才有了这些积淀很久的案例：</p>
<p><img src="http://orm967kgl.bkt.clouddn.com/image13.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image14.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image15.jpg" alt=""></p>
<h3 id="调整高难度案例："><a href="#调整高难度案例：" class="headerlink" title="调整高难度案例："></a>调整高难度案例：</h3><p>模仿可以快速提升你的“图感”，然后你会更大胆的去挑战高难度动作：</p>
<p><img src="http://orm967kgl.bkt.clouddn.com/image17.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image2.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image3.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image4.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image5.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image6.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image7.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image8.png" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image1.jpg" alt=""></p>
<h3 id="尝试着自己找案例练习："><a href="#尝试着自己找案例练习：" class="headerlink" title="尝试着自己找案例练习："></a>尝试着自己找案例练习：</h3><p>等有了足够的经验和技巧积累，尝试着自己找案例去做：</p>
<p><img src="http://orm967kgl.bkt.clouddn.com/image16.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image19.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image20.jpg" alt=""></p>
<h3 id="实习中接触项目锻炼："><a href="#实习中接触项目锻炼：" class="headerlink" title="实习中接触项目锻炼："></a>实习中接触项目锻炼：</h3><p>实习是很好的锻炼机会，可能你不需要做高难度高复杂度的工作，但是你能学到如何平衡技能与实际业务数据，融合并凝练细节。</p>
<p><img src="http://orm967kgl.bkt.clouddn.com/image9.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image10.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image11.jpg" alt=""><br><img src="http://orm967kgl.bkt.clouddn.com/image12.jpg" alt=""></p>
<p>Excel的强大远不止于此，如果你能习得名称管理器、开发工具与高级查询函数，那么制作动态仪表盘是分分钟的事儿，再将平时里积淀的优秀版式、配色方案等融入其中，那么你的工作价值一定会呈指数级增长。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早期的数据小魔方用户大概都知道，我最初也是从学习Excel起步的，只是学习的深入了之后，才开开慢慢的迁移到R语言。&lt;/p&gt;
&lt;p&gt;我往R语言转型并不代表自己开始放弃Excel或者觉得Excel不适合做可视化，只是想体验一下Excel外围的可视化世界是什么样子的，毕竟在这个大行业内，还活跃着太多可视化领域的佼佼者，譬如 PowerBI、Tableau等。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化案例呈现" scheme="http://www.raindu.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A1%88%E4%BE%8B%E5%91%88%E7%8E%B0/"/>
    
    
      <category term="Excel" scheme="http://www.raindu.com/tags/Excel/"/>
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="商务图表" scheme="http://www.raindu.com/tags/%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>学习R语言我都做了那些有趣的事情！！！</title>
    <link href="http://www.raindu.com/2017/06/16/%E5%AD%A6%E4%B9%A0R%E8%AF%AD%E8%A8%80%E6%88%91%E9%83%BD%E5%81%9A%E4%BA%86%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>http://www.raindu.com/2017/06/16/学习R语言我都做了那些有趣的事情！！！/</id>
    <published>2017-06-16T01:01:29.000Z</published>
    <updated>2017-06-16T14:17:25.937Z</updated>
    
    <content type="html"><![CDATA[<p>学习R语言已经整整一年光景了， 是时候整理一下自己学习以来的收获和成就。</p>
<p>虽然一直学的很专注（一直埋头在可视化的小圈子了，总感觉这样是停留在舒适区，也许外面的风景会更好），但是专注有专注的好处，就是每一个细节都有机会做的更好！</p>
<p>以下是我学习以来自己练习过程中的一些案例，包括给别人定做的报告、高仿的商务图表、以及我尝试着创新出的一些好玩的创意图表，集中分享给大家。</p>
<a id="more"></a>
<p><strong>以下案例按照时间顺序排列：</strong></p>
<h3 id="刚入门没多久，就跃跃欲试的开始模仿那些曾经用Excel做过的商务图表"><a href="#刚入门没多久，就跃跃欲试的开始模仿那些曾经用Excel做过的商务图表" class="headerlink" title="刚入门没多久，就跃跃欲试的开始模仿那些曾经用Excel做过的商务图表"></a>刚入门没多久，就跃跃欲试的开始模仿那些曾经用Excel做过的商务图表</h3><p><img src="http://orm8l6eph.bkt.clouddn.com/image7.jpg" alt=""></p>
<h3 id="也热衷于制作各种炫酷的信息图："><a href="#也热衷于制作各种炫酷的信息图：" class="headerlink" title="也热衷于制作各种炫酷的信息图："></a>也热衷于制作各种炫酷的信息图：</h3><p><img src="http://orm8l6eph.bkt.clouddn.com/image8.jpg" alt=""></p>
<h3 id="练习了大量的数据地图"><a href="#练习了大量的数据地图" class="headerlink" title="练习了大量的数据地图"></a>练习了大量的数据地图</h3><p>（所以才有资格跟大家输出地理信息可视化案例呀！）</p>
<p><img src="http://orm8l6eph.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image2.png" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image3.png" alt=""></p>
<h3 id="给别人定做过一些有报酬的小作品："><a href="#给别人定做过一些有报酬的小作品：" class="headerlink" title="给别人定做过一些有报酬的小作品："></a>给别人定做过一些有报酬的小作品：</h3><p><img src="http://orm8l6eph.bkt.clouddn.com/image4.jpg" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image5.jpg" alt=""></p>
<h3 id="尝试着爬取数据，做一些地理信息可视化作品："><a href="#尝试着爬取数据，做一些地理信息可视化作品：" class="headerlink" title="尝试着爬取数据，做一些地理信息可视化作品："></a>尝试着爬取数据，做一些地理信息可视化作品：</h3><p><img src="http://orm8l6eph.bkt.clouddn.com/image6.jpg" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image16.jpg" alt=""></p>
<h3 id="一些零零散散的小创意也会令自己成就感爆满："><a href="#一些零零散散的小创意也会令自己成就感爆满：" class="headerlink" title="一些零零散散的小创意也会令自己成就感爆满："></a>一些零零散散的小创意也会令自己成就感爆满：</h3><p><img src="http://orm8l6eph.bkt.clouddn.com/image9.png" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image10.png" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image11.jpg" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image12.png" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image13.jpg" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image14.jpg" alt=""><br><img src="http://orm8l6eph.bkt.clouddn.com/image15.png" alt=""></p>
<p>以上所有图表（不含文字云）都是基于R语言ggplot2包绘制；</p>
<p>回首学习的过程，虽然很痛苦但也都挺过来了，没有专门学习R语言的相关课程（几乎也不存在这种可能，因为我在案例中融入的元素并不是来自于R语言本身，而是以前积淀的可视化基础），也几乎没有正儿八经的看完一本R语言可视化的参考书。</p>
<p>当然这些并不是全部，还有很多案例来不及给大家分享，那些学完爬虫之后，自己能够遍历网页，获取实用数据的时刻，确实非常令人振奋。</p>
<p>也许学习技能的最好方式，就是立马用起来，做一些有趣的事情，时刻保持着热情，那么总能有所收获！</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习R语言已经整整一年光景了， 是时候整理一下自己学习以来的收获和成就。&lt;/p&gt;
&lt;p&gt;虽然一直学的很专注（一直埋头在可视化的小圈子了，总感觉这样是停留在舒适区，也许外面的风景会更好），但是专注有专注的好处，就是每一个细节都有机会做的更好！&lt;/p&gt;
&lt;p&gt;以下是我学习以来自己练习过程中的一些案例，包括给别人定做的报告、高仿的商务图表、以及我尝试着创新出的一些好玩的创意图表，集中分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="可视化案例呈现" scheme="http://www.raindu.com/categories/%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A1%88%E4%BE%8B%E5%91%88%E7%8E%B0/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="商务图表" scheme="http://www.raindu.com/tags/%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——图表嵌套（母子图）</title>
    <link href="http://www.raindu.com/2017/06/15/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9B%BE%E8%A1%A8%E5%B5%8C%E5%A5%97%EF%BC%88%E6%AF%8D%E5%AD%90%E5%9B%BE%EF%BC%89/"/>
    <id>http://www.raindu.com/2017/06/15/R语言可视化——图表嵌套（母子图）/</id>
    <published>2017-06-15T00:48:04.000Z</published>
    <updated>2017-06-16T14:17:25.752Z</updated>
    
    <content type="html"><![CDATA[<p>之前在学习ggplot的时候，一直存在着一个困惑。</p>
<p>就是这个函数是否允许两个做出来的两个相关图表重叠嵌套（也就是在一个大图（主图）的边缘位置，放置另一个缩小版的小图）。</p>
<p>这个想法很奇葩，本来想着没啥希望，鉴于该包的开发者那犀利的审美观，估计也不能允许这种情况的发生。</p>
<p>不过最近浏览一位大神的博客，真的有这种情况的解决措施，喜出望外，赶紧在这里分享给大家。</p>
<a id="more"></a>
<p>不过他的处理方式不是通过ggplot的内置函数，而是通过grid包中的viewport函数来实现的：</p>
<p><strong>以下是具体的实现步骤：</strong></p>
<h3 id="加载包："><a href="#加载包：" class="headerlink" title="加载包："></a>加载包：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)  <span class="comment">#用于画图，主图和附图都使用ggplot的内置数据集</span></div><div class="line"><span class="keyword">library</span>(grid)     <span class="comment">#用于设定附图的长宽及叠放在主图的精确位置</span></div></pre></td></tr></table></figure>
<h3 id="加载并预览数据集："><a href="#加载并预览数据集：" class="headerlink" title="加载并预览数据集："></a>加载并预览数据集：</h3><p>这里我们还是使用关于钻石的那个数据集（之前的图表案例很多都是使用该数据集）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data(diamonds)</div><div class="line">head(diamonds)</div></pre></td></tr></table></figure></p>
<p><img src="http://orkcefhda.bkt.clouddn.com/image1.png" alt=""></p>
<h3 id="制作复合图的主图："><a href="#制作复合图的主图：" class="headerlink" title="制作复合图的主图："></a>制作复合图的主图：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(<span class="number">0.9</span>,<span class="number">0.72</span>),legend.background=element_rect(I(<span class="number">0</span>)))</div></pre></td></tr></table></figure>
<p><img src="http://orkcefhda.bkt.clouddn.com/image2.png" alt=""></p>
<p>以上函数可以制作出以carat和price为主要对应关系的散点图，同时分类变量cut通过颜色映射进行区分。最后调整了图例位置和图表背景。</p>
<p><strong>设定附图长宽及分布精确位置：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vie&lt;-viewport(width=<span class="number">0.669</span>,height=<span class="number">0.4</span>,x=<span class="number">0.7</span>,y=<span class="number">0.306</span>)</div></pre></td></tr></table></figure>
<h3 id="制作附图"><a href="#制作附图" class="headerlink" title="制作附图:"></a>制作附图:</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">chart2 &lt;-ggplot(diamonds,aes(depth,fill=cut,alpha=<span class="number">.2</span>))+geom_density()+xlim(<span class="number">54</span>,<span class="number">70</span>) +</div><div class="line">       theme(axis.text.y=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             axis.title.y=element_blank(),</div><div class="line">             axis.text.x=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             plot.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">0</span>),</div><div class="line">             panel.background=element_rect(I(<span class="number">0</span>)),</div><div class="line">             panel.grid.major=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             panel.grid.minor=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             legend.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">1</span>),</div><div class="line">             legend.position=c(<span class="number">0.85</span>,<span class="number">0.72</span>))</div><div class="line"></div><div class="line">chart2  <span class="comment">#预览附图</span></div></pre></td></tr></table></figure>
<p><img src="http://orkcefhda.bkt.clouddn.com/image5.png" alt=""></p>
<p>因为附图要放置在主图边缘并且缩放很大比例，为了防止其背景和网格线系统遮挡主图的重要信息，对其主题元素进行了大量的简化。</p>
<h3 id="将主图与附图合成一并显示："><a href="#将主图与附图合成一并显示：" class="headerlink" title="将主图与附图合成一并显示："></a>将主图与附图合成一并显示：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(chart2,vp=vie)</div></pre></td></tr></table></figure>
<p><img src="http://orkcefhda.bkt.clouddn.com/image3.png" alt=""></p>
<h3 id="将以上代码打包组合："><a href="#将以上代码打包组合：" class="headerlink" title="将以上代码打包组合："></a>将以上代码打包组合：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(<span class="number">0.9</span>,<span class="number">0.72</span>),legend.background=element_rect(I(<span class="number">0</span>)))</div><div class="line">chart1</div><div class="line">vie&lt;-viewport(width=<span class="number">0.669</span>,height=<span class="number">0.4</span>,x=<span class="number">0.7</span>,y=<span class="number">0.306</span>)</div><div class="line">chart2 &lt;-ggplot(diamonds,aes(depth,fill=cut,alpha=<span class="number">.2</span>))+geom_density()+xlim(<span class="number">54</span>,<span class="number">70</span>) +</div><div class="line">       theme(axis.text.y=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             axis.title.y=element_blank(),</div><div class="line">             axis.text.x=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             plot.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">0</span>),</div><div class="line">             panel.background=element_rect(I(<span class="number">0</span>)),</div><div class="line">             panel.grid.major=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             panel.grid.minor=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             legend.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">1</span>),</div><div class="line">             legend.position=c(<span class="number">0.85</span>,<span class="number">0.72</span>))</div><div class="line">print(chart2,vp=vie)</div></pre></td></tr></table></figure>
<p><img src="http://orkcefhda.bkt.clouddn.com/image3.png" alt=""></p>
<p>其实仔细看这种做法，里面也不外乎图层叠加，先做出主图，然后通过viewport函数将附图缩小并叠加到主图上，不过这种方式用来展示一些需要多角度透视的数据分布问题还是很合适的，而且因为是依赖于不同的包，所有主图与附图之间没有严格的类型限制，你所需要做的只是调整好两个图表的位置与大小，别让彼此相互遮挡掩盖重要信息就OK了。</p>
<p><strong>下面我将附图的类型更换为堆积直方图大家看下效果：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(<span class="number">0.9</span>,<span class="number">0.72</span>),legend.background=element_rect(I(<span class="number">0</span>)))</div><div class="line">chart1</div><div class="line">vie&lt;-viewport(width=<span class="number">0.669</span>,height=<span class="number">0.4</span>,x=<span class="number">0.7</span>,y=<span class="number">0.306</span>)</div><div class="line">chart2 &lt;-ggplot(diamonds,aes(depth,fill=color))+geom_histogram()+xlim(<span class="number">54</span>,<span class="number">70</span>) +</div><div class="line">       theme(axis.text.y=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             axis.title.y=element_blank(),</div><div class="line">             axis.text.x=element_text(face=<span class="string">"bold"</span>,colour=<span class="string">"black"</span>),</div><div class="line">             plot.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">0</span>),</div><div class="line">             panel.background=element_rect(I(<span class="number">0</span>)),</div><div class="line">             panel.grid.major=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             panel.grid.minor=element_line(colour=<span class="literal">NA</span>),</div><div class="line">             legend.background=element_rect(I(<span class="number">0</span>),linetype=<span class="number">1</span>),</div><div class="line">             legend.position=c(<span class="number">0.85</span>,<span class="number">0.72</span>))</div><div class="line">print(chart2,vp=vie)</div></pre></td></tr></table></figure></p>
<p><img src="http://orkcefhda.bkt.clouddn.com/image4.png" alt=""></p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在学习ggplot的时候，一直存在着一个困惑。&lt;/p&gt;
&lt;p&gt;就是这个函数是否允许两个做出来的两个相关图表重叠嵌套（也就是在一个大图（主图）的边缘位置，放置另一个缩小版的小图）。&lt;/p&gt;
&lt;p&gt;这个想法很奇葩，本来想着没啥希望，鉴于该包的开发者那犀利的审美观，估计也不能允许这种情况的发生。&lt;/p&gt;
&lt;p&gt;不过最近浏览一位大神的博客，真的有这种情况的解决措施，喜出望外，赶紧在这里分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
      <category term="版式设计" scheme="http://www.raindu.com/tags/%E7%89%88%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="grid" scheme="http://www.raindu.com/tags/grid/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——地图与气泡图结合应用</title>
    <link href="http://www.raindu.com/2017/06/14/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8E%E6%B0%94%E6%B3%A1%E5%9B%BE%E7%BB%93%E5%90%88%E5%BA%94%E7%94%A8/"/>
    <id>http://www.raindu.com/2017/06/14/R语言可视化——地图与气泡图结合应用/</id>
    <published>2017-06-14T00:50:58.000Z</published>
    <updated>2017-06-16T14:17:25.761Z</updated>
    
    <content type="html"><![CDATA[<p>今天跟大家分享如何在地图上进行散点图、气泡图绘制。</p>
<p>昨天跟大家介绍了<code>ggplot</code>函数进行地图绘制的原理，通过轮廓点和分组来定义每一个地区（国家边界），通过多边形填充来完成区域填色。</p>
<p><code>ggplot</code>的图层叠加原理允许许我们在坐标系统的叠加多个图层；</p>
<a id="more"></a>
<p>所以在地图上叠加散点、甚至气泡可以很容易的实现：</p>
<h3 id="包的导入："><a href="#包的导入：" class="headerlink" title="包的导入："></a>包的导入：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(maptools)</div><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(plyr)</div></pre></td></tr></table></figure>
<h3 id="导入地理信息数据："><a href="#导入地理信息数据：" class="headerlink" title="导入地理信息数据："></a>导入地理信息数据：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">china_map &lt;- readShapePoly(<span class="string">"c:/rstudy/bou2_4p.shp"</span>)            <span class="comment"># 读取地图信息数据</span></div><div class="line">china_map1 &lt;- fortify(china_map)                               <span class="comment">#转化为数据框</span></div></pre></td></tr></table></figure>
<h3 id="业务数据导入及作图数据合并："><a href="#业务数据导入及作图数据合并：" class="headerlink" title="业务数据导入及作图数据合并："></a>业务数据导入及作图数据合并：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mydata &lt;- read.csv(<span class="string">"c:/rstudy/geshengzhibiao.csv"</span>)             <span class="comment">#读取业务数据</span></div><div class="line">province_city &lt;- read.csv(<span class="string">"c:/rstudy/chinaprovincecity.csv"</span>)   <span class="comment">#读取省会城市坐标</span></div><div class="line">china_data &lt;- join(province_city, mydata, type=<span class="string">"full"</span>)         <span class="comment">#合并两个数据框</span></div></pre></td></tr></table></figure>
<p><img src="http://orii3gxl2.bkt.clouddn.com/image1.png" alt=""></p>
<h3 id="地图语法："><a href="#地图语法：" class="headerlink" title="地图语法："></a>地图语法：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ggplot()+</div><div class="line">     geom_polygon(data=china_map1, aes(x=long, y=lat, group=group), fill=<span class="string">"grey95"</span>, colour=<span class="string">"grey60"</span>)+ </div><div class="line">     geom_point(data=china_data, aes(x = jd,y = wd, size=zhibiao, fill=zhibiao2, alpha=<span class="number">0.3</span>), shape=<span class="number">21</span>, colour=<span class="string">"black"</span>)+ </div><div class="line">     scale_size_area(max_size=<span class="number">8</span>)+         </div><div class="line">scale_fill_gradient2(low=<span class="string">"DarkCyan"</span>, mid=<span class="string">"Azure"</span>, high=<span class="string">"Sienna"</span>, midpoint=median(na.omit</div><div class="line">(china_data$zhibiao2)))+         </div><div class="line">     coord_map(<span class="string">"polyconic"</span>) +ggtitle(<span class="string">"Heat&amp;Bubble plot"</span>)+</div><div class="line">     theme(</div><div class="line">          panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank(),</div><div class="line">          legend.position = <span class="string">"none"</span></div><div class="line">          )</div></pre></td></tr></table></figure>
<p><img src="http://orii3gxl2.bkt.clouddn.com/image3.png" alt=""></p>
<p>以上语法中，使用了<code>geom_polygon()</code>多边形函数来定义并填充地图背景 （注意里面的<code>fill</code>参数（指定地图区域颜色），<code>colour</code>参数指定多边形（也就是地区轮廓线）边框颜色），然后通过<code>geom_point()</code>函数添加散点图图层。</p>
<p>图层中指定数据源为合并后的业务数据，散点面积（大小）用<code>zhibiao1</code>来映射，气泡图颜色用<code>zhibiao2</code>来映射（本来散点是只有点颜色（使用<code>colour</code>控制，没有填充色的，可是当给散点指定其形状后，散点就有了面积属性可以使用<code>fill</code>进行颜色填充），气泡的轮廓线用<code>colour</code>来指定）。</p>
<p>之后的<code>scale_size_area（）</code>和<code>scale_fill_gradient2（）</code>是对前面<code>geom_point</code>内的<code>fill</code>与<code>size</code>两个标度进行的深度调整，<code>scale_size_area（）</code>告诉软件散点大小与面积要严格的与指标1具体数值大小成比例，并规定面积最大为25。</p>
<p><code>scale_fill_gradient2（）</code>定义了一个三色渐变，<code>low</code>、<code>mid</code>、<code>high</code>分别由一个颜色代码控制，同时均值颜色要映射给指标2的平均数。</p>
<p>最后的<code>ggtitle</code>定义主题，<code>theme</code>内的参数清除掉所有图层上的无关元素（背景、网格系统、横纵轴标签、刻度线、轴标题、图例）</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天跟大家分享如何在地图上进行散点图、气泡图绘制。&lt;/p&gt;
&lt;p&gt;昨天跟大家介绍了&lt;code&gt;ggplot&lt;/code&gt;函数进行地图绘制的原理，通过轮廓点和分组来定义每一个地区（国家边界），通过多边形填充来完成区域填色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ggplot&lt;/code&gt;的图层叠加原理允许许我们在坐标系统的叠加多个图层；&lt;/p&gt;
    
    </summary>
    
      <category term="ggplot2" scheme="http://www.raindu.com/categories/ggplot2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="地理信息可视化" scheme="http://www.raindu.com/tags/%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
      <category term="数据地图" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>用R语言抓取网页图片——从此高效存图告别手工时代</title>
    <link href="http://www.raindu.com/2017/06/13/%E7%94%A8R%E8%AF%AD%E8%A8%80%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E2%80%94%E2%80%94%E4%BB%8E%E6%AD%A4%E9%AB%98%E6%95%88%E5%AD%98%E5%9B%BE%E5%91%8A%E5%88%AB%E6%89%8B%E5%B7%A5%E6%97%B6%E4%BB%A3/"/>
    <id>http://www.raindu.com/2017/06/13/用R语言抓取网页图片——从此高效存图告别手工时代/</id>
    <published>2017-06-13T07:19:50.000Z</published>
    <updated>2017-06-16T14:17:26.010Z</updated>
    
    <content type="html"><![CDATA[<p>今天这个标题实在是有点言过其实了，对于R的爬虫知识，我只是领会了一点儿皮毛。</p>
<p>主要看不懂正则表达式，特别是那种一个括号里要匹配多种类型文本的语句，特像火星文，估计短期很难搞懂了。</p>
<p>再加上对于HTML结构没啥感觉，在目标定位上很苦恼。</p>
<p>但是相对于文本信息而言，图片在html中的地址比较好获取，这里仅以图片抓取为例，会Python爬虫的大神还求轻喷~</p>
<a id="more"></a>
<p>今天要爬取的是一个多图的知乎网页，是一个外拍的帖子，里面介绍了巨多各种外拍技巧，很实用的干货。</p>
<h3 id="网页分析："><a href="#网页分析：" class="headerlink" title="网页分析："></a>网页分析：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(rvest)</div><div class="line"><span class="keyword">library</span>(downloader)</div><div class="line"><span class="keyword">library</span>(stringr)</div><div class="line"><span class="keyword">library</span>(dplyr)</div></pre></td></tr></table></figure>
<p><a href="https://www.zhihu.com/question/19647535" target="_blank" rel="external">知乎某外拍帖子</a></p>
<p>打开网页之后，在帖子内容里随便定位一张图片，然后单击右键——检查元素（Ctrl+Shift+I），页面右侧弹出的网页结构会自动定位到该图片的地址，你会看到该图片在html结构中的名称标签：——（img）;地址标签——（src）。</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image1.png" alt=""><br><img src="http://orh5ym86b.bkt.clouddn.com/image9.jpg" alt=""></p>
<p>我们想要获取的就是该图片的地址信息，你可以尝试着使用downlond函数下载单张图片。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url&lt;-<span class="string">"https://pic4.zhimg.com/2db250e935ca4f1b8b2b546c60104067_b.jpg"</span></div><div class="line">download(url,<span class="string">"D:/R/Image/picturebbb.jpg"</span>, mode = <span class="string">"wb"</span>)</div></pre></td></tr></table></figure>
<p>这样就完成了自动下载过程，但是图片地址仍然是肉眼观察获取的，显然不够智能，我们想要的效果是通过一个函数自动的批量获取图片地址并下载图片。</p>
<p>那么下一步的目标就很明确了，如何通过函数批评获取图片地址，然后将包含图片地址的字符串向量传递给下载函数。</p>
<p>以上就需要我们大致了解html的构建了，知道所有的图片存放在html构建的那一部分里面，通过网址定位到图片存放区间，通过获取图片存放的区间，批量获取图片地址，然后传递给下载函数执行。</p>
<p>太深入的我也不太了解，但是html的常用结构无非是head/body/,head中存放网页标题和导航栏的信息（我是小白，不要吐槽以上每一句话的准确性哈~），而我们要抓取的目标图片肯定是存放在body中啦。</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image2.png" alt=""></p>
<p>继续打开body部分，你会被一大摞的<div> </div>结构晃瞎眼，不要担心，我已经瞎了好几回了~—~</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image3.png" alt=""></p>
<p>div是html里面的分区结构，每一个分区都是以<div>开头,以</div>结尾。（html中几乎所有结构都是这种方式，仔细观察一下其他形式的结构就会发现）。</p>
<p>当然div分区有N多个，而且div结构本身可以层层嵌套。对于太复杂的网页，在你发现图片存放的div分区之前估计会先被div语句晃瞎眼。</p>
<p>那怎么办呢，还记得在本文开始部分，说的那个手动定位吗，依靠浏览器的审查元素功能，我们可以先定位要下载的第一张图片，右键——检查，找到该图片的div分支结构。</p>
<p>我们需要获取的信息是该图片的div分区名称信息（就是div结构中的class属性或者ID属性）</p>
<p>class和ID获取其中一个就行，如果是class属性，则地址书写规则是：div.class，如果是ID则规则是div#ID。</p>
<p>如果class和ID中字符较长，且单词间存在空格，空格以英文.号替换。</p>
<p>以上图片的div分支结构定位信息就可以写作div.zm-editable-content.clearfix</p>
<p>其实这里有一个简便方法，如果你不确定自己定位的区间是否正确的话，可以查看右下角的html路径（可以自动根据你的鼠标所在的html位置定位父级路径）。</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image4.png" alt=""></p>
<h3 id="简单爬取测试："><a href="#简单爬取测试：" class="headerlink" title="简单爬取测试："></a>简单爬取测试：</h3><p>接下来使用read_html函数获取网页并一步一步的定位图片地址。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">url &lt;- <span class="string">'https://www.zhihu.com/question/19647535'</span></div><div class="line">link&lt;- read_html(url)%&gt;% html_nodes(<span class="string">"div.zm-editable-content.clearfix"</span>)%&gt;%html_nodes(<span class="string">"img"</span>)%&gt;%html_attr(<span class="string">"src"</span>)</div></pre></td></tr></table></figure>
<p>我们需要获取的是图片所在div分支结构中的img标签下的src内容（也就是图片地址），那么如果不想抓取一大堆不相干的图片的话，就必须明确目标图片的存放位置，以上代码过程从url(该知乎帖子页面网址)定位到目标图片所在的div分支结构，然后定位到分支结构中的img(图片标签)中的src信息（也就是目标图片网址）。</p>
<p>运行以上两句代码并以head函数预览link向量的前几行，查看获取的图片地址是否正确。</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image5.png" alt=""></p>
<p>很遗憾，我们获取的存放图片地址信息的字符串向量中，每隔一行都有一个无效网址，如果不清除掉这些无效网址或者筛选出那些完整的网址的时候，download函数执行到无效网址会终端，下载过程就会失败。</p>
<p>这里需要使用stringr包来进行条件筛选。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pat = <span class="string">"https"</span></div><div class="line">link&lt;-grep(pat, link,value=<span class="literal">TRUE</span>)</div></pre></td></tr></table></figure>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image6.png" alt=""></p>
<p>匹配之后，只保留了完整的图片网址，这就是我们最终要的结果。现在可以使用一个for循环来自动执行图片批量下载任务。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dir.create(<span class="string">"D:R/Case/"</span>) <span class="comment">#新建文件夹</span></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(link)) </div><div class="line">&#123;</div><div class="line"> download(link[i],paste(<span class="string">"D:/R/Case/picture"</span>,i,<span class="string">".jpg"</span>,sep = <span class="string">""</span>), mode = <span class="string">"wb"</span>)</div><div class="line">&#125;  <span class="comment">#一个循环批处理所有下载任务</span></div></pre></td></tr></table></figure>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image7.png" alt=""></p>
<p>至此，爬虫的代码部分完成，剩余的时间……嘿嘿，泡一杯咖啡，看会儿美剧，静静地等待软件完成自动下载过程吧（速度视图片原始大小和宽带速度而定）。</p>
<p>结束之后，到D盘的Case文件夹下浏览下刚才下载的成果：</p>
<p><img src="http://orh5ym86b.bkt.clouddn.com/image8.png" alt=""></p>
<p>394张图片全部顺序标号，乖乖的躺在文件夹里了（当然里面还包含各种表情包图片，这个，我真的不太会分辨，暂时木办法）。</p>
<h3 id="内容总结："><a href="#内容总结：" class="headerlink" title="内容总结："></a>内容总结：</h3><p>下面就今天分享内容总结以下几点：</p>
<p>用R抓取图片的核心要点是获取html结构中存放图片的div分区中的img标签内的src内容（也就是图片地址，有时候可能需要使用read_src内的地址）。<br>图片的目标div分区结构的选取至关重要（如果你不指定div分区地址、只使用img标签下的src定位的话，很有可能抓取了全网页的图片网址，各种特殊符号和表情包、菜单栏和logo图表都会被抓取）<br>如果不太确定自己定位的div结构是否正确，可以借助鼠标选取+html路径信息来定位；<br>有时候有些网页的图片不是集中存放在单个div分区结构中，而是每张图片都是单独的div结构，这时候如果还是定位的最底层div分区位置的话，那么你可能只能获取单张图片地址。这时候适当的定位父级div分支结构名称（酌情观察，看那个父级结构范围可以涵盖所有目标图片的子div分支结构）<br>还有一种情况，就是有些公开的图片网站图片存储结构非常规则，分页存储，单页中单个div结构下的一组图片名称是按照数字顺序编号的：</p>
<p>比如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http：//<span class="comment">################.1.jpg</span></div><div class="line"> http：//<span class="comment">################.2.jpg</span></div><div class="line"> http：//<span class="comment">################.3.jpg</span></div><div class="line"> http：//<span class="comment">################.4.jpg</span></div><div class="line"> ………………………………………</div><div class="line"> http：//<span class="comment">################.n.jpg</span></div></pre></td></tr></table></figure>
<p>如果你碰到这种存储方式的图片网页，那你真的太幸运了，不用再傻乎乎的去从网页地址的html结构中一步一步的去定位图片地址了，直接使用for循环遍历完所有的图片网址，然后直接传递给download函数批量下载就OK了。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(n <span class="keyword">in</span> <span class="number">1</span>:<span class="number">50</span>)</div><div class="line">  <span class="comment">#自己定位到网页最后一个子页面，查看下最大的图片编号是多少。</span></div><div class="line">    &#123;   </div><div class="line">  </div><div class="line">     link&lt;- c(paste(<span class="string">"http：//################/"</span>,n,<span class="string">".jpg"</span>,sep=<span class="string">""</span>),link)</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> <span class="number">1</span>:length(link))</div><div class="line">&#123;</div><div class="line"> download(link[i],paste(<span class="string">"D:/R/Case/picture"</span>,i,<span class="string">".jpg"</span>,sep = <span class="string">""</span>), mode = <span class="string">"wb"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样完全避免了从网址中曾曾定位获取图片地址的麻烦，直接就可以获取全网页所有目标图片的地址，效率就更高了。</p>
<p>以上是小魔方最近学习过程中的一丁点儿心得，会爬虫的大神别喷我，我真的是个小白~</p>
<p>声明：</p>
<p>以上图片爬虫代码仅作个人练习R语言爬虫使用，各位小伙伴儿练习完毕之后，请尊重知乎原答主的版权，勿将所抓取图片商用，或者直接删除。<br>学好技术也要遵守底线，做一个规矩的技术达人。</p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天这个标题实在是有点言过其实了，对于R的爬虫知识，我只是领会了一点儿皮毛。&lt;/p&gt;
&lt;p&gt;主要看不懂正则表达式，特别是那种一个括号里要匹配多种类型文本的语句，特像火星文，估计短期很难搞懂了。&lt;/p&gt;
&lt;p&gt;再加上对于HTML结构没啥感觉，在目标定位上很苦恼。&lt;/p&gt;
&lt;p&gt;但是相对于文本信息而言，图片在html中的地址比较好获取，这里仅以图片抓取为例，会Python爬虫的大神还求轻喷~&lt;/p&gt;
    
    </summary>
    
      <category term="网络爬虫" scheme="http://www.raindu.com/categories/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="爬虫" scheme="http://www.raindu.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="revst" scheme="http://www.raindu.com/tags/revst/"/>
    
      <category term="网络抓取" scheme="http://www.raindu.com/tags/%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>当PowerBI遇到R语言</title>
    <link href="http://www.raindu.com/2017/06/13/%E5%BD%93PowerBI%E9%81%87%E5%88%B0R%E8%AF%AD%E8%A8%80/"/>
    <id>http://www.raindu.com/2017/06/13/当PowerBI遇到R语言/</id>
    <published>2017-06-13T00:31:12.000Z</published>
    <updated>2017-06-16T14:17:25.966Z</updated>
    
    <content type="html"><![CDATA[<p>PowerBI作为微软系最新的商务智能办公系统，自去年发布以来，一直都备受瞩目。</p>
<p>他的更新频次相当之高，功能更新迭代非常迅速。</p>
<p>大概对可视化领域稍有涉猎的朋友们，都明白其中缘由，大数据与云计算的趋势席卷全球，海量数据处理成为了限制各行业发展的掣肘。而受制于编程工具的门槛，大部分数据处理业务人员，可能要严重依赖Excel以及其他无需编程的可视化自助操作软件。</p>
<a id="more"></a>
<p>以上需求也称为自助式BI工具，也就是无需IT人员主导的、业务人员可自行操作的商务智能工具。</p>
<p>而目前这个领域，<code>Tableau</code>的成功商业化使其已经赢得先机，广大的用户基础以及多次功能迭代，无论是在可视化呈现形式还是报表的质量上都可圈可点。</p>
<p>微软帝国必须亮出必杀技了（为什么没有盖茨的软件在什么事情上都落后一拍，移动操作系统、搜索、智能终端），前期在<code>office2013</code>版就已推出<code>PowerQuery</code>、<code>PowerPivot</code>、<code>PowerView</code>、<code>PowerMap</code>等四款高质量插件。</p>
<p>在最新的Excel2016版中更是将其封装成内置程序（这样就不用自己配置各种环境啦）,同时将四件套整合，建立了<code>PowerBI</code>的在线平台和桌面端工具<code>PowerBI Desktop</code>。</p>
<p>虽然<code>PowerBI</code>的可视化图表类型和质量（受制于开发周期和市场经验）还不够完善，但是免费呀（<code>Tableau</code>据说几千刀呢）……这一条就够啦……</p>
<p>当然PowerBI自出生始就含着金汤勺，地图库是对接的BingMap,依靠PowerQuery的支持具备强大的数据源获取能力、依靠PowerPivot的支持又增添了功能强大的数据建模处理能力，PowerView与PowerMap结合基本上可以解决大部分的可视化形式。</p>
<p>除此之外，PowerBI的在线社区允许广大开发者贡献高质量的、令人眼花缭乱的新型可视化对象。（你以为PowerBI只有内置的那几款图表对象吗，去他的社区看一看吧，里面能淘到很多好东西）。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image1.png" alt=""></p>
<p><a href="https://app.powerbi.com/visuals/" target="_blank" rel="external">第三方可视化库网址：</a></p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image2.png" alt=""></p>
<p>这些可视化视觉对象在社区中被划分为两类：</p>
<ul>
<li>Custom visuals</li>
<li>R-powered visuals</li>
</ul>
<p>今天要跟大家分享的内容仅包含内置视觉对象中的R脚本和在线社区的R风格视觉对象。</p>
<p>下面是干货~</p>
<h3 id="使用体验："><a href="#使用体验：" class="headerlink" title="使用体验："></a>使用体验：</h3><p>最近试用了PowerBI的R语言脚本对象功能，虽然用着很蹩脚，但是作为微软商务智能系统开始尝试对接主流统计学编程语言的开始，这一步还是很有意义的。</p>
<p>接下来就针对我所经历的使用体验跟大家分享一下（其实还是吐槽居多）：</p>
<p>PowerBI中支持的R相关的图表有两类：</p>
<ul>
<li>一类是需要在R中自建脚本代码执行，插入R图形对象来显示输出结果的形式。</li>
<li>另一类是PowerBI线上社区以及官方平台引用并借鉴优秀的R语言可视化包所封装的PowerBI视觉对象。</li>
</ul>
<p>第一种需要大家有R基础，会书写图形代码。导入数据集后，输入并运行R代码即可在PowerBI页面生成R语言风格的可视化图表。（当然既然是运行的R代码，前提你PC上肯定得事先安装好R的Gui程序，如果有Rstudio的话,PowerBI也是支持调用的。）</p>
<p>这种方式基本相当于把PowerBI作为R的第三方IDE了，不过现在称它为R的第三方IDE确实为时过早，因为……</p>
<p>它的代码运行效率和操作体验简直不能再烂，别说RStudio,就连R的官方Gui界面都要比它好用好几倍……</p>
<ul>
<li>代码时效速度超级慢；</li>
<li>需要事先导入数据集；</li>
<li>只能在数据对象中显示图形对象而无法显示文本信息；</li>
</ul>
<h3 id="第一类R语言视觉对象案例演示："><a href="#第一类R语言视觉对象案例演示：" class="headerlink" title="第一类R语言视觉对象案例演示："></a>第一类R语言视觉对象案例演示：</h3><p>接下来我运行几段程序作为案例演示：</p>
<p>自建R脚本需要在开始——获取数据——插入RScript对象：</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image5.png" alt=""></p>
<p>在弹出的执行R脚本输入框中以R代码的形式获取数据：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data(mtcars)</div></pre></td></tr></table></figure>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image6.png" alt=""></p>
<p>待连接成功后，导入数据集：</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image7.png" alt=""></p>
<p>数据模型加载完成后，在PowerBI右侧的字段列表中会列出数据集的所有可用字段，在左侧左上角表格栏目可以展示并预览整个数据观测值。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image9.png" alt=""><br><img src="http://orgmkkktc.bkt.clouddn.com/image8.png" alt=""></p>
<p>数据集导入之后，在可视化图表对象中选择R脚本，并插入，同时将右侧字段列表中需要用到的字段拖入值区域。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image4.png" alt=""></p>
<p>你发会发现，插入R脚本对象后，执行的所有鼠标操作在R脚本编辑器中都被记录为R代码（很类似Excel中的录制宏啊有木有~）。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image10.png" alt=""></p>
<p>现在你可以在R脚本编辑器中自由的编写并执行代码了。（代码与R中的一样，写完一句代码，选中点击编辑器的运营按钮）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(RColorBrewer)</div><div class="line"><span class="keyword">library</span>(ggthemes)</div><div class="line">ggplot(mtcars,aes(qsec,disp,colour=factor(cyl)))+geom_point()+theme_economist()+scale_colour_economist()+guides(colour=guide_legend(title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image11.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggplot(mtcars,aes(qsec,disp,size=mpg,colour=factor(cyl)))+geom_point()+scale_size_area()+theme_economist()+scale_colour_economist()+guides(colour=guide_legend(title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image12.png" alt=""></p>
<p>接下来我使用diamonds数据集（来自ggplot2包）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(ggthemes)</div><div class="line">ggplot(diamonds,aes(depth,fill=color))+geom_histogram()+theme_economist()+scale_fill_economist()+guides(fill=guide_legend(title=<span class="literal">NULL</span>))+scale_x_discrete(limits=c(<span class="number">50</span>,<span class="number">70</span>))</div></pre></td></tr></table></figure></p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image13.png" alt=""></p>
<p>虽然以上图表都很完美的输出了结果，但是过程还是很艰辛的，PowerBI无法像在R里面调用数据集那么方便，每次想换一个数据，都要重新建立一个RScript对象。</p>
<h3 id="第二类R语言视觉对象案例演示："><a href="#第二类R语言视觉对象案例演示：" class="headerlink" title="第二类R语言视觉对象案例演示："></a>第二类R语言视觉对象案例演示：</h3><p>下面跟大家介绍关于PowerBI的的第二类R视觉对象，也是个人比较推荐的一类。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image3.png" alt=""></p>
<p>因为这些视觉对象是经过开发者努力改造过了，基本上不需要你写代码就可以输出的精美图表（因为是后台调用的R程序，所以依然需要你事前安装R软件）。</p>
<p>这一类图表对象你可以在PowerBI的线上开发者社区下载到图表插件和案例demo。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image18.png" alt=""></p>
<p>每一个R图表对象都提供插件下载和Sample独享可供参考。</p>
<p>下载完事儿之后，在可视化菜单中导入视觉对象。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image15.png" alt=""></p>
<p>插入刚才导入的相关性可视化图表对象，并将要呈现的相关性的字段拖入Values字段框中。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image16.png" alt=""></p>
<p>之后你会发现图表对象会自动相关热力矩阵图。（颜色深浅代表相关性大小，正为蓝，负为红）</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image17.png" alt=""></p>
<p>该图表对象调用的是R中的corrplot函数。我们在RStudio中使用该函数生成相似的案例图。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(corrplot)</div><div class="line">data(mtcars)</div><div class="line">corr &lt;- cor(mtcars[,c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)])</div><div class="line">corrplot(corr)</div></pre></td></tr></table></figure>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image18.png" alt=""></p>
<p>看吧是不是很像呢~</p>
<p>和相关性矩阵图一样的R图表视觉对象在社区中一共有6个（包含Correlation plot）。</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image19.png" alt=""></p>
<p>以上六个图形视觉对象都是包含着统计算法和统计模型的视觉可视化对象，经过设计师的精心设计，复杂的统计算法模型呈现出精美的视觉图表图表对象，决策者可以在不用深入了解模型和算法原理的基础上，很直观的领会模型所表达的决策信息。这就是数据可视化的魅力所在。（当然如果能具备这些模型的理论基础的话，用起来就更加的得心应手啦）</p>
<p>小魔方已经将微软第三方应用平台的所有视觉对象插件打包整理（包含R对象的几款插件），共享在魔方学院的QQ群文件里啦，想要体验的小伙伴儿赶快去下载吧~</p>
<p><img src="http://orgmkkktc.bkt.clouddn.com/image20.png" alt=""></p>
<hr>
<p><strong>联系方式：</strong><br>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508</p>
<p><strong>个人简介：</strong><br><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong><br><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PowerBI作为微软系最新的商务智能办公系统，自去年发布以来，一直都备受瞩目。&lt;/p&gt;
&lt;p&gt;他的更新频次相当之高，功能更新迭代非常迅速。&lt;/p&gt;
&lt;p&gt;大概对可视化领域稍有涉猎的朋友们，都明白其中缘由，大数据与云计算的趋势席卷全球，海量数据处理成为了限制各行业发展的掣肘。而受制于编程工具的门槛，大部分数据处理业务人员，可能要严重依赖Excel以及其他无需编程的可视化自助操作软件。&lt;/p&gt;
    
    </summary>
    
      <category term="PowerBI" scheme="http://www.raindu.com/categories/PowerBI/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="在线地图" scheme="http://www.raindu.com/tags/%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="PowerBI" scheme="http://www.raindu.com/tags/PowerBI/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——多边形与数据地图填充</title>
    <link href="http://www.raindu.com/2017/06/12/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%A4%9A%E8%BE%B9%E5%BD%A2%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E5%A1%AB%E5%85%85/"/>
    <id>http://www.raindu.com/2017/06/12/R语言可视化——多边形与数据地图填充/</id>
    <published>2017-06-12T01:11:36.000Z</published>
    <updated>2017-06-16T14:17:25.769Z</updated>
    
    <content type="html"><![CDATA[<p>ggplot函数中有一类特殊的图表类型叫做多边形，很难用传统的视角来定义它属于哪一类图表，因为它能够呈现信息多种多样。</p>
<p>特别是在做某些比较高阶的图表——地图时，这种多边形函数便能够大显神通。</p>
<a id="more"></a>
<p>之前本公众号所推送的所有涉及地图图表绘制所使用的技巧，几乎全部都依赖多边形函数的支持。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(plyr)</div><div class="line"><span class="keyword">library</span>(<span class="string">"maptools"</span>)</div></pre></td></tr></table></figure></p>
<p>这里以之前推送过的全球地图为例：</p>
<h3 id="传统做法（shp形状）"><a href="#传统做法（shp形状）" class="headerlink" title="传统做法（shp形状）"></a>传统做法（shp形状）</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">world_map &lt;-readShapePoly(<span class="string">"c:/rstudy/wold_map/World_region.shp"</span>)</div></pre></td></tr></table></figure>
<p>使用路径图进行区域轮廓描边：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(world_map,aes(x=long,y=lat,group=group)) +</div><div class="line">geom_path()</div></pre></td></tr></table></figure></p>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image1.png" alt=""></p>
<p>更改路径线为白色，清除掉背景和网格线以及坐标轴：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ggplot(world_map,aes(x=long,y=lat,group=group)) +</div><div class="line">geom_path(colour=<span class="string">"steelblue"</span>)+ theme(               </div><div class="line">          panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image2.png" alt=""></p>
<p>使用多边形进行描边并填充：（在多边形中是可以进行线条与形状分别填色的）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ggplot(world_map,aes(x=long,y=lat,group=group)) +geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"grey"</span>) + theme( panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image3.png" alt=""></p>
<p>这就是我们之前所制作的填色地图的主体代码语句，数据集是从shp文件导入，可以看出，其实只需要三列字段信息，就可以画出一幅地图来：经纬度（二维坐标信息，也可以看作是一组代表X、Y轴的散点），另外的一列变量group其实是一个分类变量，将同一个单位区域轮廓（一个国家或者地区、岛屿等）用一组相同的编号表示。</p>
<p>如果再加上一列连续数值变量，可以将其指定为fill渐变填充的参考指标，那么最终完成的图表就是一幅按照不同地区指标大小对应渐变填色地图。</p>
<h3 id="内置地图素材包："><a href="#内置地图素材包：" class="headerlink" title="内置地图素材包："></a>内置地图素材包：</h3><p>其实这种不带任何实质数据信息的地图，很多R包中都有提供：（这里以maps包为例）<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(maps)</div><div class="line">states&lt;-map_data(<span class="string">"state"</span>)</div><div class="line">ggplot(states,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+ theme(panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image4.png" alt=""></p>
<p>map包是一个专门用来做地图的加载包，里面存有几个可以用的地图数据包：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">states&lt;-map_data(<span class="string">"world"</span>) <span class="comment">#全球地图</span></div><div class="line">ggplot(world,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+ theme(panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image5.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">france&lt;-map_data(<span class="string">"france"</span>) <span class="comment">#法国地图</span></div><div class="line">ggplot(france,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+ theme(panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image6.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">county&lt;-map_data(<span class="string">"county"</span>) <span class="comment">#美国郡级</span></div><div class="line">ggplot(county,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+ theme(panel.grid = element_blank(),</div><div class="line">          panel.background = element_blank(),</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image7.png" alt=""></p>
<h3 id="添加地图投影："><a href="#添加地图投影：" class="headerlink" title="添加地图投影："></a>添加地图投影：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">france&lt;-map_data(<span class="string">"france"</span>) <span class="comment">#法国地图</span></div><div class="line">ggplot(france,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+coord_map(<span class="string">"polyconic"</span>)+theme(</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image8.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">county&lt;-map_data(<span class="string">"county"</span>) <span class="comment">#美国郡级</span></div><div class="line">ggplot(county,aes(long,lat,group=group))+geom_polygon(fill=<span class="string">"white"</span>,colour=<span class="string">"steelblue"</span>)+coord_map(<span class="string">"polyconic"</span>)+theme(</div><div class="line">          axis.text = element_blank(),</div><div class="line">          axis.ticks = element_blank(),</div><div class="line">          axis.title = element_blank())</div></pre></td></tr></table></figure>
<p><img src="http://oreu76dnk.bkt.clouddn.com/image9.png" alt=""></p>
<p>地图图表作为ggplot函数中一大类比较高阶的图表，可以做出很多让人眼花缭乱、令人尖叫的作品来，感兴趣的小伙伴儿赶快学起来。</p>
<hr>
<p><strong>联系方式：</strong></p>
<p>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508  </p>
<p><strong>个人简介：</strong></p>
<p><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 <br><br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ggplot函数中有一类特殊的图表类型叫做多边形，很难用传统的视角来定义它属于哪一类图表，因为它能够呈现信息多种多样。&lt;/p&gt;
&lt;p&gt;特别是在做某些比较高阶的图表——地图时，这种多边形函数便能够大显神通。&lt;/p&gt;
    
    </summary>
    
      <category term="数据可视化" scheme="http://www.raindu.com/categories/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="地理信息可视化" scheme="http://www.raindu.com/tags/%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="多边形填充" scheme="http://www.raindu.com/tags/%E5%A4%9A%E8%BE%B9%E5%BD%A2%E5%A1%AB%E5%85%85/"/>
    
  </entry>
  
  <entry>
    <title>R语言颜色综合运用与色彩方案共享</title>
    <link href="http://www.raindu.com/2017/06/11/R%E8%AF%AD%E8%A8%80%E9%A2%9C%E8%89%B2%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%E4%B8%8E%E8%89%B2%E5%BD%A9%E6%96%B9%E6%A1%88%E5%85%B1%E4%BA%AB/"/>
    <id>http://www.raindu.com/2017/06/11/R语言颜色综合运用与色彩方案共享/</id>
    <published>2017-06-11T13:26:08.000Z</published>
    <updated>2017-06-16T14:17:25.827Z</updated>
    
    <content type="html"><![CDATA[<p>今天这篇主要讲解R语言颜色综合运用，主要跟大家介绍如何提取那些专业色彩包中的颜色搭配用于在基础绘图系统和高级绘图系统中共享。</p>
<a id="more"></a>
<p>其实无论是R语言的预设配色系统、自定义颜色表还是哪些专属配色包，我们所使用（或者R语言识别的）的仅仅就是一组字符向量所代表的色值而已，并不神秘。</p>
<p>通过scales中的色彩获取函数，我们可以将专属配色主题（RColorBrewer、ggthemes）中的配色主题提取出来，以函数的形式传递给基础绘图系统（plot）以及ggplot绘图系统。</p>
<h3 id="主要内容："><a href="#主要内容：" class="headerlink" title="主要内容："></a>主要内容：</h3><ul>
<li>RColorBrewer部分：</li>
<li>ggthemes部分：</li>
<li>scales：（brewer.pal运用：）</li>
</ul>
<h3 id="RColorBrewer部分"><a href="#RColorBrewer部分" class="headerlink" title="RColorBrewer部分"></a>RColorBrewer部分</h3><p>关于RColorBrewer包之前在写ggplot函数系统的时候已经有所涉猎，其中专门讲解过它的官方配色网站：<a href="http://colorbrewer2.org/#" target="_blank" rel="external">colorbrewer</a></p>
<p>这是一个非常神奇的网站，RColorBrewer包中的配色方案全部来源于此，而且网站上允许自定义色彩序列和类型，衍生出来的颜色要比该包中的配色资源多出很多倍。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(RColorBrewer)</div><div class="line">display.brewer.pal(n, name)</div><div class="line">display.brewer.all(type=<span class="string">"all"</span>)</div></pre></td></tr></table></figure>
<p>ColorBrewer设计团队将配色方案分为三种：</p>
<ul>
<li>seq:连续渐变色</li>
<li>div:双向渐变色</li>
<li>qual:分类色</li>
</ul>
<p>通过display函数可以查看不同类型的色板：</p>
<p>颜色查看：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">display.brewer.all(type = <span class="string">"all"</span>)  <span class="comment">#查看所有色板</span></div><div class="line">display.brewer.all(type = <span class="string">"seq"</span>)  <span class="comment">#查看单色渐变色板</span></div><div class="line">display.brewer.all(type = <span class="string">"div"</span>)  <span class="comment">#查看双色渐变色板</span></div><div class="line">display.brewer.all(type = <span class="string">"qual"</span>) <span class="comment">#查看离散（分类）色板</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image4.png" alt=""><br><img src="http://ordxl0ss6.bkt.clouddn.com/image5.png" alt=""><br><img src="http://ordxl0ss6.bkt.clouddn.com/image6.png" alt=""><br><img src="http://ordxl0ss6.bkt.clouddn.com/image7.png" alt=""></p>
<p>以上通过display四个函数成功显示了全部色板、单色渐变色板、双色渐变色板、离散（分类）色板</p>
<p>当然你也可以通过display.brewer.pal(n, name)函数显示指定名称的颜色主题：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display.brewer.pal(<span class="number">9</span>, <span class="string">"BuGn"</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image8.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">par(mfrow=c(<span class="number">1</span>,<span class="number">5</span>),mar=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),xaxs=<span class="string">"i"</span>, yaxs=<span class="string">"i"</span>)</div><div class="line">mycolors&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"BuGn"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">9</span>),col=mycolors,border=mycolors,axes=<span class="literal">FALSE</span>, horiz=<span class="literal">T</span>,main=<span class="string">"MyColors of BuGn "</span>)</div><div class="line">mycolors&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"OrRd"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">9</span>),col=mycolors,border=mycolors,axes=<span class="literal">FALSE</span>, horiz=<span class="literal">T</span>,main=<span class="string">"MyColors of OrRd"</span>)</div><div class="line">mycolors&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"YlGn"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">9</span>),col=mycolors,border=mycolors,axes=<span class="literal">FALSE</span>, horiz=<span class="literal">T</span>,main=<span class="string">"MyColors of YlGn"</span>)</div><div class="line">mycolors&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"Oranges"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">9</span>),col=mycolors,border=mycolors,axes=<span class="literal">FALSE</span>, horiz=<span class="literal">T</span>,main=<span class="string">"MyColors of Oranges"</span>)</div><div class="line">mycolors&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"Blues"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">9</span>),col=mycolors,border=mycolors,axes=<span class="literal">FALSE</span>, horiz=<span class="literal">T</span>,main=<span class="string">"MyColors of Blues"</span>)</div><div class="line">dev.off()</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image9.png" alt=""></p>
<p>大家已经看到了，通过brewer.pal(n, “name”)函数，可以很轻松的提取出你想要的配色主题。</p>
<p>如果你想要某个配色主题的其中几个色值，可使用如下方式提取：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display.brewer.pal(<span class="number">6</span>, <span class="string">"BuGn"</span>)<span class="comment">#按顺序提取前六个</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image1.png" alt=""></p>
<p>如果想要提取某一组色彩主题不连续的颜色，可以使用文本函数：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(scales)</div><div class="line">a&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"BuGn"</span>)</div><div class="line">show_col(a[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)],labels=<span class="literal">F</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image10.png" alt=""></p>
<p>通过向量合并，你还可以自己从色彩包中自定义色彩方案。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b1&lt;-brewer.pal(<span class="number">9</span>, <span class="string">"BuGn"</span>);b2&lt;-brewer.pal(<span class="number">9</span>,<span class="string">"Blues"</span>)</div><div class="line">c&lt;-c(b1[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)],b2[c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)])</div><div class="line">show_col(c,labels=<span class="literal">F</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image11.png" alt=""></p>
<p>其实都是些很简单的文本函数组合，毕竟色彩方案在软件中也就是一组字符向量而已。</p>
<p>以上这些色彩方案可以很容易的应用到基础绘图系统和ggplot绘图系统中。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c&lt;-c(<span class="number">50</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">70</span>,<span class="number">90</span>,<span class="number">40</span>)</div><div class="line">names(c)&lt;-LETTERS[<span class="number">1</span>:<span class="number">6</span>]</div><div class="line">mycolor&lt;-brewer.pal(<span class="number">9</span>,<span class="string">"Greens"</span>)</div><div class="line">pie(sort(c,decreasing=<span class="literal">T</span>),labels=names(c),col=mycolor[c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>)],clockwise=<span class="literal">T</span>,radius=<span class="number">1</span>,border=<span class="literal">F</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image12.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggplot2)</div><div class="line"><span class="keyword">library</span>(plyr)</div><div class="line">mydata&lt;-data.frame(c)</div><div class="line">ggplot(data=mydata,aes(x=factor(<span class="number">1</span>),y=c,fill=factor(c),order=desc(c)))+</div><div class="line">    geom_bar(stat=<span class="string">"identity"</span>,width=<span class="number">1</span>,col=<span class="string">"white"</span>)+</div><div class="line">    coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">    theme(panel.grid = element_blank(),</div><div class="line">    panel.background = element_blank(),</div><div class="line">    axis.text = element_blank(),</div><div class="line">    axis.ticks = element_blank(),</div><div class="line">    axis.title = element_blank())+</div><div class="line">    scale_fill_brewer(palette=<span class="string">"Greens"</span>,labels=c(<span class="string">"E"</span>, <span class="string">"D"</span>, <span class="string">"A"</span>,<span class="string">"C"</span>,<span class="string">"F"</span>,<span class="string">"B"</span>))+</div><div class="line">    guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image13.png" alt=""></p>
<h3 id="ggthemes部分："><a href="#ggthemes部分：" class="headerlink" title="ggthemes部分："></a>ggthemes部分：</h3><p>接下来讲解ggthemes部分，其实ggthemes包原本是转为ggplot2包开发的辅助包（前面加的前缀——gg就可以看出来，这种包还有很多），里面提供了大量高质量的主题、颜色方案。其中就有我们所熟知的economist主题方案以及wsj方案，还有诸如stata、excel、tableau、solarized、tufte等主题方案。</p>
<p>ggthemes包中的色彩方案都是打包好，命名过的，所以我们引用的时候，只需赋值即可。</p>
<p>这里以economist和WSJ为例：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggthemes)</div><div class="line">m1&lt;-economist_pal()(<span class="number">6</span>)</div><div class="line">show_col(m1)</div></pre></td></tr></table></figure></p>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image14.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mycolor&lt;-m1&lt;-economist_pal()(<span class="number">5</span>)</div><div class="line">pie(sort(c,decreasing=<span class="literal">T</span>),labels=names(<span class="number">6</span>),col=mycolor,border=<span class="literal">F</span>,clockwise=<span class="literal">T</span>,init.angle=<span class="number">90</span>,radius=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image15.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ggplot(data=mydata,aes(x=factor(<span class="number">1</span>),y=c,fill=factor(c),order=desc(c)))+</div><div class="line">    geom_bar(stat=<span class="string">"identity"</span>,width=<span class="number">1</span>,col=<span class="string">"white"</span>)+</div><div class="line">    coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">    theme(panel.grid = element_blank(),</div><div class="line">    panel.background = element_blank(),</div><div class="line">    axis.text = element_blank(),</div><div class="line">    axis.ticks = element_blank(),</div><div class="line">    axis.title = element_blank())+</div><div class="line">    scale_fill_economist(labels=c(<span class="string">"E"</span>, <span class="string">"D"</span>, <span class="string">"A"</span>,<span class="string">"C"</span>,<span class="string">"F"</span>,<span class="string">"B"</span>))+</div><div class="line">    guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image16.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">m2&lt;-wsj_pal()(<span class="number">6</span>)</div><div class="line">show_col(m2)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image17.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mycolor&lt;-m1&lt;-wsj_pal()(<span class="number">6</span>)</div><div class="line">pie(sort(c,decreasing=<span class="literal">T</span>),labels=names(c),col=mycolor,border=<span class="literal">F</span>,clockwise=<span class="literal">T</span>,init.angle=<span class="number">90</span>,radius=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image18.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ggplot(data=mydata,aes(x=factor(<span class="number">1</span>),y=c,fill=factor(c),order=desc(c)))+</div><div class="line">    geom_bar(stat=<span class="string">"identity"</span>,width=<span class="number">1</span>,col=<span class="string">"white"</span>)+</div><div class="line">    coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">    theme(panel.grid = element_blank(),</div><div class="line">    panel.background = element_blank(),</div><div class="line">    axis.text = element_blank(),</div><div class="line">    axis.ticks = element_blank(),</div><div class="line">    axis.title = element_blank())+</div><div class="line">    scale_fill_wsj(labels=names(c))+</div><div class="line">    guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image19.png" alt=""></p>
<p>其实关于economist和wsj的配色主题远不止这些元素，里面规定了详细的序列用色标准、线条用色标准、形状标准和背景色参考方案，这些信息，你可以通过使用ggthemes_data函数进行查看：</p>
<p><strong>WSJ背景色</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggthemes_data$wsj$bg         </div><div class="line">     gray     green      blue     brown </div><div class="line"><span class="string">"#efefef"</span> <span class="string">"#e9f3ea"</span> <span class="string">"#d4dee7"</span> <span class="string">"#f8f2e4"</span></div></pre></td></tr></table></figure></p>
<p><strong>WSJ主题色</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ggthemes_data$wsj$palettes   <span class="comment">#主题色</span></div><div class="line">$rgby</div><div class="line">   yellow       red      blue     green </div><div class="line"><span class="string">"#d3ba68"</span> <span class="string">"#d5695d"</span> <span class="string">"#5d8ca8"</span> <span class="string">"#65a479"</span> </div><div class="line"></div><div class="line">$red_green</div><div class="line">    green       red </div><div class="line"><span class="string">"#088158"</span> <span class="string">"#ba2f2a"</span> </div><div class="line"></div><div class="line">$black_green</div><div class="line">    black      gray   ltgreen     green </div><div class="line">  <span class="string">"#000000"</span> <span class="string">"#595959"</span> <span class="string">"#59a77f"</span> <span class="string">"#008856"</span> </div><div class="line"></div><div class="line">$dem_rep</div><div class="line">     blue       red      gray </div><div class="line">   <span class="string">"#006a8e"</span> <span class="string">"#b1283a"</span> <span class="string">"#a8a6a7"</span> </div><div class="line"></div><div class="line">$colors6</div><div class="line">      red      blue      gold     green    orange     black </div><div class="line">   <span class="string">"#c72e29"</span> <span class="string">"#016392"</span> <span class="string">"#be9c2e"</span> <span class="string">"#098154"</span> <span class="string">"#fb832d"</span> <span class="string">"#000000"</span></div></pre></td></tr></table></figure></p>
<p><strong>economist背景色：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggthemes_data$economist$bg</div></pre></td></tr></table></figure></p>
<p><strong>economist主题色：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ggthemes_data$economist$fg</div></pre></td></tr></table></figure></p>
<p>也可以使用scales包中的show_col函数进行颜色的图形化输出：<br>显示主题颜色：</p>
<p><strong>《华尔街日报》</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">show_col(ggthemes_data$wsj$bg)                      <span class="comment">#背景色</span></div><div class="line">show_col(ggthemes_data$wsj$palettes$rgby)           <span class="comment">#rgby</span></div><div class="line">show_col(ggthemes_data$wsj$palettes$red_green)      <span class="comment">#red_green</span></div><div class="line">show_col(ggthemes_data$wsj$palettes$black_green)    <span class="comment">#black_green</span></div><div class="line">show_col(ggthemes_data$wsj$palettes$dem_rep)        <span class="comment">#dem_rep</span></div><div class="line">show_col(ggthemes_data$wsj$palettes$colors6)        <span class="comment">#colors6</span></div></pre></td></tr></table></figure></p>
<p><strong>《经济学人》</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show_col(ggthemes_data$economist$bg)                <span class="comment">#背景色</span></div><div class="line">show_col(ggthemes_data$economist$fg)                <span class="comment">#主题色</span></div><div class="line">show_col(ggthemes_data$economist$stata)             <span class="comment">#基于stata的配色方案</span></div></pre></td></tr></table></figure></p>
<p>以上ggthemes包中的所有颜色，你都可以通过names_pal()(n)的格式进行提取，然后使用文本函数进行抽取、转化、合并，自由搭配出属于自己的专属配色方案</p>
<h3 id="scales包的brewer-pal函数："><a href="#scales包的brewer-pal函数：" class="headerlink" title="scales包的brewer_pal函数："></a>scales包的brewer_pal函数：</h3><p>接下来的时间我会将全部精力放在brewer_pal函数上，告诉你为什么，因为这个函数是scales专门为图形标度所设置的颜色设置函数，而以上我们所述的RColorBrewer里面的brewer.pal以及ggthemes包中的names_pal函数，是用于提取自己的配色方案，适用范围较小。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(<span class="string">"scales"</span>)</div><div class="line">brewer_pal(type = <span class="string">"seq"</span>, palette = <span class="number">1</span>, direction = <span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>该函数直接对接RColorBrewer包中的配色主题，但是增加了一些输出参数，可以对输出的主题进行更加灵活的自定义操作。</p>
<p>type设置颜色种类，palette设置色板（可以是字符名称，也可以是编号），direction设置颜色输出顺序（默认为原始顺序，-1代表倒序，对于连续渐变类型的色板比较重要）。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show_col(brewer_pal()(<span class="number">10</span>))</div><div class="line">show_col(brewer_pal(<span class="string">"div"</span>)(<span class="number">5</span>))</div><div class="line">show_col(brewer_pal(palette = <span class="string">"Greens"</span>)(<span class="number">5</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image20.png" alt=""><br><img src="http://ordxl0ss6.bkt.clouddn.com/image21.png" alt=""><br><img src="http://ordxl0ss6.bkt.clouddn.com/image22.png" alt=""></p>
<p>可以看出来，brewer_pal()函数允许通过色板类型、色彩数据、主题类型进行筛选输出。</p>
<p>我们可以通过brewer_pal函数将色彩信息传递给指定向量，或者直接将brewer_pal指定给col或者fill等图表中的标度参数。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">par(mfrow=c(<span class="number">1</span>,<span class="number">2</span>),mar=c(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>),xaxs=<span class="string">"i"</span>, yaxs=<span class="string">"i"</span>)</div><div class="line">pie(rep(<span class="number">1</span>,times=<span class="number">6</span>),labels=<span class="string">""</span>,col=brewer_pal(palette=<span class="string">"Greens"</span>)(<span class="number">6</span>),border=<span class="literal">F</span>,radius=<span class="number">1</span>,clockwise=<span class="literal">T</span>)</div><div class="line">pie(rep(<span class="number">1</span>,times=<span class="number">6</span>),labels=<span class="string">""</span>,col=brewer_pal(palette=<span class="string">"Greens"</span>,direction =-<span class="number">1</span>)(<span class="number">6</span>),border=<span class="literal">F</span>,radius=<span class="number">1</span>,clockwise=<span class="literal">T</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image3.png" alt=""></p>
<p>因为ggplot中有专用于RColorBrewer的色彩主题函数scale_fill(colour)_brewer(），用于对接RColorBrewer中的色彩库，所以我们想要在ggplot图表系统中使用RColorBrewer中的配色主题，不必使用brewer_pal进行提取。</p>
<p>并且，brewer_pal函数内的参数，在scale_fill(colour)_brewer(）函数内也可以使用，对色彩方案进行筛选、抽取。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(Rmisc)</div><div class="line"><span class="keyword">library</span>(lattice)</div><div class="line">p1&lt;- ggplot(data=mydata,aes(x=factor(<span class="number">1</span>),y=c,fill=factor(c),order=desc(c)))+</div><div class="line">    geom_bar(stat=<span class="string">"identity"</span>,width=<span class="number">1</span>,col=<span class="string">"white"</span>)+</div><div class="line">    coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">    theme(panel.grid = element_blank(),</div><div class="line">    panel.background = element_blank(),</div><div class="line">    axis.text = element_blank(),</div><div class="line">    axis.ticks = element_blank(),</div><div class="line">    axis.title = element_blank(),</div><div class="line">    legend.position=<span class="string">"top"</span>)+</div><div class="line">    scale_fill_brewer(palette=<span class="string">"Greens"</span>,labels=names(c))+</div><div class="line">    guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div><div class="line">p2&lt;- ggplot(data=mydata,aes(x=factor(<span class="number">1</span>),y=c,fill=factor(c),order=desc(c)))+</div><div class="line">    geom_bar(stat=<span class="string">"identity"</span>,width=<span class="number">1</span>,col=<span class="string">"white"</span>)+</div><div class="line">    coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">    theme(panel.grid = element_blank(),</div><div class="line">    panel.background = element_blank(),</div><div class="line">    axis.text = element_blank(),</div><div class="line">    axis.ticks = element_blank(),</div><div class="line">    axis.title = element_blank(),</div><div class="line">    legend.position=<span class="string">"top"</span>)+</div><div class="line">    scale_fill_brewer(palette=<span class="string">"Greens"</span>,direction =-<span class="number">1</span>,labels=names(c))+</div><div class="line">    guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div><div class="line">multiplot(p1,p2,cols=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image25.png" alt=""></p>
<p>除此之外，还有一个叫ggtech的包，专门为ggplot2包提供科技公司风格配色方案。仔细看了包，没有取色函数，但是提供了全部的色值信息。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggtech)</div><div class="line">tech_key = list(airbnb = c(<span class="string">"#FF5A5F"</span>,<span class="string">"#FFB400"</span>, <span class="string">"#007A87"</span>, <span class="string">"#FFAA91"</span>, <span class="string">"#7B0051"</span>), </div><div class="line">facebook = c(<span class="string">"#3b5998"</span>,<span class="string">"#6d84b4"</span>, <span class="string">"#afbdd4"</span>, <span class="string">"#d8dfea"</span>), </div><div class="line">google = c(<span class="string">"#5380E4"</span>, <span class="string">"#E12A3C"</span>, <span class="string">"#FFBF03"</span>,<span class="string">"#00B723"</span>), </div><div class="line">etsy = c(<span class="string">"#F14000"</span>, <span class="string">"#67B6C3"</span>, <span class="string">"#F0DA47"</span>, <span class="string">"#EBEBE6"</span>, <span class="string">"#D0D0CB"</span>),</div><div class="line">twitter = c(<span class="string">"#55ACEE"</span>, <span class="string">"#292f33"</span>, <span class="string">"#8899a6"</span>, <span class="string">"#e1e8ed"</span>))</div><div class="line">show_col(tech_key$airbnb)</div><div class="line">show_col(tech_key$facebook)</div><div class="line">show_col(tech_key$google)</div><div class="line">show_col(tech_key$etsy)</div><div class="line">show_col(tech_key$twitter)</div></pre></td></tr></table></figure>
<p><img src="http://ordxl0ss6.bkt.clouddn.com/image26.png" alt=""></p>
<p>以上是今天所要讲的主要内容，因为关于这块儿的内容，非常丰富，我也只能涉略一点儿，想要了解更多的R语言配色知识，可以参考详细的官方文档。</p>
<hr>
<p><strong>联系方式：</strong></p>
<p>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508  </p>
<p><strong>个人简介：</strong></p>
<p><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 <br><br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天这篇主要讲解R语言颜色综合运用，主要跟大家介绍如何提取那些专业色彩包中的颜色搭配用于在基础绘图系统和高级绘图系统中共享。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>R预设配色系统及自定义色板</title>
    <link href="http://www.raindu.com/2017/06/11/R%E9%A2%84%E8%AE%BE%E9%85%8D%E8%89%B2%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%89%B2%E6%9D%BF/"/>
    <id>http://www.raindu.com/2017/06/11/R预设配色系统及自定义色板/</id>
    <published>2017-06-11T13:11:15.000Z</published>
    <updated>2017-06-16T14:17:25.835Z</updated>
    
    <content type="html"><![CDATA[<p>关于配色的话题，已经聊过很多次了，但是就像是之前说过的，对于图形可视化而言，配色决定着作品的“颜值”,谈再多次都不嫌多。</p>
<p>今天是R语言配色系统综合篇的上篇（当然是有下篇啦，下篇将会教你如何优雅的提取各种高大上配色主题，作为己用。经过几天的研究，小魔方已经发现了如果将各种高质量配色包中的主题色板通过函数的形式在高级绘图系统和低级绘图系统之间相互共享）。</p>
<a id="more"></a>
<p>今天的内容主要包含两部分：</p>
<ul>
<li>R预置色彩系统的色板</li>
<li>R语言自定义颜色调用</li>
</ul>
<p>其实在R语言的色彩系统中，有两大类颜色系统，一类是预设的调色盘，通过调色盘，你可以获取任意数量的色彩组合。</p>
<h3 id="R预置色彩系统的色板"><a href="#R预置色彩系统的色板" class="headerlink" title="R预置色彩系统的色板"></a>R预置色彩系统的色板</h3><p>R语言的预设调色板一共有五个：</p>
<ul>
<li>rainbow</li>
<li>heat.colors</li>
<li>terrain.colors</li>
<li>topo.colors</li>
<li>cm.colors</li>
</ul>
<p>这五个调色板就像是一个大染缸一样，排列着无数的色彩组合。取色也很简单，就是使用预设色盘名称+色彩数据即可：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rainbow(<span class="number">10</span>)</div><div class="line"></div><div class="line"> [<span class="number">1</span>] <span class="string">"#FF0000FF"</span> <span class="string">"#FF9900FF"</span> <span class="string">"#CCFF00FF"</span> <span class="string">"#33FF00FF"</span> <span class="string">"#00FF66FF"</span> <span class="string">"#00FFFFFF"</span></div><div class="line"> [<span class="number">7</span>] <span class="string">"#0066FFFF"</span> <span class="string">"#3300FFFF"</span> <span class="string">"#CC00FFFF"</span> <span class="string">"#FF0099FF"</span></div></pre></td></tr></table></figure>
<p>以上既是通过名称+数量的方式获取的一组10个颜色，同样我们可以通过scales包中show_col函数查看具体的颜色效果：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(scales)</div><div class="line">show_col(rainbow(<span class="number">10</span>),labels=<span class="literal">T</span>)<span class="comment">#labels控制是否显示HEX格式的色值信息.</span></div></pre></td></tr></table></figure>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image1.png" alt=""></p>
<p>接下来我用一个版面矩阵将五个色盘颜色全部显示出来：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">par(mfrow=c(<span class="number">1</span>,<span class="number">5</span>),mar=c(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">2</span>,<span class="number">0.5</span>),xaxs=<span class="string">"i"</span>,yaxs=<span class="string">"i"</span>)</div><div class="line">n&lt;-<span class="number">1000</span></div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=rainbow(n),border=rainbow(n),horiz=<span class="literal">T</span>,axes=<span class="literal">F</span>,main=<span class="string">"Rainbow Color"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=heat.colors(n),border=heat.colors(n),horiz=<span class="literal">T</span>,axes=<span class="literal">F</span>,main=<span class="string">"Heat.Colors"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=terrain.colors(n),border=terrain.colors(n),horiz=<span class="literal">T</span>,axes=<span class="literal">F</span>,main=<span class="string">"Terrain.Colors"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=topo.colors(n),border=topo.colors(n),horiz=<span class="literal">T</span>,axes=<span class="literal">F</span>,main=<span class="string">"Topo.Colors"</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=cm.colors(n),border=cm.colors(n),horiz=<span class="literal">T</span>,axes=<span class="literal">F</span>,main=<span class="string">"Cm.Colors"</span>)</div><div class="line">dev.off()<span class="comment">#关闭上次的绘图面板</span></div></pre></td></tr></table></figure>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image2.png" alt=""></p>
<p>运行以上代码之后，你会看到绘图面板上出现的五个色板色彩过渡效果，第一个rainbow是运用最为频繁的的色板，也是我们所熟知的彩虹七色，其余四个是截取rainbow色斑的某一段暖色系、冷色系或者单色做的渐变过渡。</p>
<p>五种颜色调用方法非常简单，名称+数量就可以。而且你也可以通过文本函数将不同色盘中截取的颜色相互混合使用。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">par(mfrow=c(<span class="number">2</span>,<span class="number">1</span>),mar=c(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">2</span>,<span class="number">0.5</span>),xaxs=<span class="string">"i"</span>,yaxs=<span class="string">"i"</span>)</div><div class="line">a&lt;-heat.colors(<span class="number">10</span>)</div><div class="line">b&lt;-topo.colors(<span class="number">10</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">10</span>),col=b,border=b,main=<span class="string">"Topo.Colors10"</span>,axes=<span class="literal">F</span>)</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">10</span>),col=a,border=a,main=<span class="string">"Heat.Colors10"</span>,axes=<span class="literal">F</span>)</div><div class="line">dev.off()</div></pre></td></tr></table></figure>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image3.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c&lt;-c(a[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>)],b[c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)])</div><div class="line">barplot(rep(<span class="number">1</span>,times=<span class="number">10</span>),col=c,border=c,axes=<span class="literal">F</span>,main=<span class="string">"topo&amp;heat 10"</span>);box()</div></pre></td></tr></table></figure>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image4.png" alt=""></p>
<p>以上通过将两个色板提取出来的颜色进行组合，创造出了新的色彩组合。</p>
<h3 id="R语言自定义颜色调用"><a href="#R语言自定义颜色调用" class="headerlink" title="R语言自定义颜色调用"></a>R语言自定义颜色调用</h3><p>接下来介绍R语言的第二大色彩系统，自定义颜色。</p>
<p>R语言系统中内置了657中带有自定义名称的颜色（就是我们平时所熟知的blue、red、grey等）。</p>
<p>通过colors()函数可以查看这657种颜色的色值及名称类别信息：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">head(colors(),<span class="number">10</span>)</div><div class="line"> [<span class="number">1</span>] <span class="string">"white"</span>         <span class="string">"aliceblue"</span>     <span class="string">"antiquewhite"</span>  <span class="string">"antiquewhite1"</span></div><div class="line"> [<span class="number">5</span>] <span class="string">"antiquewhite2"</span> <span class="string">"antiquewhite3"</span> <span class="string">"antiquewhite4"</span> <span class="string">"aquamarine"</span>   </div><div class="line"> [<span class="number">9</span>] <span class="string">"aquamarine1"</span>   <span class="string">"aquamarine2"</span></div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(plyr)</div><div class="line">count(cl)</div></pre></td></tr></table></figure>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image5.png" alt=""></p>
<p>count函数列出了所有657中颜色名称。</p>
<p>使用show_col函数可以查看所有657中颜色的图形显示效果</p>
<p>show_col(cl,labels=F)#因为颜色数量太多，使用labels=F参数略去颜色色值信息。<br><img src="http://ordw0vyu9.bkt.clouddn.com/image6.png" alt=""></p>
<p>使用colorRampPalette函数可以自由调用任何一种自定义颜色。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">colorRamp(colors, bias = <span class="number">1</span>, space = c(<span class="string">"rgb"</span>, <span class="string">"Lab"</span>), interpolate = c(<span class="string">"linear"</span>, <span class="string">"spline"</span>))</div><div class="line">colorRampPalette(colors, <span class="keyword">...</span>)</div></pre></td></tr></table></figure>
<p>color函数的介绍如上，具体的参数解释可以通过？colorRampPalette查看他的官方文档，这里我们直接取色。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">par(mfrow=c(<span class="number">1</span>,<span class="number">4</span>),mar=c(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">2</span>,<span class="number">0.5</span>),xaxs=<span class="string">"i"</span>, yaxs=<span class="string">"i"</span>)</div><div class="line">n &lt;- <span class="number">1000</span></div><div class="line">mycolors &lt;- colorRampPalette(c(<span class="string">"red"</span>, <span class="string">"green"</span>))(n)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=mycolors,border=mycolors,horiz=<span class="literal">T</span>,axes=<span class="literal">FALSE</span>)</div><div class="line">mycolors &lt;- colorRampPalette(c(<span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"orange"</span>))(n)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=mycolors,border=mycolors,horiz=<span class="literal">T</span>,axes=<span class="literal">FALSE</span>)</div><div class="line">mycolors &lt;- colorRampPalette(c( <span class="string">"white"</span>, <span class="string">"gold"</span>, <span class="string">"yellow"</span>, <span class="string">"brown"</span>), bias=<span class="number">1.2</span>)(n)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=mycolors,border=mycolors,horiz=<span class="literal">T</span>,axes=<span class="literal">FALSE</span>)</div><div class="line">mycolors &lt;- colorRampPalette(c(<span class="string">"red"</span>,<span class="string">"gold"</span>, <span class="string">"yellow"</span>, <span class="string">"grey"</span>,<span class="string">"orange"</span>), bias=<span class="number">1.2</span>)(n)</div><div class="line">barplot(rep(<span class="number">1</span>,times=n),col=mycolors,border=mycolors,horiz=<span class="literal">T</span>,axes=<span class="literal">FALSE</span>)</div><div class="line">dev.off()</div></pre></td></tr></table></figure></p>
<p><img src="http://ordw0vyu9.bkt.clouddn.com/image7.png" alt=""></p>
<p>除了这两大色彩系统系统之外，R语言也支持直接以色值（HEX）形式输入的颜色，只需使用c()函数生成色值组成的字符向量，R语言就可自动识别。</p>
<p>还有一些特殊用途的grey函数，hsv函数等等可以通过设定灰度或者色调、饱和度、亮度等等方式获取颜色使用，这些由于过于繁琐，这里就略去了，甘感兴趣的小盆友可以自己探索。</p>
<p>当然，这里还没有讲解到那些已经做得很成熟的主题配色包，比如ggthemes（专为ggplot2开发的主题包）、RColorbrewer（里面存放着大量高质量的配色方案）、以及ggtech（是一个科技主题的配色包，主要供ggplot函数调用）。</p>
<p>通过scales包中的brewer.col，我们可以提取出以上各包的配色主题，来用于我们的可视化图表中，不光是ggplot绘图系统，即便是在基础绘图系统（base::plot）中也是可以调用这些色彩方案的，好了这里先放个彩蛋，下期再见！</p>
<hr>
<p><strong>联系方式：</strong></p>
<p>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508  </p>
<p><strong>个人简介：</strong></p>
<p><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 <br><br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于配色的话题，已经聊过很多次了，但是就像是之前说过的，对于图形可视化而言，配色决定着作品的“颜值”,谈再多次都不嫌多。&lt;/p&gt;
&lt;p&gt;今天是R语言配色系统综合篇的上篇（当然是有下篇啦，下篇将会教你如何优雅的提取各种高大上配色主题，作为己用。经过几天的研究，小魔方已经发现了如果将各种高质量配色包中的主题色板通过函数的形式在高级绘图系统和低级绘图系统之间相互共享）。&lt;/p&gt;
    
    </summary>
    
      <category term="图表配色" scheme="http://www.raindu.com/categories/%E5%9B%BE%E8%A1%A8%E9%85%8D%E8%89%B2/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="配色" scheme="http://www.raindu.com/tags/%E9%85%8D%E8%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>R语言可视化——极坐标变换与衍生图表类型</title>
    <link href="http://www.raindu.com/2017/06/11/R%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%9E%81%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%A1%8D%E7%94%9F%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.raindu.com/2017/06/11/R语言可视化——极坐标变换与衍生图表类型/</id>
    <published>2017-06-11T01:20:45.000Z</published>
    <updated>2017-06-16T14:17:25.779Z</updated>
    
    <content type="html"><![CDATA[<p>今天这篇内容会比较杂乱一点，因为会讲到ggplot函数中的一大类通过极坐标支持才能呈现出来的图表效果。</p>
<p>ggplot作图背后的图表哲学，没有给予饼图（以及衍生出的圆环图、玫瑰图等放射状图表类型）存在的空间（主要是该包的开发者个人的审美观，比较反感次坐标轴以及功能类型雷同的重复性图层函数，所以它宁可开发出分面图层原理也不愿意增加次坐标轴，不愿意为原本柱形图可以表达的图表形式再单独开发一种功能雷同的饼图函数）。</p>
<p>但是巧的是，在常见的三种坐标形式中，极坐标转换可以非常轻松的将常见的柱形图（条形图）、堆积柱形图通过只一句极坐标函数就神奇的转化为饼图、玫瑰图、圆环图等（不知道是有意为之还是偶然的巧合）。</p>
<a id="more"></a>
<h3 id="饼图的实现原理："><a href="#饼图的实现原理：" class="headerlink" title="饼图的实现原理："></a>饼图的实现原理：</h3><p>饼图需要借助柱形图结合极坐标进行转化：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar()</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image1.png" alt=""></p>
<p>当使用一个因子变量作为横轴，使用分类变量进行填充时，该柱形图变成了单条堆积柱形图。</p>
<p>接下来我们通过以上函数添加极坐标（注意极坐标的设定是如何影响最终的图表形式的）</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar()+</div><div class="line">coord_polar(theta = <span class="string">"y"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image2.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar()+</div><div class="line">coord_polar(theta = <span class="string">"x"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image3.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar()+</div><div class="line">coord_polar()</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image4.png" alt=""></p>
<p>从做出的图表以及极坐标函数内的参数我们可以看出来，当参数指定为x时，最终柱形图的x轴会被指定为极坐标的x轴（圆周），而柱形图的y轴则会成为极坐标的y轴（半径）。当指定为y轴时，柱形图的y轴为成为极坐标的x轴（圆周），柱形图的x轴会成为极坐标的y轴（半径）。</p>
<p>同时极坐标状态下，饼图的半径是由柱形图（条形图）宽度决定的，以上图表中圆心有个空白，如果我们将柱形图柱形图宽度定义为1,则会成为正圆。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar(width=<span class="number">1</span>)+</div><div class="line">coord_polar(theta = <span class="string">"y"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image5.png" alt=""></p>
<h3 id="极坐标系下图表元素控制："><a href="#极坐标系下图表元素控制：" class="headerlink" title="极坐标系下图表元素控制："></a>极坐标系下图表元素控制：</h3><p>图中其他的元素控制方式与往常的柱形图做法一样：</p>
<p>去掉极坐标轴的轴刻度标签，去掉两个轴标题、更换配色：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=factor(<span class="number">1</span>),fill=cut))+</div><div class="line">geom_bar(width=<span class="number">1</span>)+</div><div class="line">coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    panel.grid = element_blank(),</div><div class="line">	panel.background = element_blank(),</div><div class="line">	axis.text = element_blank(),</div><div class="line">	axis.ticks = element_blank(),</div><div class="line">	axis.title = element_blank()</div><div class="line">	)+</div><div class="line">scale_fill_brewer(palette=<span class="string">"Blues"</span>)+</div><div class="line">guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image6.png" alt=""></p>
<p>当有多个序列时：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(cut))+</div><div class="line">geom_bar(width=<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image7.png" alt=""></p>
<p>通过极坐标转换可以实现圆环图、圆条图效果：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(cut))+</div><div class="line">geom_bar(width=<span class="number">1</span>,fill=<span class="string">"steelblue"</span>,colour=<span class="string">"white"</span>)+</div><div class="line">coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    panel.grid = element_blank(),</div><div class="line">	panel.background = element_blank(),</div><div class="line">	axis.text.x = element_blank(),</div><div class="line">	axis.title = element_blank())</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image8.png" alt=""></p>
<p>改变极坐标轴参数设置，可以模拟南丁格尔玫瑰图效果：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(cut))+</div><div class="line">geom_bar(width=<span class="number">0.95</span>,fill=<span class="string">"#3182BD"</span>)+</div><div class="line">coord_polar(theta = <span class="string">"x"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    panel.grid = element_blank(),</div><div class="line">	panel.background = element_blank(),</div><div class="line">	axis.text.y = element_blank(),</div><div class="line">	axis.ticks= element_blank(),</div><div class="line">	axis.title = element_blank())+</div><div class="line">ylim(c(-<span class="number">3000</span>,<span class="number">22500</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image9.png" alt=""></p>
<h3 id="极坐标系下多序列图表："><a href="#极坐标系下多序列图表：" class="headerlink" title="极坐标系下多序列图表："></a>极坐标系下多序列图表：</h3><p>当然如果你使用的原始柱形图数据中添加了分类序列（也就是堆积柱形图），按照上面的方式可以制作更加复杂的圆环图、堆叠玫瑰图</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=color,fill=cut))+</div><div class="line">geom_bar(width=<span class="number">0.95</span>,colour=<span class="string">"white"</span>)+</div><div class="line">coord_polar(theta = <span class="string">"y"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    panel.grid = element_blank(),</div><div class="line">	panel.background = element_blank(),</div><div class="line">	axis.text.x = element_blank(),</div><div class="line">	axis.title = element_blank())+</div><div class="line">scale_fill_brewer(palette=<span class="string">"Blues"</span>)+</div><div class="line">guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image10.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=color,fill=cut))+</div><div class="line">geom_bar(width=<span class="number">0.95</span>,colour=<span class="string">"white"</span>)+</div><div class="line">coord_polar(theta = <span class="string">"x"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    axis.text.y = element_blank(),</div><div class="line">	axis.title = element_blank())+</div><div class="line">scale_fill_brewer(palette=<span class="string">"Blues"</span>)+</div><div class="line">guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))+</div><div class="line">ylim(c(-<span class="number">2000</span>,<span class="number">12000</span>))+</div><div class="line">theme_bw()</div></pre></td></tr></table></figure>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image11.png" alt=""></p>
<p>尝试着用分面来解决多序列问题：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ggplot(diamonds,aes(x=color,fill=cut))+</div><div class="line">geom_bar(width=<span class="number">0.95</span>,colour=<span class="string">"white"</span>)+</div><div class="line">coord_polar(theta = <span class="string">"x"</span>,start=<span class="number">0</span>)+</div><div class="line">theme(</div><div class="line">    axis.text.y = element_blank(),</div><div class="line">	axis.title = element_blank())+</div><div class="line">scale_fill_brewer(palette=<span class="string">"Blues"</span>)+</div><div class="line">guides(fill=guide_legend(reverse=<span class="literal">TRUE</span>,title=<span class="literal">NULL</span>))+</div><div class="line">ylim(c(-<span class="number">2000</span>,<span class="number">6000</span>))+</div><div class="line">theme_bw()+</div><div class="line">facet_grid(.~cut)</div></pre></td></tr></table></figure></p>
<p><img src="http://ord0k5mhu.bkt.clouddn.com/image12.png" alt=""></p>
<hr>
<p><strong>联系方式：</strong></p>
<p>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508  </p>
<p><strong>个人简介：</strong></p>
<p><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 <br><br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天这篇内容会比较杂乱一点，因为会讲到ggplot函数中的一大类通过极坐标支持才能呈现出来的图表效果。&lt;/p&gt;
&lt;p&gt;ggplot作图背后的图表哲学，没有给予饼图（以及衍生出的圆环图、玫瑰图等放射状图表类型）存在的空间（主要是该包的开发者个人的审美观，比较反感次坐标轴以及功能类型雷同的重复性图层函数，所以它宁可开发出分面图层原理也不愿意增加次坐标轴，不愿意为原本柱形图可以表达的图表形式再单独开发一种功能雷同的饼图函数）。&lt;/p&gt;
&lt;p&gt;但是巧的是，在常见的三种坐标形式中，极坐标转换可以非常轻松的将常见的柱形图（条形图）、堆积柱形图通过只一句极坐标函数就神奇的转化为饼图、玫瑰图、圆环图等（不知道是有意为之还是偶然的巧合）。&lt;/p&gt;
    
    </summary>
    
      <category term="R语言" scheme="http://www.raindu.com/categories/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
      <category term="极坐标" scheme="http://www.raindu.com/tags/%E6%9E%81%E5%9D%90%E6%A0%87/"/>
    
      <category term="饼图" scheme="http://www.raindu.com/tags/%E9%A5%BC%E5%9B%BE/"/>
    
      <category term="圆环图" scheme="http://www.raindu.com/tags/%E5%9C%86%E7%8E%AF%E5%9B%BE/"/>
    
      <category term="玫瑰图" scheme="http://www.raindu.com/tags/%E7%8E%AB%E7%91%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>R语言图表美化——巧用分面表达优化图表布局，做出堪比杂志级视觉体验的商务图表</title>
    <link href="http://www.raindu.com/2017/06/10/R%E8%AF%AD%E8%A8%80%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94%E5%B7%A7%E7%94%A8%E5%88%86%E9%9D%A2%E8%A1%A8%E8%BE%BE%E4%BC%98%E5%8C%96%E5%9B%BE%E8%A1%A8%E5%B8%83%E5%B1%80%EF%BC%8C%E5%81%9A%E5%87%BA%E5%A0%AA%E6%AF%94%E6%9D%82%E5%BF%97%E7%BA%A7%E8%A7%86%E8%A7%89%E4%BD%93%E9%AA%8C%E7%9A%84%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8/"/>
    <id>http://www.raindu.com/2017/06/10/R语言图表美化——巧用分面表达优化图表布局，做出堪比杂志级视觉体验的商务图表/</id>
    <published>2017-06-10T01:15:55.000Z</published>
    <updated>2017-06-16T14:17:25.808Z</updated>
    
    <content type="html"><![CDATA[<p>图表的优化布局在Excel中一直都是个大难题，难在Excel软件固有的限制。</p>
<p>特别是在制作多序列多分类图表的时候，放在一个图中显得序列过于拥挤，影响视觉效果，做出分面表达又耗时费力，需要掌握诸多技巧，（版式设计呀、单元格锚定呀等等、照相机呀什么的）是在是有心无力。</p>
<a id="more"></a>
<p>但是像R语言这样依靠图形语法来控制的作图形式，却不存在这样的问题。</p>
<p>今天跟大家分享如何在R语言中巧用分面表达来优化多系列多分类图表的版式布局！</p>
<p>其实这一篇在不久前曾经发过的，当时还处于摸索阶段，写的很粗糙，今天重发一遍，所有的代码和图表都是优化过的，不仔细观察，还真看不出来，仔细对比一下就能发现了！</p>
<p>我是分割线~</p>
<hr>
<p>当数据序列比较多的时候，特别是超过四个以后，还用堆积柱形图（条形图）、或者簇状柱形图的话，图表必然会因为系列太多而受到挤压或者变形，整体就会不协调、不美观。</p>
<p>还有ggplot不支持次坐标轴功能，它的作图思维基本源于塔夫脱的可视化理念，而且作者个人的审美也比较抵触次坐标轴，但是他留给大家解决多序列图表的方案是——图形分面</p>
<p>以下仅以常用的柱形图、条形图为例进行讲解（所有的图形对象几乎都支持分面）</p>
<h3 id="构造作图数据集："><a href="#构造作图数据集：" class="headerlink" title="构造作图数据集："></a>构造作图数据集：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">data&lt;-data.frame(Name = c(<span class="string">"苹果"</span>,<span class="string">"谷歌"</span>,<span class="string">"脸书"</span>,<span class="string">"亚马逊"</span>,<span class="string">"腾讯"</span>),</div><div class="line">Conpany = c(<span class="string">"Apple"</span>,<span class="string">"Google"</span>,<span class="string">"Facebook"</span>,<span class="string">"Amozon"</span>,<span class="string">"Tencent"</span>),</div><div class="line">Sale2013 = c(<span class="number">5000</span>,<span class="number">3500</span>,<span class="number">2300</span>,<span class="number">2100</span>,<span class="number">3100</span>),</div><div class="line">Sale2014 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>),</div><div class="line">Sale2015 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>),</div><div class="line">Sale2016 = c(<span class="number">5050</span>,<span class="number">3800</span>,<span class="number">2900</span>,<span class="number">2500</span>,<span class="number">3300</span>))</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image1.png" alt=""></p>
<h3 id="数据重塑（宽转长）："><a href="#数据重塑（宽转长）：" class="headerlink" title="数据重塑（宽转长）："></a>数据重塑（宽转长）：</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mydata&lt;-melt(mydata,id.vars=<span class="string">"Conpany"</span>,variable.name=<span class="string">"Year"</span>,value.name=<span class="string">"Sale"</span>)</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image2.png" alt=""></p>
<h3 id="作图函数："><a href="#作图函数：" class="headerlink" title="作图函数："></a>作图函数：</h3><p><strong>默认输出图表：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image3.png" alt=""></p>
<p>默认图表的配色确实挺难看的，这里我使用华尔街日报、经济学人的主题、及配色模板进行适度美化。</p>
<p><strong>华尔街日报：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image4.png" alt=""></p>
<p><strong>经济学人</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_economist(base_size=<span class="number">14</span>)+</div><div class="line">scale_fill_economist()+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(axis.title = element_blank())</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image5.png" alt=""></p>
<p>以上是我们使用传统的方法通过将颜色映射到不同类别的年度收入变量上，达到了区分效果，可是这样终究不是办法，五个序列实在是有点多，已经让然有点儿眼花缭乱了，如果有8个序列、10个序列呢，那又该怎么办呢~</p>
<p>下面跟大家分享其中一种比较有效的解决办法——通过分面表达解决多序列图表呈现问题</p>
<h3 id="横排分面："><a href="#横排分面：" class="headerlink" title="横排分面："></a>横排分面：</h3><p><strong>柱形分面（横排）：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(axis.title = element_blank(),legend.position=<span class="string">'none'</span>)+</div><div class="line">facet_grid(.~Year)</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image6.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">facet_grid(.~Year)+</div><div class="line">theme_economist(base_size=<span class="number">14</span>)+</div><div class="line">scale_fill_economist()+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">           axis.title = element_blank(),</div><div class="line">          legend.position=<span class="string">'none'</span>,</div><div class="line">          axis.text.x=element_text(size=<span class="number">7.5</span>)</div><div class="line">         )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image7.png" alt=""></p>
<p><strong>条形分面（横排）：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">facet_grid(.~Year)+</div><div class="line">coord_flip()+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>),</div><div class="line">      axis.text.x=element_text(size=<span class="number">7.5</span>),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">     axis.ticks.length=unit(<span class="number">0.5</span>,<span class="string">'cm'</span>),</div><div class="line">     axis.line.y=element_line(),</div><div class="line">     axis.line.x=element_blank(),</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="string">"dashed"</span>,colour=<span class="string">"grey60"</span>),</div><div class="line">      panel.grid.major.y=element_blank()</div><div class="line">      )</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image8.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_economist(base_size=<span class="number">14</span>)+</div><div class="line">facet_grid(.~Year)+</div><div class="line">coord_flip()+</div><div class="line">scale_fill_economist()+</div><div class="line">theme(axis.ticks.length=unit(<span class="number">0.5</span>,<span class="string">'cm'</span>))+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>),</div><div class="line">      axis.text.x=element_text(size=<span class="number">7.5</span>),</div><div class="line">      axis.line.x=element_blank(),</div><div class="line">      axis.line.y=element_line(),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">     axis.ticks.length=unit(<span class="number">0.5</span>,<span class="string">'cm'</span>),</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="string">"solid"</span>,colour=<span class="string">"white"</span>,size=<span class="number">1.1</span>),</div><div class="line">      panel.grid.major.y=element_blank()</div><div class="line">      )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image9.png" alt=""></p>
<h3 id="竖排分面："><a href="#竖排分面：" class="headerlink" title="竖排分面："></a>竖排分面：</h3><p><strong>柱形分面（竖排）：</strong></p>
<p>左<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">p1&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">theme(axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>))+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(axis.title = element_blank(),legend.position=<span class="string">'none'</span>)+</div><div class="line">facet_grid(Year~.)</div><div class="line">右</div><div class="line">p2&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_economist(base_size=<span class="number">14</span>)+</div><div class="line">facet_grid(Year~.)+</div><div class="line">scale_fill_economist()+</div><div class="line">theme(axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>))+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      axis.text.y=element_text(size=<span class="number">7.5</span>),</div><div class="line">      axis.text.x=element_text(size=<span class="number">7.5</span>,face=<span class="string">"bold"</span>),</div><div class="line">      strip.text=element_text(size=<span class="number">10</span>)</div><div class="line">      )</div></pre></td></tr></table></figure></p>
<p>使用multiplot函数进行版面合并：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>(grid)</div><div class="line"><span class="keyword">library</span>(<span class="string">"Rmisc"</span>)</div><div class="line">multiplot(p1,p2,cols=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/21.jpg" alt=""></p>
<p><strong>条形分面（竖排）：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">facet_grid(Year~.)+</div><div class="line">coord_flip()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">theme(axis.ticks.length=unit(<span class="number">0.5</span>,<span class="string">'cm'</span>))+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="string">"dashed"</span>,colour=<span class="string">"grey60"</span>),</div><div class="line">      panel.grid.major.y=element_blank(),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">      axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.line.x=element_blank(),</div><div class="line">      axis.line.y=element_line(),</div><div class="line">      axis.text.x=element_text(size=<span class="number">10</span>),</div><div class="line">      )</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image16.png" alt=""></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">facet_grid(Year~.)+</div><div class="line">coord_flip()+</div><div class="line">theme_economist(base_size=<span class="number">14</span>)+</div><div class="line">scale_fill_economist()+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="number">1</span>,colour=<span class="string">"white"</span>,size=<span class="number">1.1</span>),</div><div class="line">      panel.grid.major.y=element_blank(),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">      axis.ticks.length=unit(<span class="number">0.2</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.line.x=element_blank(),</div><div class="line">      axis.line.y=element_line(),</div><div class="line">      axis.text.x=element_text(size=<span class="number">10</span>),</div><div class="line">      strip.text=element_text(size=<span class="number">10</span>),</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>)</div><div class="line">      )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image17.png" alt=""></p>
<h3 id="关于簇状、分面图表数据标签问题："><a href="#关于簇状、分面图表数据标签问题：" class="headerlink" title="关于簇状、分面图表数据标签问题："></a>关于簇状、分面图表数据标签问题：</h3><p><strong>簇状图数据标签处理：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">geom_text(aes(y = Sale + <span class="number">0.05</span>), position =position_dodge(<span class="number">0.9</span>),fontface=<span class="string">"bold"</span>, vjust =<span class="number">1</span>,colour=<span class="string">"white"</span>,size=<span class="number">2</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.text.x=element_text(size=<span class="number">10</span>),</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>),</div><div class="line">      )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image10.png" alt=""></p>
<p><strong>横向分面柱图数据标签问题：</strong><br><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+</div><div class="line">facet_grid(.~Year)+</div><div class="line">scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">geom_text(aes(y = Sale + <span class="number">0.05</span>), position =position_dodge(<span class="number">0.9</span>),fontface=<span class="string">"bold"</span>, vjust =<span class="number">1</span>,colour=<span class="string">"white"</span>,size=<span class="number">2</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.line.x=element_line(),</div><div class="line">      axis.text.x=element_text(size=<span class="number">5</span>),</div><div class="line">      axis.text.y=element_text(size=<span class="number">7.5</span>)</div><div class="line">      )</div></pre></td></tr></table></figure></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image11.png" alt=""></p>
<p><strong>横向分面条形图数据标签问题：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">coord_flip()+facet_grid(.~Year)+</div><div class="line">theme_wsj()+scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">geom_text(aes(y = Sale + <span class="number">0.05</span>), position = position_dodge(<span class="number">0.9</span>),hjust=<span class="number">1.2</span>,vjust=<span class="number">0.5</span>,colour=<span class="string">"white"</span>,size=<span class="number">4</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="string">"dashed"</span>,colour=<span class="string">"grey60"</span>),</div><div class="line">      panel.grid.major.y=element_blank(),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">      axis.ticks.length=unit(<span class="number">0.3</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.line.x=element_blank(),</div><div class="line">      axis.line.y=element_line(),</div><div class="line">      axis.text.x=element_text(size=<span class="number">8</span>),</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>)</div><div class="line">      )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image12.png" alt=""></p>
<p><strong>竖向分面柱形图数据标签问题：</strong></p>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image19.png" alt=""></p>
<p><strong>竖向分面条形图数据标签问题：</strong></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+</div><div class="line">geom_bar(stat=<span class="string">"identity"</span>,position=<span class="string">"dodge"</span>)+</div><div class="line">theme_wsj()+scale_fill_wsj(<span class="string">"rgby"</span>, <span class="string">""</span>)+</div><div class="line">facet_grid(Year~.)+coord_flip()+</div><div class="line">guides(fill=guide_legend(title=<span class="literal">NULL</span>))+</div><div class="line">ggtitle(<span class="string">"The Financial Performance of Five Giant"</span>)+</div><div class="line">geom_text(aes(y = Sale + <span class="number">0.05</span>), position = position_dodge(<span class="number">0.9</span>),hjust=<span class="number">1.1</span>,colour=<span class="string">"white"</span>,size=<span class="number">3.5</span>)+</div><div class="line">theme(</div><div class="line">      axis.title = element_blank(),</div><div class="line">      legend.position=<span class="string">'none'</span>,</div><div class="line">      panel.grid.major.x=element_line(linetype=<span class="string">"dashed"</span>,colour=<span class="string">"grey60"</span>),</div><div class="line">      panel.grid.major.y=element_blank(),</div><div class="line">      axis.ticks.x=element_blank(),</div><div class="line">      axis.ticks.y=element_line(),</div><div class="line">      axis.ticks.length=unit(<span class="number">0.25</span>,<span class="string">'cm'</span>),</div><div class="line">      axis.line.x=element_blank(),</div><div class="line">      axis.line.y=element_line(),</div><div class="line">      axis.text.y=element_text(size=<span class="number">10</span>),</div><div class="line">      axis.text.x=element_text(size=<span class="number">10</span>)</div><div class="line">      )</div></pre></td></tr></table></figure>
<p><img src="http://orb53xpn8.bkt.clouddn.com/image18.png" alt=""></p>
<p>以上是本人在学习ggplot函数过程中的一些练习案例，当然要是仔细琢磨，里面的瑕疵还不少，改进空间还有很多，以后有机会慢慢跟大家补充，过几天再跟大家继续分享关于ggplot更加精深的用法技巧！</p>
<hr>
<p><strong>联系方式：</strong></p>
<p>wechat：ljty1991<br>Mail:578708965@qq.com<br>个人公众号：数据小魔方（datamofang）<br>团队公众号：EasyCharts<br>qq交流群：[魔方学院]298236508  </p>
<p><strong>个人简介：</strong></p>
<p><strong><em>杜雨</em></strong><br>财经专业研究僧；<br>伪数据可视化达人；<br>文科背景的编程小白；<br>喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。<br>Mail:578708965@qq.com </p>
<hr>
<p><strong>备注信息：</strong></p>
<p><a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank"><img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc/4.0/88x31.png"></a><br>本作品采用<a rel="external" href="http://creativecommons.org/licenses/by-nc/4.0/" target="_blank">知识共享署名-非商业性使用 4.0 国际许可协议</a>进行许可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图表的优化布局在Excel中一直都是个大难题，难在Excel软件固有的限制。&lt;/p&gt;
&lt;p&gt;特别是在制作多序列多分类图表的时候，放在一个图中显得序列过于拥挤，影响视觉效果，做出分面表达又耗时费力，需要掌握诸多技巧，（版式设计呀、单元格锚定呀等等、照相机呀什么的）是在是有心无力。&lt;/p&gt;
    
    </summary>
    
      <category term="R语言" scheme="http://www.raindu.com/categories/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="数据可视化" scheme="http://www.raindu.com/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="R语言" scheme="http://www.raindu.com/tags/R%E8%AF%AD%E8%A8%80/"/>
    
      <category term="ggplot2" scheme="http://www.raindu.com/tags/ggplot2/"/>
    
  </entry>
  
</feed>

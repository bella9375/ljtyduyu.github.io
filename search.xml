<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一言不合就爬虫系列之——爬取小姐姐的秒拍MV]]></title>
    <url>%2F2017%2F07%2F12%2F%E4%B8%80%E8%A8%80%E4%B8%8D%E5%90%88%E5%B0%B1%E7%88%AC%E8%99%AB%E7%B3%BB%E5%88%97%E4%B9%8B%E2%80%94%E2%80%94%E7%88%AC%E5%8F%96%E5%B0%8F%E5%A7%90%E5%A7%90%E7%9A%84%E7%A7%92%E6%8B%8DMV%2F</url>
    <content type="text"><![CDATA[大连的盛夏实在是热的让人心烦（对于我这种既怕热又怕冷的真的没地呆了）。 再加上令人头疼的毕业论文，这种日子怎能缺少MV来解暑呢。 既然要听，怎么只听一首呢，既然学了爬虫怎么让技能荒废呢。 好吧，烦躁的心情+想听MV的冲动+爬虫技能，今天小魔方教你使用R语言批量爬取秒拍小姐姐的MV视频短片。 小姐姐主页 今天要爬的主页是一位叫陶心瑶小姐姐，刷微博偶然听到她翻唱薛之谦的《方圆万里》，感觉蛮有味道的，于是搜了她的秒拍主页。 主页的作品不多，仅有5首，但是因为仅作为爬虫练习只用，五首也够了（毕竟只是构造循环而已，1000首的步骤也是如此，可能需要构造翻页请求）。 MV挺长比较占内存，所以这里就不演示怎么去大批量的爬MV了（刚买的m本内存都快被掏空了）。 爬虫三步走：第一步：分析网页：首先是到主页之后分析它的网页结构： 可以看到该主页只有5首mv列表，这时候鼠标随便定位到其中一首（我定位的是第一首），然后右键单击，打开开发者工具。 可以看到该首MV的视频地址存放在： 1234567div.videoCont&gt;div.videoList&gt;div.video&gt;div.MIAOPAI_player&gt;div.video-player&gt;videosrc 尝试着用这个地址来浏览器中运行： OK，一切正常，说明这个地址很给力！ 随然完整的视频地址仅在video子节点的src属性中存放着，但是其实只要仔细研究就会发现，父节点MIAOPAI_player下的data-scid属性，data-img，子节点video内src,poster属性所存储的名称你图片链接名称中也是含有该视频的信息的。（共享一部分视频链接中的地址）。 事实上网页中展示的视频信息，最起码会给出三处可用的视频信息，即视频名称、视频封面页、视频的源地址。 （给出这里的解析只是想让大家知道，爬虫不要钻牛角尖，不要以为只有视频原地址的链接一条路可走，万一节点的链接你抓不出来，那岂不是要哭瞎了）。 第二部：抓取网页：然后该干嘛呢，当然是抓视频地址了（这里使用rvest包来抓）12345setwd("E:/CloudMusic")library(tidyverse)library(rvest)library(stringr)(read_html(url,encoding="utf-8")%&gt;%html_nodes("div.videoCont&gt;div.videoList&gt;div.video&gt;div.MIAOPAI_player&gt;div.video-player&gt;video")) {xml_nodeset (0)} 啊哦，这意味着，软件不想理你，并向给你了个鄙视的眼神（请自己体会）。 抓不到地址很心酸的（自己去网页里面复制那也太low啦）。 肿么办，肿么办，肿么办？？？ 之前已经说过了，视频地址链接并非唯一的手段，因为视频的中的id在好几个属性值里面都有包含，所有我们只需任意抓一个属性值，通过观察原始视频地址进行链接的拼接即可。 如果不想做复杂的字符串处理，那就抓最原始的名称吧。（这次目标是父节点MIAOPAI_player下的data-scid属性）。 1mylinks&lt;-read_html(url,encoding="utf-8")%&gt;%html_nodes("div.videoCont&gt;div.videoList&gt;div.video&gt;div.MIAOPAI_player")%&gt;%html_attr("data-scid") [1] “AUTy2nx4l-T~BhG-zX60wSDwwqoWfwpa” “ugJzN6LvH3emoPlSU2b52Cu-SbIQ5LFa” “wJ4AsVMgek6jp6lXDxIpXExCig9cVXo~” “I-J6u~qy7V5CpRIq-FoFA3pYtc6Yr0Sz”[5] “pCLMPKezqWVWHyhjNHaRyKrX16APCeuw” OK，完美搞定，接下来该干啥呢（快想快想）。（因为视频数量少，没有换页存储，所以这里不用构造换页请求，整个代码效率都提高了很多） 接下来当然是构造可用的视频地址啦，因为我们刚才抓的并非完整的可直接传递到视频源的地址，仅仅是视频的id而已。 好吧现在我们对比之前手工复制的视频源地址和这次抓到的视频id信息，观察规律。 AUTy2nx4l-T~BhG-zX60wSDwwqoWfwpahttp://gslb.miaopai.com/stream/AUTy2nx4l-T~BhG-zX60wSDwwqoWfwpa.mp4 好吧，这次是不是一看就看明白咋回事儿啦，没错，视频源地址就是在视频id的基础上左侧添加了秒拍服务端的视频流服务器主网址，右侧添加了.MP4的视频格式而已，OK，接下我们的任务就是构造可用的视频下载地址。 12baseurl&lt;-"http://gslb.miaopai.com/stream/"mymvlinks&lt;-paste0(baseurl,mylinks,".mp4") OK两部搞定，敢不敢相信自己的眼睛哈哈。 123#[1] "http://gslb.miaopai.com/stream/AUTy2nx4l-T~BhG-zX60wSDwwqoWfwpa.mp4" "http://gslb.miaopai.com/stream/ugJzN6LvH3emoPlSU2b52Cu-SbIQ5LFa.mp4"#[3] "http://gslb.miaopai.com/stream/wJ4AsVMgek6jp6lXDxIpXExCig9cVXo~.mp4" "http://gslb.miaopai.com/stream/I-J6u~qy7V5CpRIq-FoFA3pYtc6Yr0Sz.mp4"#[5] "http://gslb.miaopai.com/stream/pCLMPKezqWVWHyhjNHaRyKrX16APCeuw.mp4" 如果不放心的话，可以使用这个地址再再浏览器中打开看一看，预览下是否可以观看视频。(放心吧我都替你试过了) 现在我们只是获取了视频下载地址，可是没有MV的歌名呀（命名和123最后下载完事你可以需要打开听一听才知道是啥歌，如果使用ID的话一串字母数字组合也很烦人）。 好吧索性再把名字趴下来： 可以看到每首MV下面都有个含歌名的句子，就抓这句文字就行。 1234567myinfo&lt;-read_html(url,encoding="utf-8")%&gt;%html_nodes("div.viedoAbout")%&gt;%html_text(trim = TRUE)[1] "温暖女声陶心瑶翻唱薛之谦《方圆几里》 \n #陶心瑶第二自我##纪念青春的那些歌#" [2] "陶心瑶首张实体专辑《第二自我》众筹宣传片 \n #陶心瑶第二自我##纪念青春的那些歌#"[3] "上课中《丑八怪》" [4] "陶心瑶暖心翻唱JJ《她说》 \n #陶心瑶##林俊杰的第36页#" [5] "这个《双截棍》也太柔了吧！唱的心都醉啦" 抓完发现每一个句子里面的歌名都是带有书名号的（特么的中文的书名号怎么匹配内部中文呀，正则不会写~_~） 好吧，技不如人但是我勤快呀，就用字符串匹配函数一个个匹配吧！1234mymvname&lt;-c()for (i in 1:length(myinfo) )&#123;mymvname[i]&lt;-substr(myinfo[i],regexpr("《",myinfo[i])[1]+1,regexpr("》",myinfo[i])[1]-1)&#125; 匹配完成之后，把MP4的后缀带上。12mymvname&lt;-paste0(mymvname,".mp4")[1] "方圆几里.mp4" "第二自我.mp4" "丑八怪.mp4" "她说.mp4" "双截棍.mp4" 都到了这份上了你还想怎样–好吧我只想把小姐姐的视频下载下来而已。 爬虫第三部：构建下载函数：因为是五个视频文件要下载，所以需要构造循环下载函数：123for (i in 1:length(myinfo))&#123;download.file(mymvlinks[i],mymvname[i],mode="wb")&#125; OK，爬完收工，是不是很简单呀，感觉去找个视频网站试一下吧，这个夏天，让音乐来的更猛烈一些吧！ 接下来做一个完整的代码汇总：第一步：分析网页： 第二部：爬取网页：12345678910111213setwd("E:/CloudMusic")library(tidyverse)library(rvest)library(stringr)mylinks&lt;-read_html(url,encoding="utf-8")%&gt;%html_nodes("div.videoCont&gt;div.videoList&gt;div.video&gt;div.MIAOPAI_player")%&gt;%html_attr("data-scid")#爬取视频ID：baseurl&lt;-"http://gslb.miaopai.com/stream/"mymvlinks&lt;-paste0(baseurl,mylinks,".mp4") #构造视频链接：myinfo&lt;-read_html(url,encoding="utf-8")%&gt;%html_nodes("div.viedoAbout")%&gt;%html_text(trim = TRUE)#爬取评论文本mymvname&lt;-c()for (i in 1:length(myinfo) )&#123;mymvname[i]&lt;-substr(myinfo[i],regexpr("《",myinfo[i])[1]+1,regexpr("》",myinfo[i])[1]-1)&#125;#提取视频名称mymvname&lt;-paste0(mymvname,".mp4")#构造视频名称（带格式） 第三步：构造下载函数：123for (i in 1:length(myinfo))&#123;download.file(mymvlinks[i],mymvname[i],mode="wb")&#125; 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>网络爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左手用R右手Python系列——因子变量与分类重编码]]></title>
    <url>%2F2017%2F07%2F10%2F%E5%B7%A6%E6%89%8B%E7%94%A8R%E5%8F%B3%E6%89%8BPython%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%9B%A0%E5%AD%90%E5%8F%98%E9%87%8F%E4%B8%8E%E5%88%86%E7%B1%BB%E9%87%8D%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[今天这篇介绍数据类型中因子变量的运用在R语言和Python中的实现。 因子变量是数据结构中用于描述分类事物的一类重要变量。其在现实生活中对应着大量具有实际意义的分类事物。 比如年龄段、性别、职位、爱好，星座等。 之所以给其单独列出一个篇幅进行讲解，除了其在数据结构中的特殊地位之外，在数据可视化和数据分析与建模过程中，因子变量往往也承担中描述某一事物重要维度特征的作用，其意义非同寻常，无论是在数据处理过程中还是后期的分析与建模，都不容忽视。 通常意义上，按照其所描述的维度实际意义，因子变量一般又可细分为无序因子（类别之间没有特定顺序，水平相等）和有序因子（类别中间存在某种约定俗成的顺序，如年龄段、职称、学历、体重等）。 在统计学中对变量进行了如下四类划分：定类变量、定序变量、定距变量、定比变量。而其中的定类和定比变量就对应着我们今天将要讲解的因子变量（无序因子和有序因子变量）。 因子变量从信息含量上来看，其要比单纯的定性变量（文本变量）所包含的描述信息多一些，但是又比数值型变量（定距变量和定比变量）所表述的信息含量少一些。 因而原则上来讲，数值型变量可以转换为因子变量，因子变量可以转换为文本型变量，但是以上顺序却是不可逆的（信息含量多的变量可以放弃信息量，转换为信息含量较少的变量类型，但是信息含量较少的变量却无法增加信息含量）。 以下将分别讲解在R语言和Python中如何生成因子变量、如何将数值型变量转换为因子变量、以及如何对因子变量进行重编码。 R语言因子变量处理函数：在R语言中，通常使用factor直接生成因子变量，我们仅需一个向量（原则上可以是文本型、也可以是数字型，但是通常从实际意义上来说，被转换的应该是一个含有多类别的类别型文本变量）。 1factor(x, levels,labels=levels,ordered=) 以上参数中，x即是我们将要转换的变量，levels是将要设定的因子水平（可选参数，省略则自动以向量中的不重复对象为因子水平），labels作为因子标签（可选参数，与前述因子水平对应，若设置，则打印时显示的是对应因子标签，省略则同因子水平一样，使用向量中不重复值【即类别】作为标签），ordered是逻辑参数，设定是否对因子水平排序。12vector&lt;-rep(LETTERS[1:5],6);print(vector);plyr::count(vector)myfactor&lt;-(factor(vector,levels=c("E","D","C","B","A"),labels=c("EEE","DDD","CCC","BBB","AAA"),ordered=TRUE) 通常来说，factor函数中，levels一般不用设置，函数会自动判断向量内有几个水平，但是倘若要生成有序因子的话，默认会根据字母顺序排列，如果自然顺序与目标有序因子顺序不一致，则一定要指定levels，labels则视具体需求而定，如果本身就是文本类别的话，一般无需设定标签。 如果是问卷类数据，而且编码为数值，则一定要通过labels标签的设定来还原每一个编码的真实意义。1factor(vector,labels=c("AAA","BBB","CCC","DDD","EEE"),ordered=TRUE) 因子变量与文本变量数值变量之间的互转则通过as.character()或者as.numeric()函数来实现。 123library(dplyr)as.character(as.factor(1:10))%&gt;%str()as.numeric(as.factor(1:10))%&gt;%str() R语言中的因子变量重编码 如果你有一个度量指标，需要将其转换为分段的因子变量，则可以通过cut函数来实现这种转换。12scale&lt;-runif(100,0,100)cut(x,breaks,labels=NULL,include.lowest=FALSE,right=TRUE,ordered=) cut函数参数如上，接受一个数值型向量，breaks接受一个数值向量（标识分割点）或者单个数值（分割 数目）。 right是逻辑参数，设定分割带是左开右闭或者左闭右开。（默认左开右闭）。 include.lowest则根据right的设定，决定是否应该包含端点值（如果right为TRUE，左开右闭区间，则包含最小值，如果right为FALSE，左闭右开区间则包含最大值）,默认为FALSE。 ordered则设定是否对因子水平进行排序。 1(factor1&lt;-cut(scale,breaks=c(0,20,40,60,80,100),labels=c("0~20","20~40","40~60","60~80","80~100"),include.lowest=TRUE,ordered=TRUE)) 另一种分割场景是使用分位数函数进行分割12qa &lt;- quantile(scale, c(0,0.2,0.4,0.6,0.8,1.0))(cut(scale,breaks=qa,labels=c("0%~20%","20%~40%","40%~60%","60%~80%","80%~100%"),include.lowest=TRUE,ordered=TRUE)) 以上分割方法在是较为常用的因子变量转换方法，当然你可以使用if函数进行类似分割，但是相比较来讲，使用cut函数进行分割要高效很多。 Python因子编码处理函数：在Python中，Pandas库包含了处理因子变量的一整套完整语法函数。 123import pandas as pdimport numpy as npimport string 在pandas中的官方在线文档中，给出了pandas因子变量的详细论述，并在适当位置与R语言进行了对比描述。 当利用pandas生成序列时，可以在序列函数内的dtype参数设定因子变量类型。1s = pd.Series(["A","B","C","D","E"], dtype="category") 生成数据框时，也可以直接生成因子变量。12df = pd.DataFrame(&#123;"A":["a","b","c","a"]&#125;)df["B"] = df["A"].astype('category') 除了直接在生成序列或者数据框时生成因子变量之外，也可以通过一个特殊的函数pd.Categorical来完成在序列和数据框中创建因子变量。123s = pd.Series(pd.Categorical(["a","b","c","a"], categories=["a","b","c"],ordered=False))df = pd.DataFrame(&#123;"A":["a","b","c","a"]&#125;)df["B"] =pd.Series(pd.Categorical(["a","b","c","a"], categories=["a","b","c"],ordered=False)) 因子顺序的添加可以通过设定序列或者数框框列的.astype来进行详细的操作。12s = pd.Series(["a","b","c","a"])s_cat = s.astype("category", categories=["a","b","c"], ordered=True) 无论是序列中还是数据框中的因子变量生成之后，都可以通过以下属性查看其具体的类型、因子类别、以及是否含有顺序。 123s_cat.dtypess_cat.cat.categoriess_cat.cat.ordered 一种比较迂回的方法是，先生成普通序列，然后通过设定序列类型完成因子变量的转化。而想要舍弃因子变量，还原成普通的文本序列，则同样只需再其astype中进行格式设定。 123s = pd.Series(["a","b","c","a"])s2 = s.astype('category',categories=["a","b","c"],ordered=True)s2.astype(str) 最后讲一下，如何在数据框中分割数值型变量为因子变量，pandas的数据框也有与R语言同名的函数——cut。123df = pd.DataFrame(&#123;'value': np.random.randint(0, 100, 20)&#125;)labels = [ "&#123;0&#125; - &#123;1&#125;".format(i, i + 9) for i in range(0,100,10) ]df['group'] = pd.cut(df.value, range(0, 105, 10), right=False, labels=labels) 12345pd.cut(x, bins, right=, labels=,include_lowest=False)#df.value代表待风格的变量，第二项是bins可以是一个列表（作为分割点），也可以是一个整数（作为分割带箱数），#right控制带宽是左开右闭还是左闭右开，#labels设定输出显示标签，#include_lowest=控制是否包含边界点（以上参数可以类比R语言中的cut函数）。 最后做一个小总结：关于因子变量在R语言和Python中涉及到的操作函数; R语言： 创建因子变量：factor转换因子变量：as.factoras.numeric(as.character)分割因子变量：cut函数 Python: 创建因子变量：pd.Categorical(categories=,ordered=)pd.Series(dtype=”category”)转换因子变量：df.astype(‘category’,categories,ordered)分割因子变量：df.cut(df.value,breaks=,right=,labels) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[超强脑洞第一弹——子弹图~~~]]></title>
    <url>%2F2017%2F07%2F08%2F%E5%B0%8F%E9%AD%94%E6%96%B9%E4%B8%8D%E6%83%B3%E8%B7%9F%E4%BD%A0%E8%AF%B4%E8%AF%9D%EF%BC%8C%E5%B9%B6%E5%90%91%E4%BD%A0%E6%89%94%E4%BA%86%E4%B8%80%E5%A0%86%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[很早就跟大家说过，ggplot是一个黑洞，哈神是一个艺术家，真正体会到ggplot的强大，也就是近几个月的事儿，只要你的灵感不受束缚，它真的……无所不能，今天看一个商务场合经常使用的，绩效与目标管理工具——子弹图。 数据准备：导入包：12345library(ggplot2)library(reshape2)library(ggmap)library(showtext)library(Cairo) 构建作图数据：12345678910KPI&lt;-c("KPI1","KPI2","KPI3","KPI4","KPI5")INDEX&lt;-1:5good&lt;-rep(0.2,5)excellent&lt;-goodpass&lt;-rep(0.6,5)target&lt;-c(0.84,0.85,0.7,0.92,0.78)fact&lt;-c(0.91,0.8,0.68,0.91,0.8)mydata&lt;-data.frame(KPI,INDEX,excellent,good,pass,target,fact)mydata1&lt;-melt(mydata,id.vars=c("KPI","target","INDEX","fact"),variable.name="perform",value.name="scope")color&lt;-c("#43546C","#8695B2","#D9DBDF") 这个是第一张图的数据源：双柱图123mydata2&lt;-mydatamydata2$zhibiao&lt;-round(runif(5,1,10),0)mydata2$zhibiao2&lt;-round(runif(5,5,9),0) 123456789CairoPNG(file="C:/Users/Administrator/Desktop/dbq.png",width=300,height=400)ggplot()+geom_bar(data=mydata2,aes(x=KPI,y=zhibiao),stat="identity",width=.3,fill="#43546C",col=NA)+geom_bar(data=mydata2,aes(x=KPI,y=zhibiao2),stat="identity",width=.7,fill=NA,col="#43546C")+ylim(-2,15)+geom_text(data=NULL,aes(x=1:5,y=rep(-1,5),label=KPI))+geom_text(data=mydata2,aes(x=KPI,y=zhibiao,label=zhibiao),vjust=-.5)+theme_nothing()dev.off() 不带目标标识点的子弹图：12345678910111213141516CairoPNG(file="C:/Users/Administrator/Desktop/db.png",width=300,height=400)ggplot()+geom_bar(data=mydata1,aes(x=INDEX,y=scope,fill=perform),stat="identity",position="stack",width=.7)+ylim(-0.15,1.2)+geom_linerange(data=mydata1,aes(x=INDEX,ymin=0,ymax=fact),col="#000002",size=5)+scale_fill_manual(values=sort(color,decreasing=T) ) + geom_errorbarh(data=mydata,aes(x=INDEX,y=target,xmax =INDEX+.25, xmin =INDEX-.25),height=0,size=1.5,colour="#BA262A")+guides(fill=guide_legend(title=NULL))+geom_text(data=NULL,aes(x=1:5,y=rep(-.05,5),label=KPI))+theme_nothing(legend=TRUE)+theme(legend.direction="horizontal",legend.position=c(0.5,.88),legend.text=element_text(size=12))dev.off() 翻倒：12345678910111213141516CairoPNG(file="C:/Users/Administrator/Desktop/db11.png",width=400,height=300)ggplot()+geom_bar(data=mydata1,aes(x=INDEX,y=scope,fill=perform),stat="identity",position="stack",width=.7)+ylim(-0.15,1)+coord_flip()+scale_x_reverse()+geom_linerange(data=mydata1,aes(x=INDEX,ymin=0,ymax=fact),col="#000002",size=5)+scale_fill_manual(values=sort(color,decreasing=T) ) + geom_errorbarh(data=mydata,aes(x=INDEX,y=target,xmax =INDEX+.25, xmin =INDEX-.25),height=0,size=1.5,colour="#BA262A")+guides(fill=guide_legend(title=NULL))+geom_text(data=NULL,aes(x=1:5,y=rep(-.1,5),label=KPI))+theme_nothing(legend=TRUE)+theme(legend.text=element_text(size=12))dev.off() 带目标标识点的子弹图：123456789101112131415CairoPNG(file="C:/Users/Administrator/Desktop/db1.png",width=300,height=400)ggplot()+geom_bar(data=mydata1,aes(x=KPI,y=scope,fill=perform),stat="identity",position="stack",width=.7)+ylim(-.15,1.2)+geom_linerange(data=mydata1,aes(x=KPI,ymin=0,ymax=fact),col="#000002",size=5)+scale_fill_manual(values=sort(color,decreasing=T) ) + geom_errorbarh(data=mydata,aes(x=KPI,y=target,xmax =KPI+.25, xmin =KPI-.25),height=0,size=1.5,colour="#BA262A")+geom_text(data=NULL,aes(x=1:5,y=rep(-.05,5),label=KPI))+theme_nothing(legend=TRUE)+theme(legend.direction="horizontal",legend.position=c(0.5,.88),legend.text=element_text(size=12))dev.off() 翻倒：123456789101112131415CairoPNG(file="C:/Users/Administrator/Desktop/db13.png",width=400,height=300)ggplot()+geom_bar(data=mydata1,aes(x=KPI,y=scope,fill=perform),stat="identity",position="stack",width=.7)+ylim(-.15,1)+coord_flip()+geom_linerange(data=mydata1,aes(x=KPI,ymin=0,ymax=fact),col="#000002",size=5)+scale_fill_manual(values=sort(color,decreasing=T))+ geom_errorbarh(data=mydata,aes(x=KPI,y=target,xmax =KPI+.25, xmin =KPI-.25),height=0,size=1.5,colour="#BA262A")+geom_text(data=NULL,aes(x=1:5,y=rep(-.1,5),label=KPI))+theme_nothing(legend=TRUE)+theme(legend.text=element_text(size=12))+guides(fill=guide_legend(title=NULL))dev.off() 所以大家就期待着之后的更新会出现什么奇葩图形吧，这里就不剧透了，说实话，我也不知道我能用ggplot画出什么超强脑洞出来，因为真的，灵感来了，挡都挡不住呀~ 不想多说什么了，感兴趣的就赶紧学起来吧，ggplot弄熟了，未来一片光明哈哈哈~~~~ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>路径图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让执着成为一种习惯——仿网易数独玫瑰气泡图]]></title>
    <url>%2F2017%2F07%2F06%2F%E8%AE%A9%E6%89%A7%E7%9D%80%E6%88%90%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B9%A0%E6%83%AF%E2%80%94%E2%80%94%E4%BB%BF%E7%BD%91%E6%98%93%E6%95%B0%E7%8B%AC%E7%8E%AB%E7%91%B0%E6%B0%94%E6%B3%A1%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[没有难学的技艺，只有不够辛勤的付出！ 今天这篇文章推送仿的的是网易数独的一幅信息图，内容呈现的是全球各国人民对于养老所持的态度，数据来源于Pew Reserch Centre。 图表整体难度中等，使用ggplot2来写代码，主要考察关于极坐标转换与应用。（ggplot2系统中，两个较为高阶的用法分别为：极坐标系、地理空间的多边形填充）。 环境准备加载包：加载包：123456library("ggplot2")library("tidyr")library("ggthemes")library("dplyr")library("Cairo")library("showtext") 载入字体：123font.add("myfontl","msyhl.ttc")font.add("myfont","msyh.ttc")font.add("myfzhzh","方正正粗黑简体.TTF") 锁定文件临时目录：1setwd("D:/R/File") 导入并整理数据:1circle_bubble&lt;-read.csv("circle_bubble.csv",stringsAsFactors = FALSE,check.names = FALSE) 仔细观察该图，你会发现，玫瑰图内侧并非底边对齐，而是靠上下中心对齐，要想做到这种效果，必须将一个 细分维度转化为负值（柱形图堆积时会自动将负值堆积在负坐标轴上）。 123circle_bubble$Government&lt;--circle_bubble$Governmentlevel&lt;-circle_bubble[,"State"]circle_bubble$State&lt;-factor(circle_bubble$State,levels=level,ordered=TRUE) 筛选出制作堆积条形图的数据源：12circle_data&lt;-circle_bubble %&gt;% select(State,Government,Family,Youself) %&gt;% gather(Class,Value,-State)circle_data$Class&lt;-factor(circle_data$Class,levels=c("Government","Youself","Family"),ordered=TRUE) 构造三个序列的气泡图数据：123circle_point&lt;-circle_bubble[,c("State","General","Very","Raito")]circle_point_data&lt;-gather(circle_point,Class,Value,-State)circle_point_data$Class&lt;-factor(circle_point_data$Class,levels=c("General","Very","Raito"),order=TRUE) 构造作图数据：构造气泡图模拟Y轴：12345circle_point_data &lt;- within(circle_point_data,&#123; mood_y &lt;- NA mood_y[Class=="General"]&lt;--150 mood_y[Class=="Very"]&lt;--100 mood_y[Class=="Raito"]&lt;-140&#125;) 构造模拟气泡大小1circle_point_data$Value_y&lt;-ifelse(circle_point_data$Class=="Raito",circle_point_data$Value,0.3*circle_point_data$Value) （这里没有使用气泡图对应真实值作为气泡大小，而是将除Raito系列之外的两个序列真实值缩小了70%，这么做的目的是为了整体的气泡大小比例显示更为匀称和谐，因为Ratio序列是单值序列，其与自身的100%单位标度比较，剩余两个序列相互比较）。 构造模拟标签位置12345circle_data &lt;- within(circle_data,&#123; label_y &lt;- NA label_y[Class=="Government"]&lt;-circle_bubble$Government/2 label_y[Class=="Family"]&lt;-circle_bubble$Family/2 label_y[Class=="Youself"]&lt;-circle_bubble$Family+circle_bubble$Youself-circle_bubble$Youself/2&#125;) 可视化过程：极坐标化前的柱形图：123ggplot()+geom_linerange(data=circle_bubble,aes(x=State,ymin=-150,ymax=140),size=.25,color="#D8E5F2",alpha=0.8)+geom_col(data=circle_data,aes(x=State,y=Value,fill=Class),width=1,colour="white",size=.25) 极坐标化前的柱形图和气泡图123456789ggplot()+geom_linerange(data=circle_bubble,aes(x=State,ymin=-150,ymax=140),size=.25,color="#D8E5F2",alpha=0.8)+geom_col(data=circle_data,aes(x=State,y=Value,fill=Class),width=1,colour="white",size=.25)+geom_point(data=circle_bubble,aes(State,y=140),size=40,colour="#FEFCD3",alpha=.8)+geom_point(data=circle_point_data,aes(State,y=mood_y,size=Value_y,colour=Class))+geom_text(data=circle_data,aes(x=State,y=label_y,group=Class,label=abs(Value)),family="myfont",colour="white",size=5)+geom_text(data=filter(circle_point_data,mood_y==-150),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#AA1A66",size=4)+geom_text(data=filter(circle_point_data,mood_y==-100),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#A31067",size=4)+geom_text(data=filter(circle_point_data,mood_y==140),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#F29E4A",size=5) 极坐标化后的柱形图和气泡图（完整标签版）1234567891011121314ggplot()+geom_linerange(data=circle_bubble,aes(x=State,ymin=-150,ymax=140),size=.25,color="#D8E5F2",alpha=0.8)+geom_col(data=circle_data,aes(x=State,y=Value,fill=Class),width=1,colour="white",size=.25)+geom_point(data=circle_bubble,aes(State,y=140),size=40,colour="#FEFCD3",alpha=.8)+geom_point(data=circle_point_data,aes(State,y=mood_y,size=Value_y,colour=Class))+geom_text(data=circle_data,aes(x=State,y=label_y,group=Class,label=abs(Value)),family="myfont",colour="white",size=5)+geom_text(data=filter(circle_point_data,mood_y==-150),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#AA1A66",size=4)+geom_text(data=filter(circle_point_data,mood_y==-100),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#A31067",size=4)+geom_text(data=filter(circle_point_data,mood_y==140),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#F29E4A",size=5)+scale_fill_manual(values=c("#FA844F","#BDCCD4","#00C4B5"))+scale_colour_manual(values=c("#FAC0A1","#F35C57","#FBEB1B"))+labs(title="各国人民\n对于养老的态度")+scale_size_area(max_size=34.8)+coord_polar() 最终成品图：12345678910111213141516171819202122CairoPNG(file="circle_bubble.png",width=1000,height=1000)showtext.begin()ggplot()+geom_linerange(data=circle_bubble,aes(x=State,ymin=-150,ymax=140),size=.25,color="#D8E5F2",alpha=0.8)+geom_col(data=circle_data,aes(x=State,y=Value,fill=Class),width=1,colour="white",size=.25)+geom_point(data=circle_bubble,aes(State,y=140),size=40,colour="#FEFCD3",alpha=.8)+geom_point(data=circle_point_data,aes(State,y=mood_y,size=Value_y,colour=Class))+geom_text(data=circle_data,aes(x=State,y=label_y,group=Class,label=abs(Value)),family="myfont",colour="white",size=5)+geom_text(data=filter(circle_point_data,mood_y==-150),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#AA1A66",size=4)+geom_text(data=filter(circle_point_data,mood_y==-100),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#A31067",size=4)+geom_text(data=filter(circle_point_data,mood_y==140),aes(x=State,y=mood_y,label=Value),family="myfontl",colour="#F29E4A",size=5)+geom_text(data=circle_bubble,aes(State,y=Government-12,label=State,angle=angle),family="myfontl",size=4,alpha=.8)+scale_fill_manual(values=c("#FA844F","#BDCCD4","#00C4B5"))+scale_colour_manual(values=c("#FAC0A1","#F35C57","#FBEB1B"))+labs(title="各国人民\n对于养老的态度")+scale_size_area(max_size=34.8)+coord_polar()+ylim(-250,150)+guides(colour=FALSE,size=FALSE,fill=FALSE)+theme_map() %+replace%theme(plot.title=element_text(family="myfzhzh",size=50,hjust=0,lineheight=1.2))showtext.end()dev.off() 最终效果图： PS修饰后的最终效果（以上进过PS修饰细节）。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这么牛X的包，一般人我不告诉他！！！]]></title>
    <url>%2F2017%2F07%2F04%2F%E8%BF%99%E4%B9%88%E7%89%9BX%E7%9A%84%E5%8C%85%EF%BC%8C%E4%B8%80%E8%88%AC%E4%BA%BA%E6%88%91%E4%B8%8D%E5%91%8A%E8%AF%89%E4%BB%96%EF%BC%81%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[本文将给大家介绍一个ggplot2灰常牛X的可视化扩展包，我将该包主页的包用法介绍整理成中文，分享给大家。 包名叫geofacet，有经验的charter大概能猜出来个大概，没错该包是关于可视化数据中的地理信息，以及维度分面。 作者命名非常讲究，将该包的两个主要核心功能进行组合命名。 地理信息可视化分面，这么吊的包你肯定是第一次看到吧（其实之前介绍过一些地图上的mini 柱形图、饼图等都算这一类），但是这里的分面功能做的更加彻底，作者还是遵循惯例，将这种基于地理信息分面的可视化功能对接了ggplot2,并以分面函数facet_geo()的形式呈现。 这样了解ggplot2的用户学习成本就低了很多，因为只需了解这个分面参数的具体设定，组织对应数据源格式就OK了。 以下是本文的主要内容： geofacet包扩展了ggplot2的分面函数，进而提供了基于地理信息的更加灵活的数据可视化方案。这个分面函数并无特别指出，如同内置的分面函数（facet_grid、facet_wrap等）用法没有太大差别。唯一的区别是，在最终的图形版面呈现结果上，允许单个图表分面刻画在对应的地理多边形中心位置。 该包的核心功能可以概括为以下几点： 每一个分面单元格都可以呈现一个维度的数据（而非单个数值）； 每一个分面单元格可以容纳任何一种ggplot2内置图表对象（看清楚了，是任何一种，任何一种，任何一种，就问你这包屌不屌！）； 分面系统支持任何的地理多边形（可以是内建的，也可以是用户自定义的）。 该包的强大优势绝不仅仅只有以下展示的这些内容，很快我们将会建立一个该包的专属博客（如果建好了会将其网站分享在本页面）。 下载安装：123456install.packages("geofacet")# or from github:# devtools::install_github("hafen/geofacet")library(geofacet)library(ggplot2)library(ggthemes) 使用方法：该包内的主要函数是facet_geo()，它的用法可以类比ggplot2的内置分面函数facet_warp()\facet_grid()(当然在输出方式上略有不同)。只要你已经熟练掌握了ggplot2语法，那么你就可以轻松搞定这个包。 接下来让我们展示一个例子，该包内置了一个数据集——state_ranks。1head(state_ranks) 这是一个包含美国各州不同社会指标优略程度的数据集（按照排名由低到高排序）。 然后让我们使用geofacet来给每一个州都创造一个柱形图，我仅需使用一个ggplot2内的geom_col()函数即可，至于分面参数，这里我们摒弃使用传统的facet_wrap（）分面函数，而是使用geofacet包提供的facet_geo（）函数来替代。 定义一个主题：12345678mytheme&lt;-function (base_size = 12, base_family = "")&#123; theme_bw(base_size = base_size, base_family = base_family) %+replace% theme(axis.line = element_blank(), axis.text.x=element_blank(), axis.ticks=element_blank(), axis.title = element_blank(), panel.background=element_blank(),panel.border =element_blank(), panel.grid = element_blank(), plot.background = element_blank(), strip.background=element_blank(),legend.position = c(0.9,0.15))&#125; 案例赏析：分面柱形图：123456ggplot(state_ranks, aes(variable,rank,fill=variable)) + geom_col() + coord_flip() + scale_fill_wsj()+ facet_geo(~state)+ mytheme() geofacet内部重要参数： grid参数：可以理解为网格id，可以选择内建的id名称，或者是提供一个自建的已经命名有网格名称的数据框。 label参数：可以指定任何我们想要指定的变量作为网格显示的标签。 以下是两一个自带数据集的例子：1head(us_state_grid2) 这一次，我们用来呈现美国季节调整后的失业率随时间的变化。使用对应州名作为对应网格标签。123456789ggplot(state_unemp, aes(year, rate)) + geom_line() + facet_geo(~ state, grid = "us_state_grid2", label = "name") + scale_x_continuous(labels = function(x) paste0("'", substr(x, 3, 4))) + labs(title = "Seasonally Adjusted US Unemployment Rate 2000-2016", caption = "Data Source: bls.gov", x = "Year", y = "Unemployment Rate (%)") + theme(strip.text.x = element_text(size = 6)) 指定网格非常容易，我们只需提供一个内含地区名称和地区代码的数据框即可。 以下是该包内已经内建好的，我们画图可利用的带地区编码的数据集。123get_grid_names()#[1] "us_state_grid1" "us_state_grid2" "eu_grid1" "aus_grid1" "sa_prov_grid1" "london_boroughs_grid"#[7] "nhs_scot_grid" "india_grid1" "india_grid2" "argentina_grid1" "br_grid1" OMG，WAKM ,竟然没有China，这不科学啊（等我弄明白了我亲自给大家做一个）。 接下来是其他国家的几个例子！ 欧盟成员国GDP增长情况：123456789ggplot(aus_pop, aes(age_group, pop / 1e6, fill = age_group)) + geom_col() + facet_geo(~ code, grid = "aus_grid1") + coord_flip() + labs( title = "Australian Population Breakdown", caption = "Data Source: ABS Labour Force Survey, 12 month average", y = "Population [Millions]") + theme_bw() 奥地利人口分组可视化：123456ggplot(aus_pop, aes(age_group, pop / 1e6, fill = age_group)) + geom_col() + facet_geo(~ code, grid = "aus_grid1") + coord_flip() + labs( title = "Australian Population Breakdown", caption = "Data Source: ABS Labour Force Survey, 12 month average", y = "Population [Millions]") + theme_bw() 南非1234567ggplot(sa_pop_dens, aes(factor(year), density, fill = factor(year))) + geom_col() + facet_geo(~ province, grid = "sa_prov_grid1") + labs(title = "South Africa population density by province", caption = "Data Source: Statistics SA Census", y = "Population density per square km") + theme_bw() 关于伦敦房价123456ggplot(london_afford, aes(x = year, y = starts, fill = year)) + geom_col(position = position_dodge()) + facet_geo(~ code, grid = "london_boroughs_grid", label = "name") + labs(title = "Affordable Housing Starts in London", subtitle = "Each Borough, 2015-16 to 2016-17", caption = "Source: London Datastore", x = "", y = "") 苏格兰居民牙齿健康程度12345678ggplot(nhs_scot_dental, aes(x = year, y = percent)) + geom_line() + facet_geo(~ name, grid = "nhs_scot_grid") + scale_x_continuous(breaks = c(2004, 2007, 2010, 2013)) + scale_y_continuous(breaks = c(40, 60, 80)) + labs(title = "Child Dental Health in Scotland", subtitle = "Percentage of P1 children in Scotland with no obvious decay experience.", caption = "Source: statistics.gov.scot", x = "", y = "") 印度人口分布12345678910ggplot(subset(india_pop, type == "state"), aes(pop_type, value / 1e6, fill = pop_type)) + geom_col() + facet_geo(~ name, grid = "india_grid2", label = "code") + labs(title = "Indian Population Breakdown", caption = "Data Source: Wikipedia", x = "", y = "Population [Millions]") + theme_bw() + theme(axis.text.x = element_text(angle = 40, hjust = 1)) 2016年美国总统大选：12345678910111213ggplot(election, aes("", pct, fill = candidate)) + geom_col(alpha = 0.8, width = 1) + scale_fill_manual(values = c("#4e79a7", "#e15759", "#59a14f")) + facet_geo(~ state, grid = "us_state_grid2") + scale_y_continuous(expand = c(0, 0)) + labs(title = "2016 Election Results", caption = "Data Source: http://bit.ly/2016votecount", x = NULL, y = "Percentage of Voters") + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank(), strip.text.x = element_text(size = 6)) 换成条形图：1234567891011ggplot(election, aes(candidate, pct, fill = candidate)) + geom_col() + scale_fill_manual(values = c("#4e79a7", "#e15759", "#59a14f")) + facet_geo(~ state, grid = "us_state_grid2") + theme_bw() + coord_flip() + labs(title = "2016 Election Results", caption = "Data Source: http://bit.ly/2016votecount", x = NULL, y = "Percentage of Voters") + theme(strip.text.x = element_text(size = 6)) 好了就写这几个吧，看完是不是觉得这个包很牛掰啊哈哈哈~_~ 我也是被他给惊艳到才立马写出来分享给大家，不过可惜的是这些只能使用内建数据，如果你要呈现的地域包含在内建的地区里面，应该是可以用的，但是内部没有定义的地区编码，需要自己使用JS编辑器定义、提交、审核，灰常麻烦，但是我有信心把源码搞明白，然后写一套可以自定义的地区分面系统。（不知道要猴年马月才能出来哈哈哈~） 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些年做过的图表]]></title>
    <url>%2F2017%2F07%2F03%2F%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%81%9A%E8%BF%87%E7%9A%84%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[数据可视化是我平时最大的爱好。 但是作为一个初学者、行外人。总觉得自己学的不够扎实、没有系统、缺乏一线的业务锻炼。 我只能以不停地写代码、开脑洞来避开自己的弱项。 所以有了这个合集，我最喜欢的几张图表，其中所用的到的大部分数据也是自己写爬虫从网上抓取来的，经历过各种失败和的困扰、各种排错、同一段代码要不停地调参做细节优化。 常常是别人觉得已经做得很精致的图表了，自己还是能找出很多瑕疵。虽然自己是白羊座，可是硬生生的给逼成了处女座。 所以才有了这些看起来赏心悦目的可视化作品。 作为一个双非财经大学的文科硕士，我没有循着传统的老路走（尽管包了全科的CPA，也不曾去过一次考场）。尽管自己也顶着很大的职业压力，可是 不想强迫自己做不喜欢的事情，毕竟我本就不是一个逆来顺受的人。 学的久了最大的感触就是，如果能寻得一些心法，那么自己的技能会形成网络效应，即你会发现同样的问题用不同的工具来解决，其大体的思路都是差不多的，不同的只是软件的界面、不同的菜单以及命名方法的差异。 那么这种学习的好处，最终可以让你对同一个领域的不同工具之间能够无师自通、信手拈来。 我学了很长一段时间Excel，之后才入手的R语言，掌握到一定程度，我可以用两种不同的工具来模仿同一个图表案例，而且仿制的结果根本无法分辨有任何工具的痕迹。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左手用R右手Python系列——数据塑型与长宽转换]]></title>
    <url>%2F2017%2F07%2F02%2F%E5%B7%A6%E6%89%8B%E7%94%A8R%E5%8F%B3%E6%89%8BPython%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%A1%91%E5%9E%8B%E4%B8%8E%E9%95%BF%E5%AE%BD%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[今天这篇是R语言 with Python系列的第三篇，主要跟大家分享数据处理过程中的数据塑型与长宽转换。 其实这个系列算是我对于之前学习的R语言系列的一个总结，再加上刚好最近入门Python，这样在总结R语言的同时，对比R语言与Pyhton在数据处理中常用解决方案的差异，每一个小节只讲一个小知识点，但是这些知识点都是日常数据处理与清洗过程中非常高频的需求。 不会跟大家啰嗦太多每一个函数的详细参数，只列出那些参数中的必要设定，总体以简单实用为原则。如若需要详细了解每一个函数的内部参数，还是需要自己查阅官方文档。 数据长宽转换是很常用的需求，特别是当是从Excel中导入的汇总表时，常常需要转换成一维表（长数据）才能提供给图表函数或者模型使用。 R语言数据塑型：在R语言中，提供数据长宽转换的包主要有两个： reshape2::melt/dcast tidyr::gather/spread 12library("reshape2")library("tidyr") 12345678mydata&lt;-data.frame( Name = c("苹果","谷歌","脸书","亚马逊","腾讯"), Conpany = c("Apple","Google","Facebook","Amozon","Tencent"), Sale2013 = c(5000,3500,2300,2100,3100), Sale2014 = c(5050,3800,2900,2500,3300), Sale2015 = c(5050,3800,2900,2500,3300), Sale2016 = c(5050,3800,2900,2500,3300) ) 数据重塑（宽转长）：melt函数是reshape2包中的数据宽转长的函数123456mydata&lt;-melt( mydata, #待转换的数据集名称 id.vars=c("Conpany","Name"), #要保留的主字段 variable.name="Year", #转换后的分类字段名称（维度） value.name="Sale" #转换后的度量值名称 ) 转换之后，长数据结构保留了原始宽数据中的Name、Conpany字段，同时将剩余的年度指标进行堆栈，转换为一个代表年度的类别维度和对应年度的指标。（即转换后，所有年度字段被降维化了）。 在tidyr包中的gather也可以非常快捷的完成宽转长的任务：123456data1&lt;-gather( data=mydata, #待转换的数据集名称 key="Year", #转换后的分类字段名称（维度） value="Sale" , #转换后的度量值名称 Sale2013:Sale2016 #选择将要被拉长的字段组合 ) #（可以使用x:y的格式选择连续列，也可以以-z的格式排除主字段） 而相对于数据宽转长而言，数据长转宽就显得不是很常用，因为长转宽是数据透视，这种透视过程可以通过汇总函数或者类数据透视表函数来完成。 但是既然数据长宽转换是成对的需求，自然有对应的长转宽函数。 数据塑型（长转宽）：reshape2中的dcast函数可以完成数据长转宽的需求：1234567dcast( data=data1, #数据集名称 Name+Conpany~Year #x1+x2+……~class #这一项是一个转换表达式，表达式左侧列 #出要保留的主字段（即不会被扩宽的字段，右侧则是要分割的分类变量，扩展之后的 #宽数据会增加若干列度量值，列数等于表达式右侧分类变量的类别个数 ） 除此之外，tidyr包中的spread函数在解决数据长转宽方面也是很好的一个选择。 spread：1234spread( data=data1, #带转换长数据框名称 key=Year, #带扩宽的类别变量（编程新增列名称） value=Sale) #带扩宽的度量值 （编程新增列度量值） 从以上代码的复杂度来看，reshape2内的两个函数melt\dcast和tidyr内的两个函数gather\spread相比，gather\spread这一对函数完胜，不愧是哈神的最新力作，tidyr内的两个函数所需参数少，逻辑上更好理解，自始至终都围绕着data，key、value三个参数来进行设定，而相对老旧的包reshape2内的melt\dcast函数在参数配置上就显得不是很友好，他是围绕着一直不变的主字段来进行设定的，tidyr包则围绕着转换过程中会变形的维度和度量来设定的。 接下来是Python中的数据塑性与长宽转换。 Python数据长宽转换：Python中我只讲两个函数： melt #数据宽转长 pivot_table #数据长转宽 Python中的Pandas包提供了与R语言中reshape2包内几乎同名的melt函数来对数据进行塑型（宽转长）操作，甚至连内部参数都保持了一致的风格。1234567891011import pandas as pdimport numpy as npmydata=pd.DataFrame(&#123;"Name":["苹果","谷歌","脸书","亚马逊","腾讯"],"Conpany":["Apple","Google","Facebook","Amozon","Tencent"],"Sale2013":[5000,3500,2300,2100,3100],"Sale2014":[5050,3800,2900,2500,3300],"Sale2015":[5050,3800,2900,2500,3300],"Sale2016":[5050,3800,2900,2500,3300] &#125;) 12345mydata1=mydata.melt(id_vars=["Name","Conpany"], #要保留的主字段var_name="Year", #拉长的分类变量value_name="Sale" #拉长的度量值名称 ) 除此之外，我了解到还可以通过stack、wide_to_long函数来进行宽转长，但是个人觉得melt函数比较直观一些，也与R语言中的数据宽转长用法一致，推荐使用。 奇怪的是我好像没有在pandas中找到对应melt的数据长转宽函数（R语言中都是成对出现的）。还在Python中提供了非常便捷的数据透视表操作函数，刚开始就已经说过是，长数据转宽数据就是数据透视的过程（自然宽转长就可以被称为逆透视咯，PowerBI也是这么称呼的）。 pandas中的数据透视表函数提供如同Excel原生透视表一样的使用体验，即行标签、列标签、度量值等操作，根据使用规则，行列主要操作维度指标，值主要操作度量指标。 那么以上长数据mydata1就可以通过这种方式实现透视。 12345mydata1.pivot_table(index=["Name","Conpany"], #行索引（可以使多个类别变量）columns=["Year"], #列索引（可以使多个类别变量）values=["Sale"] #值（一般是度量指标） ) 通常这种操作也可以借助堆栈函数来达到同样的目的。(但是使用stack\unstack需要额外设置多索引，灰常麻烦，所以不是很推荐，有兴趣可以查看pandas中的stack/unstack方法，这里不再赘述)。 综上所述，本文主要提供了R语言与Python中用于处理数据重塑（长宽转换的常用解决方案）。 语言 宽转长 长转宽 R语言 reshape2::melttidyr::gather reshape2::dcasttidyr::spread Python pandas-melt pandas-pivot_table备选方案——stack/unstack、wide_to_long 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>Python</tag>
        <tag>数据长宽转换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一篇全是代码的数据可视化案例]]></title>
    <url>%2F2017%2F06%2F30%2F%E4%B8%80%E7%AF%87%E5%85%A8%E6%98%AF%E4%BB%A3%E7%A0%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A1%88%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[实在没时间写文字步骤了，算了，就甩一篇代码给大家吧，这篇代码包含五张图，分别可以呈现放射状线路图、迁徙路径图、闭环路径图、菱形气泡图、方形气泡图。 加载包：12345678910library("plyr")library("dplyr")library("ggplot2")library("ggmap")library("maptools")library("maps")library("REmap")library("Cairo")library("baidumap")library(showtext) 中国地图1234567china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")x1 &lt;- china_map@data xs1 &lt;- data.frame(x1,id=seq(0:924)-1) china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1, xs1, type = "full") mydata1 &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata1, type="full") 数据准备：123456789101112131415city_list&lt;-c("西安","西宁","郑州","重庆","成都","石家庄","兰州","济南","大同","咸阳","包头")#address&lt;-get_geo_position(city_list)address&lt;-getCoordinate(city_list, formatted = T)address&lt;-data.frame(address,city=row.names(address),stringsAsFactors = FALSE)del&lt;-getCoordinate("长沙", formatted = T)del&lt;-as.character(del)lonx&lt;-as.numeric(rep(del[1],11))laty&lt;-as.numeric(rep(del[2],11))address&lt;-data.frame(address,lonx,laty)address$lonx&lt;-as.numeric(address$lonx)address$laty&lt;-as.numeric(address$laty)names(address)[1:2]&lt;-c("lon","lat")address$Num&lt;-round(runif(11,50,100),2) 放射路径气泡图：12345678910111213141516171819202122232425font.add("myfont", "msyhl.ttc")CairoPNG(file="C:/Users/Administrator/Desktop/航线图1.png",width=1000,height=670)showtext.begin()ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",size=0.2,colour="#D9D9D9")+geom_segment(data=address,aes(x=lon,y=lat,xend=lonx,yend=laty),size=0.3,colour="#FF6833")+geom_point(data=address,aes(x=lon,y=lat,size=Num),shape=21,fill="#ED7D31",col="#E02939",alpha=.6)+geom_point(data=NULL,aes(x=112.97935,y=28.21347),shape=21,size=8,fill=NA,col="steelblue")+guides(fill=FALSE)+coord_map("polyconic")+scale_size_area(max_size=8)+ theme( plot.background=element_rect(fill="#D0DEDE", color=NA), panel.spacing = unit(0,"lines"), plot.margin=unit(rep(0.2,4),"cm"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), #legend.position=c(0.8,0.3), legend.position="none" )showtext.end() dev.off() 迁徙路径气泡图12345678910city_list&lt;-c("海口","广州","长沙","武汉","郑州","石家庄","北京","沈阳","长春","哈尔滨")addA&lt;-getCoordinate(city_list, formatted = T)addA&lt;-data.frame(addA,city=row.names(addA),stringsAsFactors = FALSE)data1&lt;-addA[-1,]names(data1)[1:2]&lt;-c("lonx","latx")data2&lt;-addA[-length(row.names(addA)),]names(data2)[1:2]&lt;-c("lony","laty")addB&lt;-cbind(data2,data1)[,-3]addA$Num&lt;-round(runif(10,50,100),2)names(addA)[1:2]&lt;-c("lon","lat") 123456789101112131415161718192021222324font.add("myfont", "msyhl.ttc")CairoPNG(file="C:/Users/Administrator/Desktop/航线图2.png",width=1000,height=670)showtext.begin()ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",size=0.2,colour="#D9D9D9")+geom_segment(data=addB,aes(x=lonx,y=latx,xend=lony,yend=laty),size=0.3,colour="#FF6833")+geom_point(data=addA,aes(x=lon,y=lat,size=Num),shape=21,fill="#ED7D31",col="#E02939",alpha=.6)+guides(fill=FALSE)+coord_map("polyconic")+scale_size_area(max_size=8)+ theme( plot.background=element_rect(fill="#D0DEDE", color=NA), panel.spacing = unit(0,"lines"), plot.margin=unit(rep(0.2,4),"cm"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), #legend.position=c(0.8,0.3), legend.position="none" )showtext.end() dev.off() 闭环路径气泡图1234567891011city_list3&lt;-c("兰州","成都","重庆","贵阳","昆明","南宁","海口","广州","福州","上海","青岛","石家庄","呼和浩特","银川")addC&lt;-getCoordinate(city_list3, formatted = T)addC&lt;-data.frame(addC,city=row.names(addC),stringsAsFactors = FALSE)names(addC)[1:2]&lt;-c("lon","lat")datac1&lt;-addC[2:14,]datac2&lt;-addC[1,]addCC&lt;-rbind(datac1,datac2)adddata&lt;-cbind(addC,addCC)names(adddata)&lt;-c("lonx","latx","city","lony","laty","city")adddata&lt;-adddata[,-3]addC$Num&lt;-round(runif(14,50,100),2) 1234567891011121314151617181920212223CairoPNG(file="C:/Users/Administrator/Desktop/航线图3.png",width=1000,height=670)showtext.begin()ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",size=0.2,colour="#D9D9D9")+geom_segment(data=adddata,aes(x=lonx,y=latx,xend=lony,yend=laty),size=0.3,colour="#FF6833")+geom_point(data=addC,aes(x=lon,y=lat,size=Num),shape=21,fill="#ED7D31",col="#E02939",alpha=.6)+guides(fill=FALSE)+coord_map("polyconic")+scale_size_area(max_size=8)+ theme( plot.background=element_rect(fill="#D0DEDE", color=NA), panel.spacing = unit(0,"lines"), plot.margin=unit(rep(0.2,4),"cm"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), #legend.position=c(0.8,0.3), legend.position="none" )showtext.end() dev.off() 方形气泡图1234567891011121314151617181920212223CairoPNG(file="C:/Users/Administrator/Desktop/航线图4.png",width=1000,height=670)showtext.begin()ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",size=0.2,colour="#D9D9D9")+geom_point(data=address,aes(x=lon,y=lat,size=Num,fill=Num),shape=22,col="#E02939",alpha=.6)+guides(fill=FALSE)+scale_fill_gradient2(low="#8E0F2E", mid="#BFBEBE", high="#0E4E75", midpoint=median(na.omit(address$Num)))+coord_map("polyconic")+scale_size_area(max_size=8)+ theme( plot.background=element_rect(fill="#D0DEDE", color=NA), panel.spacing = unit(0,"lines"), plot.margin=unit(rep(0.2,4),"cm"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), #legend.position=c(0.8,0.3), legend.position="none" )showtext.end() dev.off() 菱形气泡图1234567891011121314151617181920212223CairoPNG(file="C:/Users/Administrator/Desktop/航线图5.png",width=1000,height=670)showtext.begin()ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",size=0.2,colour="#D9D9D9")+geom_point(data=address,aes(x=lon,y=lat,size=Num,fill=Num),shape=23,col="#E02939",alpha=.6)+guides(fill=FALSE)+scale_fill_gradient2(low="#8E0F2E", mid="#BFBEBE", high="#0E4E75", midpoint=median(na.omit(address$Num)))+coord_map("polyconic")+scale_size_area(max_size=8)+ theme( plot.background=element_rect(fill="#D0DEDE", color=NA), panel.spacing = unit(0,"lines"), plot.margin=unit(rep(0.2,4),"cm"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), #legend.position=c(0.8,0.3), legend.position="none" )showtext.end() dev.off() 以上所有图表的指标数据均为随机数虚构，图表的图形代码使用showtext和Cario进行高清渲染并自动输出，除了需加载的地图素材之外，其他代码均可一次性放在控制台流畅运行。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重要的是图表思维，而不是工具]]></title>
    <url>%2F2017%2F06%2F29%2F%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E5%9B%BE%E8%A1%A8%E6%80%9D%E7%BB%B4%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[很久没有作图了，主要是一时找不到应该练手的案例。 然后昨天逛网易数独栏目的数据新闻，看到一幅还不错的案例，对于我来说值得一试，然后就手痒给照葫芦画瓢弄出来了。（主要是其中涉及到的细节处理很麻烦） 当然过程是花了些时间的，主要是需要慢慢打磨其中的细节，需要利用很多技术来处理图形版面的交接位置。 令我感触最深的是，想要用ggplot2随心所欲的画图，ggplot2掌握的再熟练，也只是勉强过的了技术关，而图表背后的思维和结构更考验人，更具有挑战性。 好在我学习R语言之前，就已经利用Excel临摹了大量的高难度信息图，这一点可视化素养的积累，再结合对ggplot2勤加练习获得的图感，分分钟做出一副自己喜欢的作品，已经不在话下了。 数据准备：以下是该案例涉及到的扩展包：12345678910library("plyr")library("tidyr")library("ggthemes")library("sca")library("dplyr")library("showtext")library("Cairo")library("grid")font.add("myfont","msyh.ttc")font.add("myfzhzh","方正正粗黑简体.TTF") 我把该案例切割成了两部分来做： （实际上如果放在一个图里做也是可以实现的，无非是多写一些代码罢了，但是涉及到颜色标度重复的问题，一时半会儿找不到解决方案，为了更加逼真的还原案例效果，我决定分开来做）。 原图中的下半部分（条形图）（以下简称模块1） 上半部分（堆积柱形图+连接带）（以下简称模块2） 导入数据源：12tea_data&lt;-read.csv("D:/R/File/tea_data.csv",stringsAsFactors=FALSE,check.names=FALSE)tea_data$State[12]&lt;-"印度尼\n西亚" tea_bump是上半部分（模块2）中堆积柱形图的数据源，我没有使用传统的堆积柱形图去做，而是使用了矩形几何对象，所以数据源中需要指定X轴起始点，Y轴起始点。1234567891011tea_bump&lt;-na.omit(tea_data[,c("State","Yield","Ratio")])tea_bump&lt;-arrange(tea_bump,-Yield)other_Ratio&lt;-1-sum(tea_bump$Ratio)other_Yield&lt;-sum(tea_bump$Yield)/sum(tea_bump$Ratio)-sum(tea_bump$Yield)data1&lt;-data.frame(State="其他",Yield=other_Yield,Ratio=other_Ratio)tea_bump&lt;-rbind(tea_bump,data1)tea_bump$end&lt;-cumsum(tea_bump$Yield)tea_bump$start&lt;-c(0,tea_bump$end[1:nrow(tea_bump)-1])tea_bump$id&lt;-1:nrow(tea_bump)tea_bump&lt;-merge(tea_bump,tea_data[,c("State","Consum")],by="State",all.x=TRUE)tea_bump&lt;-arrange(tea_bump,-Yield) 以下是下半部分柱形图的数据源，同样我也没有使用普通的柱形图几何对象去做，而是使用了范围线图（geom_linerange），这样可以节省调整步骤，但须额外设置线的起始点。123456tea_bar&lt;-tea_data[,c("State","Consum")]tea_bar$id&lt;-1:nrow(tea_bar)colorpal&lt;-ifelse(tea_data$State %in% tea_bump$State,"#B4BFB4","#E5E5E5")library("ggplot2")library("showtext")library("Cairo") 底部柱形图对象：（因为需要拼图，所以图形对象要临时存储）12345678910111213141516p1&lt;-ggplot()+geom_hline(aes(yintercept=1:7*400),colour="grey",linetype=2)+geom_linerange(data=tea_bar,aes(x=id,ymin=max(tea_bar$Consum)-Consum,ymax=max(tea_bar$Consum),colour=Consum),size=24)+geom_point(data=tea_bar,aes(x=id,y=max(tea_bar$Consum)+165,fill=colorpal),shape=22,colour="white",size=37.5)+geom_text(data=tea_bar,aes(x=id,y=max(tea_bar$Consum)+165,label=State),size=6,family="myfont",vjust=.5)+geom_text(data=tea_bar,aes(x=id,y=max(tea_bar$Consum)-Consum+80,label=Consum),size=6,family="myfont",vjust=0.5,colour="white")+annotate("text",x =5,y=80,label="各国每年人均茶叶消费量（克）",family="myfzhzh",size=11,colour="#515551")+ylim(0,4800)+geom_linerange()+guides(fill=FALSE,colour=FALSE)+scale_colour_gradient(low="#A1C997",high="#47734A")+scale_fill_manual(values=c("#B4BFB4","#E5E5E5"))+theme_map(base_family="myfont") %+replace% theme( plot.margin=unit(c(0,1.5,0,1.5), "cm"), ) 以下数据是构造模块2辅助数据： （上半部分堆积柱形图的下侧连接带数据）的辅助数据，我打算使用多边形几何对象了来模拟那些参差交错的连接带。这就意味着我要找到每一条带子，即四边形的四个拐点坐标，并按顺序排列。） 如果你看的不是很懂，实属正常，这种笨拙的想法，我也不知道是从哪里学来的。12345tea_chord&lt;-data.frame(State=tea_data$State)tea_chord$id&lt;-1:nrow(tea_chord)tea_chord$mean&lt;-sum(tea_bump$Yield)/nrow(tea_chord)tea_chord$xend&lt;-cumsum(tea_chord$mean)tea_chord$xstart&lt;-c(0,tea_chord$xend[1:nrow(tea_chord)-1]) 1234567tea_chord_data&lt;-tea_chord[tea_chord$State %in% tea_bump$State,c("State","xstart","xend")]tea_chord_data&lt;-merge(tea_chord_data,tea_bump[tea_bump$State!="其他",c("State","start","end")],by="State")tea_chord_data&lt;-tea_chord_data[,c("State","start","end","xend","xstart")]tea_chord_newdata&lt;-data.frame(t(tea_chord_data),stringsAsFactors=FALSE)names(tea_chord_newdata)&lt;-tea_chord_data$State;tea_chord_newdata&lt;-tea_chord_newdata[-1,]rownames(tea_chord_newdata)&lt;-NULLtea_chord_newdata$order&lt;-1:nrow(tea_chord_newdata) 1234tea_chord_newdata_final&lt;-gather(tea_chord_newdata,State,long,-order)tea_chord_newdata_final$lat&lt;-5tea_chord_newdata_final$lat[tea_chord_newdata_final$order==3|tea_chord_newdata_final$order==4]&lt;--5tea_chord_newdata_final$long&lt;-as.numeric(tea_chord_newdata_final$long) 所以说上半部分的堆积柱形图（附加连接带）其实是用了两份不同的数据源模拟出来的。 模块2的可视化代码：（也需临时存储）1234567891011p2&lt;-ggplot()+geom_rect(data=tea_bump,aes(xmin=start,xmax=end,ymin=5,ymax=15,fill=Consum),colour="white")+geom_polygon(data=tea_chord_newdata_final,aes(x=long,y=lat,group=State),fill="#B1C6B0",colour=NA,size=.25,alpha=.8)+labs(title="全国茶叶年产量406.7（万吨）")+geom_text(data=tea_bump[tea_bump$State!="其他",],aes(x=start+5.5,y=13,label=round(Yield,1)),size=5.5,family="myfont",vjust=0.5,colour="white")+geom_text(data=tea_bump[tea_bump$State!="其他",],aes(x=start+6,y=7,label=percent(Ratio,d=1,sep="")),size=5.5,family="myfont",vjust=0.5,colour="white")+scale_fill_gradient(low="#A1C997",high="#47734A",na.value="#E5E5E5",guide=FALSE)+theme_map() %+replace% theme( plot.title=element_text(size=35,family="myfzhzh",hjust=.5) ) 图形合并最终效果：有了上下两部分的对象，剩下的就好办了，无非就是拼接起来嘛，但是拼接的过程相当考验人的耐性和毅力，不适合浮躁型的人来做。 12345678CairoPNG(file="E:/bump_bar.png",width=1550,height=1200)showtext.begin()vie&lt;-viewport(width=1,height=0.215,x=0.5,y=0.8)p1;print(p2,vp=vie)grid.text(label="全球茶叶消费排行榜\n喝茶最多的不是中国人",x=.80,y=.20,gp=gpar(col="black",fontsize=45,fontfamily="myfzhzh",draw=TRUE,just="right"))grid.text(label="数据来源：Euromonitor、国际茶叶委员会（ITC）",x=.80,y=.13,gp=gpar(col="black",fontsize=20,fontfamily="myfzhzh",draw=TRUE,just="right"))showtext.end()dev.off() 为了与原图对比，我使用PS修饰了一些细节： 做完回头想想，做这个图我也是真够无聊的，大概要耗费半天的时间去调试，不过调试的过程能学到的东西倒是很有趣，最近看了不起的匠人，感觉多少有些被感染到了，这算不算是强迫症~_~ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言数据处理——数据合并与追加]]></title>
    <url>%2F2017%2F06%2F28%2FR%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6%E4%B8%8E%E8%BF%BD%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[数据结构的塑造是数据可视化前重要的一环，虽说本公众号重心在于数据可视化，可是涉及到一些至关重要的数据整合技巧，还是有必要跟大家分享一下的。 在可视化前的数据处理技巧中，导入导出、长宽转换已经跟大家详细的介绍过了。 今天跟大大家分享数据集的合并与追加，并且这里根据所依赖函数的处理效率，给出诺干套解决方案。 本文主要内容：数据合并操作涉及以下几个问题： 横向合并； 是否需要匹配字段 匹配字段合并 主字段同名 主字段不同名 无需匹配字段合并 纵向合并：（情况比较简单，列字段数量相同，名称相同） 因为纵向合并情况比较简单，所以本篇讲解也着重以横向合并为主，按照以上几个问题，需要用到的函数列举如下： 1cbind rbind merge plyr::join tidyr:: inner_join/full_join/left_join/right_join 首先介绍base内置的两三个函数：1cbind rbind merge 横向追加（无需匹配字段）数据集构造如下：123456ID&lt;-c(1,2,3,4)Name&lt;-c("A","B","C","D")Score&lt;-c(60,70,80,90)Sex&lt;-c("M","F","M","M")One&lt;-data.frame(ID,Name)Two&lt;-data.frame(Score,Sex) 合并:1Total&lt;-cbind(One,Two) 可以看到cbind函数横向合并无需匹配主字段，仅仅是将两个数据集横向拼接在一起。 纵向合并:构造数据集：123456ID&lt;-c(1,2,3,4)Name&lt;-c("A","B","C","D")Student1&lt;-data.frame(ID,Name)ID&lt;-c(5,6,7,8)Name&lt;-c("E","F","G","H")Student2&lt;-data.frame(ID,Name) 合并： 1Total_student3&lt;-rbind(Student1,Student2) 以上通过rbind函数对Student1,Student2两个数据集进行纵向合并（也称追加）。 merge函数：merge函数主要针对横向（列字段）合并，而且可以针对主字段（主键）进行匹配，如果主字段名称不同，还可以指定前后相匹配的主字段。 基本语法如下： 1merge(x, y, by = , by.x = , by.y = , all = , all.x = , all.y = , sort = , suffixes = , incomparables = , ...) 具体参数解释如下： 接下来按照名相同与不同分两种情况介绍； 列名相同：123456ID&lt;-c(1,2,3,4)name&lt;-c("A","B","C","D")score&lt;-c(60,70,80,90)student1&lt;-data.frame(ID,name)student2&lt;-data.frame(ID,score)total_student1&lt;-merge(student1,student2,by="ID") 以上两个数据集有相同的列名（ID）时，by参数可以省略（by=”ID”） 以上两个数据集中，authors和books中有相同属性的主字段（surname&amp;name）但是主字段名称不同，这里需要给merge函数指定匹配的主字段。 横向合并的四种类型： 12345678#inner（内部链接）只合并交集m1 &lt;- merge(authors, books, by.x = "surname", by.y = "name")#left join（左连接）m2 &lt;- merge(authors, books, by.x = "surname", by.y = "name",all.x=TRUE)#right join（右连接）m3 &lt;- merge(authors, books, by.x = "surname", by.y = "name",all.y=TRUE)#all_join（外连接）m4 &lt;- merge(authors, books, by.x = "surname", by.y = "name",all=TRUE) plyr::join函数join函数源于plyr包（该包作者就是大名鼎鼎的Hadley Wickham，就是ggplot2的开发者，当然它开发的包还有很多），使用前需要加载： 以下是该函数语法：1join(x, y, by = NULL, type = "left", match = "all") 当两个数据集主字段有相同名称时，by参数可以省略（by=”name”）,当名称不同时，需指定左右两个数据集匹配的主字段名称。1join(x,y,by=intersect("Name","name"),type = "left") 以下我只演示相同主字段名称下的四种类型合并语句： 构造待合并数据集:12x&lt;-data.frame(name=c("John","Paul","George","Ringo","Stuart","Pete"),instrument=c("guitar","bass","guitar","drums","bass","drums"))y&lt;-data.frame(name=c("John","Paul","George","Ringo","Brian"),band=c("TRUE","TRUE","TRUE","TRUE","FALSE")) 12345678#left_joindata1&lt;-join(x,y,by="name",type = "left")#right_joindata2&lt;-join(x,y,by="name",type = "right")#inner_joindata3&lt;-join(x,y,by="name",type = "inner")#full_joindata4&lt;-join(x,y,by="name",type = "full") 合并函数与merge函数基本相同。 1dplyr::inner_join/full_join/left_join/right_join （告诉你一个不幸的消息，该包作者还是Hadley Wickham，没办法，一个赢者通吃的时代，谁让人家有才任性呢哈哈~_~） dplyr的数据合并语句要比plyr还要精练：12x&lt;-data.frame(Name=c("John","Paul","George","Ringo","Stuart","Pete"),instrument=c("guitar","bass","guitar","drums","bass","drums"))y&lt;-data.frame(name=c("John","Paul","George","Ringo","Brian"),band=c("TRUE","TRUE","TRUE","TRUE","FALSE")) 123456789101112#(1)inner_join(x, y) ：只包含同时出现在x,y表中的行data1&lt;-inner_join(x,y,by=c("Name"="name"))#(2)left_join(x, y) ：包含所有x中以及y中匹配的行data2&lt;-left_join(x,y,by=c("Name"="name"))#(3)right_join(x, y,by=c("Name"="name")) ：包含所有y中以及x中匹配的行data3&lt;-right_join(x,y,by=c("Name"="name"))#(4)full_join(x,y,by=c("Name"="name")) ：包含所以x、y中的行data4&lt;-full_join(x,y,by=c("Name"="name"))#(5)semi_join(x, y) ：包含x中，在y中有匹配的行，结果为x的子集data5&lt;-semi_join(x,y,by=c("Name"="name"))#(6)anti_join(x, y) ：包含x中，不匹配y的行，结果为x的子集，与semi_join相反data6&lt;-anti_join(x,y) 以上连接类型中，前四个（内连接、外连接、左连接、右连接）最为常用，大家可以将dplyr和plyr以及merge函数三种连接方式进行对比记忆。 下面聊一列为啥要专门讲一节数据连接方式： 因为…… 在excel中…… 这种数据连接真的……真的……真的……太费劲了 我所知道的连接方式—— 第一：手动复制黏贴；（大家不要随便作死） 第二：最古老的Microsoft Query（藏在excel数据导入菜单的最底层，据说微软也不更新了，如果的excel是精简版的，可能都没法调用，菜单特丑） 第三：数据透视表；Alt+D+P（为啥微软要把调用数据透视表多表合并的菜单隐藏起来只能用快捷键，太烦人了） 第四：微软的最新商务智能应用——PowerBI(其中的PowerQuery、PowerPivot) 第五：第三方的效率插件（很多VBA大神写过这些办公插件，但是我就不爱用，多装一个，Excel启动拖后两秒钟，时间就是金钱啊你说是不） 以上四种方式（第一种除外），虽说都可以完成数据合并操作，但是效率上不敢恭维，每次都得走一遍菜单流程。如果有点R语言基础的同学，强烈建议将这些操作放在R中操作，数据导入导出、长宽转换、横纵合并，只需修改一下代码路径、参数分分钟搞定。 当然对于有数据库基础的同学(相信大部分同学都有吧，应该是大学本科的必修课)来讲，写几个SQL也可以瞬间完成。 虽然已经N多年没有用过了，但是还是想在这里献丑一下： 1234567891011内连接 inner join语法：select * from x inner join y on x.Name =y.name左连接 left join（左表中所有数据，右表中对应数据）语法：select * from x left join y on x.Name = y.name右连接 right join（右表中所有数据，左表中对应数据）语法：select * from x right join y on x.Name = y.name全连接 full join语法：select * from x full join y on x.Name = y.name 我是一个比较懒、嫌麻烦但注重效率的人，很多关于数据处理上的需求，如果能用简单的方式解决（比如VBA、R或者效率函数）,我都不会去选择安装插件或者外部软件，一方面太浪费时间，操作麻烦；另一方面，使用插件大多需要用菜单点选，以后遇到同样的需要还得从新走一遍流程，所以我更倾向用简单的可重复利用的代码来解决。 简单、省事儿、快捷、可重复…… 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据清洗</tag>
        <tag>数据合并与追加</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左手用R右手Python系列——数据合并与追加]]></title>
    <url>%2F2017%2F06%2F27%2F%E5%B7%A6%E6%89%8B%E7%94%A8R%E5%8F%B3%E6%89%8BPython%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6%E4%B8%8E%E8%BF%BD%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[今天这篇跟大家介绍R语言与Python数据处理中的第二个小知识点——数据合并与追加。 主要内容：针对数据合并与追加，R与Python中都有对应的函数可以快速完成需求，根据合并与追加的使用场景，这里我将本文内容分成三部分： 数据合并（简单合并，无需匹配） 数据合并（匹配合并） 数据追加 数据合并（简单合并，无需匹配）针对简单合并而言，在R语言中主要通过以下两个函数来实现： cbind() dplyr::bind_cols()1234567891011121314151617df1 &lt;- data.frame(A=c('A0', 'A1', 'A2', 'A3'), B= c('B0', 'B1', 'B2', 'B3'), C= c('C0', 'C1', 'C2', 'C3'), D=c('D0', 'D1', 'D2', 'D3') )df2 &lt;- data.frame(E=c('A4', 'A5', 'A6', 'A7'), F= c('B4', 'B5', 'B6', 'B7'), G=c('C4', 'C5', 'C6', 'C7'), H= c('D4', 'D5', 'D6', 'D7'))df3 &lt;-data.frame(I=c('A8', 'A9', 'A10', 'A11'), J= c('B8', 'B9', 'B10', 'B11'), K=c('C8', 'C9', 'C10', 'C11'), L=c('D8', 'D9', 'D10', 'D11') )df1;df2;df3mydata1&lt;-cbind(df1,df2,df3);mydata1mydata2&lt;-dplyr::bind_cols(df1,df2,df3);mydata1 在Python中，简单的合并可以通过Pandas中的concat函数来实现的。 12345678910111213141516df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']&#125;, index=[0, 1, 2, 3])df2 = pd.DataFrame(&#123;'E': ['A4', 'A5', 'A6', 'A7'], 'F': ['B4', 'B5', 'B6', 'B7'], 'G': ['C4', 'C5', 'C6', 'C7'], 'H': ['D4', 'D5', 'D6', 'D7']&#125;, index=[0, 1, 2, 3])df3 = pd.DataFrame(&#123;'I': ['A8', 'A9', 'A10', 'A11'], 'J': ['B8', 'B9', 'B10', 'B11'], 'K': ['C8', 'C9', 'C10', 'C11'], 'L': ['D8', 'D9', 'D10', 'D11']&#125;, index=[0, 1, 2, 3])result1 = pd.concat([df1,df2,df3],axis=1,join_axes=[df1.index]) 横向合并：（需匹配）在R语言中，这种操作有很多可选方案，如基础函数merge、plyr包中的join函数以及dplyr包中的left/right/inter/full_join等函数。 merge plyr::join dplyr::left/right/inter/full_join 这里为了节省时间，只介绍第一种基础函数，欲了解详情，可以查看这篇历史文章： R语言数据处理——数据合并与追加 123456789101112131415161718192021merge(x, y, #带合并的数据集名称（左右顺序） by = intersect(names(x), names(y)), #合并依据字段（名称相同） by.x = by, #名称不同时需同时时声明 by.y = by, #名称不同时需同时时声明 all = FALSE,#合并类型，TRUE为全连接 （full），FALSE为内连接 （inter） all.x = all,#左连接 all.y = all,#右连接 )``` ```r df3&lt;-data.frame(id=c(1001,1002,1003,1004,1005,1006,1007,1008),gender=c('male','female','male','female','male','female','male','female'),pay=c('Y','N','Y','Y','N','Y','N','Y'),m_point=c(10,12,20,40,40,40,30,20))df4&lt;-data.frame(id=c(1001,1002,1003,1004,1005,1006),city=c('Beijing ', 'Shenzhen','Guangzhou', 'Shenzhen', 'Shanghai','Beijing'),age=c(23,44,54,32,34,32),category=c('100-A','100-B','110-A','110-C','210-A','130-F'),price=c(1200,2900,2133,5433,1346,4432))print(df3);print(df4) 1234mydata3&lt;-merge(df3,df4,by="id",all=TRUE);print(mydata3)mydata3&lt;-merge(df3,df4,by="id",all=FALSE);print(mydata3)mydata3&lt;-merge(df3,df4,by="id",all.x=TRUE);print(mydata3)mydata3&lt;-merge(df3,df4,by="id",all.y=TRUE);print(mydata3) 在Python中，这一操作也可以通过函数Pandas库中的cancat函数或者merge函数来完成。 Pandas-merge 12345678910111213df3=pd.DataFrame(&#123;"id":[1001,1002,1003,1004,1005,1006,1007,1008],"gender":['male','female','male','female','male','female','male','female'],"pay":['Y','N','Y','Y','N','Y','N','Y'],"m-point":[10,12,20,40,40,40,30,20]&#125;)df4= pd.DataFrame(&#123;"id":[1001,1002,1003,1004,1005,1006],"date":pd.date_range('20130102',periods=6),"city":['Beijing', 'Shenzhen','Guangzhou','Shenzhen','Shanghai','Beijing'],"age":[23,44,54,32,34,32],"category":['100-A','100-B','110-A','110-C','210-A','130-F'],"price":[1200,np.nan,2133,5433,np.nan,4432]&#125;,columns =['id','date','city','category','age','price'])print(df3);print(df4) 1234df_inner=pd.merge(df3,df4,how='inner');print(df_inner) #数据表合并（内连接：inter join）df_left=pd.merge(df3,df4, how='left') ;print(df_left) #数据表合并（左连接：left join）df_right=pd.merge(df3,df4,how='right');print(df_right) #数据表合并（右连接:right join）df_outer=pd.merge(df3,df4,how='outer');print(df_outer) #数据表合并（全连接:full join） 数据追加：数据追加通常只需保证数据及的宽度一致且列字段名称一致，相对来说比较简单。在R语言和Python中，也很好实现。 在R语言中，可视化朱数据追加的函数有： rbind() dplyr::bind_rows() 12mydata3&lt;-rbind(df1,df2,df3);mydata3mydata4&lt;-dplyr::bind_rows(df1,df2,df3);mydata4 python中则可以很容易的通过数据框本身的append函数来实现简单的数据追加： 1234567891011121314151617df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']&#125;, index=[0, 1, 2, 3])df2 = pd.DataFrame(&#123;'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7'], 'C': ['C4', 'C5', 'C6', 'C7'], 'D': ['D4', 'D5', 'D6', 'D7']&#125;, index=[4,5,6,7])df3 = pd.DataFrame(&#123;'A': ['A8', 'A9', 'A10', 'A11'], 'B': ['B8', 'B9', 'B10', 'B11'], 'C': ['C8', 'C9', 'C10', 'C11'], 'D': ['D8', 'D9', 'D10', 'D11']&#125;, index=[8, 9,10,11])result = df1.append(df2);print(result)result = result.append(df3);print(result) 如果是使用canat函数也可以非常轻松的完成数据追加：1result = pd.concat([df1, df2, df3]);print(result) 本文汇总： 工具 数据合并（简单合并） 数据合并（匹配和并） 数据追加： R： cbinddplyr::bind_cols mergeplyr::joindplyr::left/right/inter/full_join rbinddplyr::bind_rows Python: Pandas-cancat mergecancat appendcancat 以上仅是个人常用的几种，方法肯定不至于此，欢迎大家补充！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据合并与追加</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用R语言复盘美国总统大选结果~]]></title>
    <url>%2F2017%2F06%2F25%2F%E7%94%A8R%E8%AF%AD%E8%A8%80%E5%A4%8D%E7%9B%98%E7%BE%8E%E5%9B%BD%E6%80%BB%E7%BB%9F%E5%A4%A7%E9%80%89%E7%BB%93%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[这两天各种社交媒体都被美国大选的消息刷屏，各种段子满天飞，把平时不怎么关注政治的小编都吸引了。 美国大选的投票数据，给小编的写作提供了非常宝贵的案例数据，毕竟四年才一次哦，这次一定不能放过。 接下来我们用R语言来复盘一下，昨日投票结果吧。 主要内容：本文将从以下几个方面全方位展示大选的形势： 克林顿与希拉里的选举人票结果及其占比； 二者的获胜州分布情况、各自在各州的支持率； 不同群体及阶层的支持率。 以上可视化图形均为R语言制作，在讲解过程中会共享代码; 加载扩展包：12345678library("ggplot2")library("RColorBrewer")library("maps")library("mapdata")library("maptools")library("plyr")library("Cairo")library("reshape2") 克林顿与希拉里的选举人票:二者的选举人票结果12345678910111213141516data&lt;-data.frame(x=c("Trump","Clinton"),y=c(290,232))ggplot(data,aes(x,y,fill=x))+ geom_bar(stat="identity",width=0.7)+ geom_text(aes(label=y,vjust=-0.5,hjust=0.5))+ ggtitle("presidential results")+ scale_fill_manual(values=c("#FF5252","#2196F3"))+theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.line.x = element_line(), axis.title = element_blank(), plot.title=element_text(size=25), legend.position = "none" ) ! 两者普选支持人数对比*12data1&lt;-data.frame(x=c("Trump","Clinton"),y=c(59698506,59926386))p %+% data1 #给上图代码赋值为p,使用通道函数%+%简化代码 ! 两者选举人票得票比例12345678910111213141516171819data3&lt;-data.frame(x=c("Trump","Clinton"),y=c(43,54))mydata &lt;- transform(data3, mid_y = ave(data3$y,data3$x, FUN = function(val) cumsum(val) - (0.5 * val)))ggplot(mydata,aes(x=1,y=y,fill=x))+geom_bar(stat="identity",col="white")+coord_polar(theta="y",start=0,direction=1) +geom_text(aes(label=paste(y,"%",sep="")),vjust=-0.5,hjust=0.5,size=10,color="white")+ggtitle("presidential results")+guides(fill=guide_legend(reverse=TRUE))+scale_fill_manual(values=c("#FF5252","#2196F3"))+theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.line.x = element_line(), axis.ticks.y = element_blank(), axis.title = element_blank(), plot.title=element_text(size=25), legend.position = "none" ) 二者的获胜州分布情况、各州的支持率；数据准备：123456American_map &lt;-readShapePoly("C:/rstudy/USA_map/STATES.SHP")AD1 &lt;- American_map@dataAD2 &lt;- data.frame(id=rownames(AD1),AD1)American_map1 &lt;- fortify(American_map)American_map_data &lt;- join(American_map1,AD2, type = "full")American_map_data&lt;-American_map_data[,1:12] 提取各州数据集：123mydata&lt;-data.frame(STATE_NAME=unique(American_map_data$STATE_NAME),STATE_ABBR=unique(American_map_data$STATE_ABBR))write.table (mydata, file ="D:\\R\\File\\President.csv", sep =",", row.names =FALSE)newdata&lt;-read.csv("D:\\R\\File\\President.csv") 分离大陆与夏威夷、阿拉斯加：123data1&lt;-subset(American_map_data,STATE_NAME!='Alaska'&amp; STATE_NAME!='Hawaii') data2&lt;-subset(American_map_data,STATE_NAME=="Hawaii") data3&lt;-subset(American_map_data,STATE_NAME=="Alaska") 更改阿拉斯加与夏威夷坐标并合并：1234data2$long&lt;-data2$long+65data3$long&lt;-data3$long+40data3$lat&lt;-data3$lat-42data4&lt;-rbind(data1,data2,data3) 合并地理信息数据与选举数据：1American_data &lt;- join(data4, newdata, type="full") 提取各州中心经纬度指标：123midpos &lt;- function(AD1)&#123;mean(range(AD1,na.rm=TRUE))&#125; centres &lt;- ddply(American_data,.(STATE_ABBR),colwise(midpos,.(long,lat)))mynewdata&lt;-join(centres,newdata,type="full") 美国总统大选的各州选举人票数分布：1234567891011121314ggplot()+ geom_polygon(data=American_data,aes(x=long,y=lat,group=group),colour="grey",fill="white")+ geom_point(data=mynewdata,aes(x=long,y=lat,size=Count,fill=Count),shape=21,colour="black")+ scale_size_area(max_size=10)+ scale_fill_gradient(low="white",high="#D73434")+ coord_map("polyconic") + theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position ="none" ) 美国总统大选投票结果双方获胜州分布情况：12345678910111213ggplot(American_data,aes(x=long,y=lat,group=group,fill=Results))+ geom_polygon(colour="white")+ scale_fill_manual(values=c("#19609F","#CB1C2A"),labels=c("Hillary", "Trump"))+ coord_map("polyconic") + guides(fill=guide_legend(title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position ="top" ) 希拉里各州选票支持率统计；12345678910111213141516qa &lt;- quantile(na.omit(American_data$Clinton), c(0,0.2,0.4,0.6,0.8,1.0))American_data$Clinton_q&lt;-cut(American_data$Clinton,qa,labels = c("0-20%", "20-40%","40-60%","60-80%", "80-100%"),include.lowest = TRUE)ggplot(American_data,aes(long,lat,group=group,fill=Clinton_q))+ geom_polygon(colour="white")+ scale_fill_brewer(palette="Blues")+ coord_map("polyconic") + guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.18,0.75), legend.text.align=1 ) 川普各州选票支持率统计；12345678910111213141516qb &lt;- quantile(na.omit(American_data$Trump), c(0,0.2,0.4,0.6,0.8,1.0))American_data$Trump_q&lt;-cut(American_data$Trump,qb,labels = c("0-20%", "20-40%","40-60%","60-80%", "80-100%"),include.lowest = TRUE)ggplot(American_data,aes(long,lat,group=group,fill=Trump_q))+ geom_polygon(colour="white")+ scale_fill_brewer(palette="Reds")+ coord_map("polyconic") + guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.18,0.75), legend.text.align=1 ) 多维度统计二者支持率;性别分布12345678910111213141516gender&lt;-data.frame(gender=c("male","female"),clinton=c(41,54),trump=c(53,42))genderA&lt;-melt(gender,id.vars="gender",variable.name="Name",value.name="level")ggplot(genderA,aes(gender,level,fill=Name))+geom_bar(stat="identity",width=0.7)+geom_text(aes(label=level,vjust=5,hjust=0.5),position="stack",size=10,col="white",fontface="bold")+scale_fill_manual(values=c("#2196F3","#FF5252"))+guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 从性别上来看，男性支持川普的多一点，女性支持希拉里的多一点，这应该算是性别效应吧~ 年龄分布统计；12345678910111213141516age&lt;-data.frame(age=c("18~29","30~44","45~64","64~"),clinton=c(55,50,44,45),trump=c(37,42,53,53))ageA&lt;-melt(age,id.vars="age",variable.name="Name",value.name="level")ggplot(ageA,aes(age,level,fill=Name))+geom_bar(stat="identity",width=0.95)+geom_text(aes(label=level,vjust=5,hjust=0.5),position="stack",size=10,col="white",fontface="bold")+ scale_fill_manual(values=c("#2196F3","#FF5252"))+ guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 这个年龄段分布的也是相当有规律啊，川普大叔很得中老年选民的亲来，而希拉里阿姨则俘获了青少年的心。 种族分布统计；12345678910111213141516race&lt;-data.frame(race=c("white","black","latino","asian","other"),clinton=c(37,88,65,65,56),trump=c(58,8,29,29,37))raceA&lt;-melt(race,id.vars="race",variable.name="Name",value.name="level")ggplot(raceA,aes(race,level,fill=Name))+ geom_bar(stat="identity",width=0.95)+ geom_text(aes(label=level,vjust=5,hjust=0.5),position="stack",size=10,col="white")+ scale_fill_manual(values=c("#2196F3","#FF5252"))+ guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 从种族上来看，希拉里在black、latino、asian以及其他种族中占据绝对优势，川普则把控着white的选票。 选民受教育水平分布统计；12345678910111213141516educ&lt;-data.frame(educ=c("high","some","college","post"),clinton=c(45,43,49,58),trump=c(51,52,45,37))educA&lt;-melt(educ,id.vars="educ",variable.name="Name",value.name="level")ggplot(educA,aes(educ,level,fill=Name))+geom_bar(stat="identity",width=0.95)+ geom_text(aes(label=level,vjust=5,hjust=0.5),position="stack",size=10,col="white")+ scale_fill_manual(values=c("#2196F3","#FF5252"))+ scale_x_discrete(limits=c("high","some","college","post"))+ guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 从受教育水平看，希拉里阿姨的选民受教育水平相对较高（单也非绝对，因为这里是CNN做的抽样调查，样本只有24537个，范围较小，并不代表实际情况）。 选民收入分布统计；12345678910111213141516Inco&lt;-data.frame(inco=c("under $100K","above $100K"),clinton=c(49,47),trump=c(45,48))IncoA&lt;-melt(Inco,id.vars="inco",variable.name="Name",value.name="level")ggplot(IncoA,aes(inco,level,fill=Name))+geom_bar(stat="identity",position="dodge")+ geom_text(aes(label=level,vjust=5,hjust=0.5),position=position_dodge(width=0.9),size=10,col="white")+scale_fill_manual(values=c("#2196F3","#FF5252"))+scale_x_discrete(limits=c("under $100K","above $100K"))+guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 选民政治倾向分布；1234567891011121314151617Ideo&lt;-data.frame(ideo=c("liberal","moderate","conservative"),clinton=c(84,52,15),trump=c(10,41,81))IncoA&lt;-melt(Ideo,id.vars="ideo",variable.name="Name",value.name="level")ggplot(IncoA,aes(ideo,level,fill=Name))+geom_bar(stat="identity",position="dodge")+geom_text(aes(label=level,vjust=5,hjust=0.5),position=position_dodge(width=0.9),size=10,col="white")+ scale_fill_manual(values=c("#2196F3","#FF5252"))+ scale_x_discrete(limits=c("liberal","moderate","conservative"))+ guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 上图还是比较能反映两党的政治主张的。 选民的婚姻状况统计分布；1234567891011121314151617Marl&lt;-data.frame(marry=c("married men","married women","unmarried men","unmarried women"),clinton=c(37,49,46,62),trump=c(58,47,45,33))MarlA&lt;-melt(Marl,id.vars="marry",variable.name="Name",value.name="level")ggplot(MarlA,aes(marry,level,fill=Name))+geom_bar(stat="identity",position="dodge")+geom_text(aes(label=level,vjust=5,hjust=0.5),position=position_dodge(width=0.9),size=10,col="white")+scale_fill_manual(values=c("#2196F3","#FF5252"))+scale_x_discrete(limits=c("married men","married women","unmarried men","unmarried women"))+guides(fill=guide_legend(title=NULL))+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.line.x = element_line(), axis.title = element_blank() ) 川普在已婚男性选民群体中的支持率有明显优势，而希拉里在未婚女性选民群体中优势明显。 宗教信仰分布统计；123456789101112131415161718Rellglon&lt;-data.frame(rell=c("protestant","catholic","mormon","orther christian","jewish","other religon","no religion"),clinton=c(37,45,25,43,71,58,68),trump=c(60,52,61,55,24,33,26))RellglonA&lt;-melt(Rellglon,id.vars="rell",variable.name="Name",value.name="level")ggplot(RellglonA,aes(rell,level,fill=Name))+ geom_bar(stat="identity",width=1,col="white")+ scale_fill_manual(values=c("#2196F3","#FF5252"))+ scale_x_discrete(limits=c("protestant","catholic","mormon","orther christian","jewish","other religon","no religion"))+ ylim(-20,100)+ guides(fill=guide_legend(title=NULL))+ coord_polar(theta="x",start=0,direction=1) + facet_grid(.~Name)+theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks.length=unit(0.5,'cm'), axis.ticks.y = element_blank(), axis.ticks.x = element_line(), axis.title = element_blank() ) 本文数据来源于CNN官网： 因为数据多源于小范围问卷调查（选票数据除外），限于样本范围和地域局限性，结果可能有偏颇。 文中所需的地图数据及代码文本分享在魔方 学院QQ群中： 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——用ggplot构造期待已久的雷达图]]></title>
    <url>%2F2017%2F06%2F24%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E7%94%A8ggplot%E6%9E%84%E9%80%A0%E6%9C%9F%E5%BE%85%E5%B7%B2%E4%B9%85%E7%9A%84%E9%9B%B7%E8%BE%BE%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[之前一直苦恼于ggplot函数无法制作雷达图，心想着既然饼图可以通过柱形图+极坐标模拟出来，为啥雷达图不行。 制作雷达图的传统思路：我尝试着用折线图+极坐标来模拟雷达图（之前在制作饼图和圆环图以及玫瑰图的时候就是这样做的）。 结果就粗线了以下不伦不类的图形：12data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))mydata&lt;-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale") 1ggplot(mydata,aes(Company,Sale,group=Year,color=Year))+geom_line()+coord_polar(theta = "x") 虽说效果已经很接近了，但是整体上还是无法达到雷达图的要求，首尾线条没有相连，点之间是通过弧线链接而非直线。 后来又是在浏览r语言论坛时，无意间看到一个围绕ggplot2包开发的插件——ggradar，果不其然，是专门用于辅助ggplot2制作雷达图而生的。 接下来我跟大家分享该插件的使用方法： 数据构造:因为是开发版的，托管在github网站上，所以不能通过普通途径下载，需要使用devtools工具：123install_github("ricardo-bion/ggradar")library("ggplot2")library("ggradar") 下面开始构造数据集：1mydata&lt;-matrix(runif(40,0,1),5,8) #以上构造了一个值区间为0~1,个数为40的5行8列随机数矩阵。 1rownames(mydata) &lt;- LETTERS[1:5] #以上使用前五个大写字母为矩阵行命名； 1colnames(mydata) &lt;- c("Apple","Google","Facebook","Amozon","Tencent","Alibaba","Baidu","Twitter") 12#使用以上文本向量为矩阵列命名；mynewdata&lt;-data.frame(mydata) 将矩阵数据表格转化为数据框格式作图数据： 123#为数据框增加一列文本字段：Name&lt;-c("USA","CHN","UK","RUS","JP")mynewdata&lt;-data.frame(Name,mynewdata) ggradar包：1ggradar(mynewdata[1,]) 以上的图表是默认样式，ggradar函数对数据格式以及变量值范围高度敏感，而却不过多的依赖函数内的参数。 1ggradar(mynewdata) 可以看出，ggradar函数支持多序列雷达图，只是对它规定的数据结构很不能理解，为啥不是列代表分类，行代表轴变量呢，跟ggplot的语法还是有一些偏离，不过只要数据构造好之后，作图函数的语法是相当简练的。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>ggradar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[左手用R右手Python系列——字符串格式化输出]]></title>
    <url>%2F2017%2F06%2F24%2F%E5%B7%A6%E6%89%8B%E7%94%A8R%E5%8F%B3%E6%89%8BPython%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[学习Python不到一个月，虽然学的很渣，但是还是想通过这种途径分享自己的学习心得，毕竟当初学习R语言也是这么走过来的。 今天是R语言与Python综合系列的第一篇，就聊一聊两者在常用字符串输出上的差异。 R语言中的字符串格式化函数：为了方便统一案例图片的风格，今天统一在jupyter编辑器中编辑（R和Python）。 通常在R语言中我们使用最多的关于字符串输出函数是paste和paste0。 这两着之间的差别非常微小，如同其字面意思一样，前者可以自定义字符串间隔符号，后者则默认没有间隔符号。 paste和paste0都可以完成单个向量字符串的连接以及两个向量间的匹配。 生成10个随机大写字母作为案例： 1myword&lt;-sample(LETTERS,10,replace=FALSE) 我们可以打印出两个函数的详细参数表：123456pastefunction (..., sep = " ", collapse = NULL) #sep参数默认间隔为空格.Internal(paste(list(...), sep, collapse))paste0function (..., collapse = NULL) #sep没有间隔参数（无间隔）.Internal(paste0(list(...), collapse)) 单个向量的连接成字符串：12paste(myword,collapse="-")'Q-C-X-B-M-I-E-P-G-V' 在拼接单个向量之时，通过设置collapse参数来控制字符之间的间隔符，最终输出一个单值字符串。12paste0(myword,collapse="-")'Q-C-X-B-M-I-E-P-G-V' 我们可以看到，在拼接单个向量为字符串的过程中，paste和paste0两个函数并无太大区别，因为不涉及匹配参数sep。 通常情况下，我们使用paste和paste0做向量间的匹配情况比较多，这种情况多见于遍历网页，遍历日期等。 比如假如我们们要遍历一个网页的网址如下： 随机打开了网易云课堂的一个课程栏目，看到一共有22页课程，此时最简单的遍历网页方法就是通过paste或者paste0。 网易云课堂 1234url&lt;-"http://study.163.com/category/400000000146050#/?p="num&lt;-1:22myurl&lt;-paste(url,num,sep="");myurlmyurl&lt;-paste0(url,num);myurl 对比两个函数的用法，大家应该能领会其中的差别了吧，paste0把paste的sep参数简化了，直接强制设定为无间隔，此时做向量间匹配的话，paste0函数就可以不用设置sep参数，而paste则需设置，当然虽然在遍历网页时确实节省代码，但也不是任何场合都是如此。 比如我要拼接时间与日期，而且要求以“-”间隔，此时你还是需要使用传统的paste函数来完成这个任务，因为paste0已经不存在sep参数了。 1mydate&lt;-paste(2001:2005,"06",sep="-");mydate 还有一个stringr包中字符串拼接函数str_sub()也可以高效的完成上述工作，但是因为需要额外加载包，所以平时我用的频率不高。123library(stringr)str_c(myword,collapse ="")str_c(url,num,sep = "") 在R语言中，字符串格式化输出除了以上常见操作之外，还有一些非常重要的需求，比如格式化输出百分比，格式化输出日期时间等。 以百分比为例： 我们可以通过一些扩展包内提供的百分比构造函数来高效的完成百分比构造过程。12345library(sca)library(dplyr)percent(seq(0,0.1,0.01),d=2,sep="") #其中的参数控制百分比输出的小数点后位数。library(scales)percent(runif(10,0,1)) #percent函数说明了目前没法看到如何控制小数点显式位数。 接下来跟大家介绍一个重量级的函数——sprintf。此函数据说来头不小。（据说继承自C/C++）,该函数的使用可以大大简化字符串格式化输出的操作流程。 %d 整数 %02d d代表整数；2代表长度；0代表不足长度用0补齐 %f 浮点数 %4.2f 第一个数字代表总位数；第二个数字代表小数点位数 %s 字符串 %% 百分比 该函数的参数远不止这三个，太多我也记不住，而且平时使用频率最高的也就这三个，所以秉着投入回报率最高的原则，建议大家用什么记什么。 所以以上百分比过程便只剩下这么几个代码： 123456sprintf("%d%%",1:10) #遍历百分比sprintf("%d-%d-%02d",2001,12,1:30) #遍历日期：sprintf("有%.1f%%的人评价变形金刚5较差",30.7)'有30.7%的人评价变形金刚5较差' sprintf("%s是阿里巴巴的%s","马云","老板")'马云是阿里巴巴的老板' 当然，以上过程完全可以通过paste和str_c函数完成，只是sprintf函数来写这些东西看起来更优化，更有逼格。 好了重于轮到Python了，对于一个小菜鸟来说，第一次写Pyhon的教程心情很忐忑，注意了下面要换编辑器了（虽然仍然使用的jupter里）。 Pyhton字符串格式化输出函数:Pyhton中的字符串格式化输出大概有两套比较完善的系统（我所知的）。 格式化符号：%s/d/f…… .format模式 其实第一套系统应该也是源于C/C++(感觉跟R里面的格式化符号规则是一致的) 1print("I'm %s. I'm %d year old" % ('raindu',26)) 以上使用print函数输出了宝宝的大名和芳龄~_~,python中的字符串格式符规则是，在要输出的主句中对应位置插入格式符，在句尾之后使用 % 连接一个元组，元组内提供主句所有的待格式化的字符串，有几个需要格式化的字符串就需要在元组中提供几个字符串对象，而且顺序一定要与待格式化的字符串在主句的位置一一对应。 另一种方式可以使用字典进行字符传递。 1print("I'm %(name)s. I'm %(age)d year old" % &#123;'age':26,'name':'raindu'&#125;) 这种方式最大的好处就是，以命名参数的形式传入，这样可以不用考虑字典内的键值对顺序。（因为有名字可以索引） Python中的字符串格式化符号相对于R规定的更加严格、细致，上述所述R中的字符串：%s、数值%d、浮点型%f是通用的。 除此之外，格式化符号内部还可以提供更为详尽的格式控制。 12345%[(name)][flags][width].[precision]typecode(name)为名称flags可以有+,-,' '或0。+表示右对齐。-表示左对齐。' '为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。0表示使用0填充。width表示显示宽度precision表示小数点后精度 但是发现网上关于Python教程中，使用最多的还是.format这种字符串输出形式。 format 函数： 1234567'&#123;2&#125;,&#123;1&#125;,&#123;0&#125;'.format("小伟","大伟","小三")'小三,大伟,小伟''&#123;1&#125;和&#123;0&#125;是一对&#123;2&#125;'.format("大伟","小伟","基友")'小伟和大伟是一对基友' 这种传参的方式可以看做是位置参数（顺序），即在要输出的主句中插入末尾提供的对应字符串位置，即可完成格式化过程。 如果你不想在主句对应的花括号内写位置参数，你必须保证末尾提供的字符串顺序与主句对应要插入的位置保持一致。 1'&#123;&#125;和&#123;&#125;是一对好&#123;&#125;'.format("大伟","小伟","基友") 当然，你也可以在format括号内内对字符串进行命名，然后将对应名字传入主句对应花括号内部。 1"I'm &#123;name&#125;. I'm &#123;age&#125; year old".format(age=26,name='raindu') 这种情况下你也不必考虑format括号内的字符串对应顺序，因为所有的字符串都有名称，只传入名称，函数即可自动完成索引配对。 使用以上两种方式都可以方便的遍历网页： 1url="http://study.163.com/category/400000000146050#/?p=" 12345myurl1=[]for i in range(1,23): urlm=url+'%d' % i myurl1.append(urlm) print(urlm) 12345myurl1=[]for i in range(1,23): urlm=url+'&#123;&#125;'.format(i) myurl1.append(urlm) print(urlm) 好了今天就这样了，要同时贯穿两门语言真的不是一件容易的事情，长路漫漫以后日子要苦逼了。 本章汇总：R语言字符串格式化输出： paste/paste0 stringr::str_c sca::percent scales::percent sprintf Python字符串格式化输出： 格式化符号：%d/%s/%f等（规则与R中的sprintf大体一致） .format格式化输出： 关于传参的规则： 使用格式化符号可以通过位置参数【比较好用】、命名参数来实现字符串格式化输出【使用字典反而繁琐了】。 使用.format格式化输出可以通过顺序参数（编号顺序）、位置参数（前后位置顺序需一致）、名称参数（比较自由不用考虑顺序） 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>ggtech</tag>
        <tag>Python</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用优雅的配色来缔造图表专业主义~]]></title>
    <url>%2F2017%2F06%2F23%2F%E7%94%A8%E4%BC%98%E9%9B%85%E7%9A%84%E9%85%8D%E8%89%B2%E6%9D%A5%E7%BC%94%E9%80%A0%E5%9B%BE%E8%A1%A8%E4%B8%93%E4%B8%9A%E4%B8%BB%E4%B9%89%2F</url>
    <content type="text"><![CDATA[总觉得以前自己写的东西太过琐碎，纠结于步骤和技巧，而没有任何体系上和理念上的输出； 而再加上自己文风粗陋（毕竟每一篇的错别字用十个手指头都数不完呀）、排版拙劣，还有那么多小伙伴儿不离不弃，肯于点赞，实在是感到惭愧（我一般都很少看自己写的东西的不忍直视哈哈）~ 可能之前限于能力和实力，一直在跟着别人的步调走，始终在模仿；再加上自己过于追求数量，在质量上用心不多。 不过现在自我感觉好一些了，开始慢慢的思考一些深度的技巧运用，偶尔也会有一些纯理念的总结。 以后的更新频率打算保持在一周2~3篇左右，但是每一篇的内容会向着综合性、应用性方向转变。当然，关于内容排版和文章封面图都会多花一些心思，尽可能的提升一下阅读体验。 下面是今天的干货~ 今天要跟大家分享的是如何在实际图表场景中运用ggtech包的配色及主题，案例是关于全球互联网公司市值比较（数据皆为真实数据，来源于搜狐网）。 数据准备：因为基础的ggplot2语法已经介绍过了，这里我就不介绍具体步骤了，直接使用最终调试好的代码。 加载包：12library("ggplot2")library("ggtech") 数据导入： 12mydata &lt;- read.table("clipboard", header = T, sep = '\t')newdata&lt;-mydata[1:5,] 案例演示：柱形图（全球市值top5互联网公司 ） 数据截止2015年，单位：十亿美元 Airbnb风格:123456789ggplot(newdata,aes(reorder(Name,-Value),Value,fill=Name))+geom_bar(stat="identity")+ theme_tech(theme="airbnb") + scale_fill_tech(theme="airbnb") + labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ theme(axis.title = element_blank(), legend.position=c(0.85,0.8) ) Esty风格：123456789ggplot(newdata,aes(reorder(Name,-Value),Value,fill=Name))+geom_bar(stat="identity")+ theme_tech(theme="etsy") + scale_fill_tech(theme="etsy") + labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ theme(axis.title = element_blank(), legend.position=c(0.85,0.8) ) Fackbook风格：123456789ggplot(newdata[1:4,],aes(reorder(Name,-Value),Value,fill=Name))+geom_bar(stat="identity")+ theme_tech(theme="facebook") + scale_fill_tech(theme="facebook") + labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ theme(axis.title = element_blank(), legend.position=c(0.85,0.8) ) Google风格：123456789ggplot(newdata[1:4,],aes(reorder(Name,-Value),Value,fill=Name))+geom_bar(stat="identity")+ theme_tech(theme="google") + scale_fill_tech(theme="google") + labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ theme(axis.title = element_blank(), legend.position=c(0.85,0.8) ) Twitter风格：123456789ggplot(newdata[1:4,],aes(reorder(Name,-Value),Value,fill=Name))+geom_bar(stat="identity")+ theme_tech(theme="twitter") + scale_fill_tech(theme="twitter") + labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ theme(axis.title = element_blank(), legend.position=c(0.85,0.8) ) 饼图以下用饼图来呈现前五大互联网公司的相对市值大小： Airbnb风格:123456789101112131415161718ggplot(newdata,aes(x=1,y=Value,fill=Name))+ geom_bar(stat="identity",color="white")+ theme_tech(theme="airbnb") + scale_fill_tech(theme="airbnb") + coord_polar(theta = "y",start=0)+ labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.line=element_blank(), legend.position=c(0.1,0.1) ) Esty风格：123456789101112131415161718ggplot(newdata,aes(x=1,y=Value,fill=Name))+ geom_bar(stat="identity",color="white")+ theme_tech(theme="etsy") + scale_fill_tech(theme="etsy") + coord_polar(theta = "y",start=0)+ labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.line=element_blank(), legend.position=c(0.1,0.1) ) Fackbook风格：123456789101112131415161718ggplot(newdata[1:4,],aes(x=1,y=Value,fill=Name))+ geom_bar(stat="identity",color="white")+ theme_tech(theme="facebook") + scale_fill_tech(theme="facebook") + coord_polar(theta = "y",start=0)+ labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.line=element_blank(), legend.position=c(0.1,0.1) ) Google风格：123456789101112131415161718ggplot(newdata[1:4,],aes(x=1,y=Value,fill=Name))+ geom_bar(stat="identity",color="white")+ theme_tech(theme="google") + scale_fill_tech(theme="google") + coord_polar(theta = "y",start=0)+ labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.line=element_blank(), legend.position=c(0.1,0.1) ) Twitter风格：123456789101112131415161718ggplot(newdata[1:4,],aes(x=1,y=Value,fill=Name))+ geom_bar(stat="identity",color="white")+ theme_tech(theme="twitter") + scale_fill_tech(theme="twitter") + coord_polar(theta = "y",start=0)+ labs(title="Top5 Internet Companies", subtitle="Market value of Internet Co in 2015", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.line=element_blank(), legend.position=c(0.1,0.1) ) 粗边面积图接下来用国内BAT三巨头的连续7年市值数据制作堆积的粗边面积图： 数据来源于www.14du.com 截止2015年，单位：亿美元 导入数据：1mynewdata &lt;- read.table("clipboard", header = T, sep = '\t') 使用reshape2包进行转置塑性：12library("reshape2")newmydata &lt;- melt(mynewdata, id.vars = c("Year"),variable.name = "Name", value.name = "Value") Airbnb风格:123456789101112131415ggplot(newmydata,aes(Year,Value,group=Name,fill=Name))+ geom_area(position="stack")+ geom_line(col="grey60",size=2,position="stack")+ theme_tech(theme="airbnb") + scale_fill_tech(theme="airbnb") + labs(title="Three Big Giant of Internet Companies in China", subtitle="Market value of Internet Co in China", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.title = element_blank(), legend.position=c(0.2,0.6) ) Esty风格：123456789101112131415ggplot(newmydata,aes(Year,Value,group=Name,fill=Name))+ geom_area(position="stack")+ geom_line(col="grey60",size=2,position="stack")+ theme_tech(theme="etsy") + scale_fill_tech(theme="etsy") + labs(title="Three Big Giant of Internet Companies in China", subtitle="Market value of Internet Co in China", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.title = element_blank(), legend.position=c(0.2,0.6) ) Fackbook风格：123456789101112131415ggplot(newmydata,aes(Year,Value,group=Name,fill=Name))+ geom_area(position="stack")+ geom_line(col="grey60",size=2,position="stack")+ theme_tech(theme="facebook") + scale_fill_tech(theme="facebook") + labs(title="Three Big Giant of Internet Companies in China", subtitle="Market value of Internet Co in China", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.title = element_blank(), legend.position=c(0.2,0.6) ) Google风格：123456789101112131415ggplot(newmydata,aes(Year,Value,group=Name,fill=Name))+ geom_area(position="stack")+ geom_line(col="grey60",size=2,position="stack")+ theme_tech(theme="google") + scale_fill_tech(theme="google") + labs(title="Three Big Giant of Internet Companies in China", subtitle="Market value of Internet Co in China", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.title = element_blank(), legend.position=c(0.2,0.6) ) Twitter风格：123456789101112131415ggplot(newmydata,aes(Year,Value,group=Name,fill=Name))+ geom_area(position="stack")+ geom_line(col="orange",size=2,position="stack")+ theme_tech(theme="twitter") + scale_fill_tech(theme="twitter") + labs(title="Three Big Giant of Internet Companies in China", subtitle="Market value of Internet Co in China", caption = "http://www.sohu.com/")+ guides(fill=guide_legend(title=NULL))+ theme( panel.grid=element_blank(), panel.background=element_blank(), axis.title = element_blank(), legend.position=c(0.2,0.6) ) 真是不好意思，没有刹住车，糊里糊涂的就写了这么多，也忘记对代码做变量中转了，其实核心代码我就写了三个，其他都是Ctrl+V、Ctrl+V不停地狂点鼠标。 这个ggtech包前天刚分享过的，配色上很惊艳，很有科技范，非常适合用在商业数据分析中，说不定还能给你的领导带来惊喜呢，还等什么呢，赶快来试一试吧！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>图表美化</tag>
        <tag>ggtech</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不经意间又发现了一个有趣又炫酷的包]]></title>
    <url>%2F2017%2F06%2F23%2F%E4%B8%8D%E7%BB%8F%E6%84%8F%E9%97%B4%E5%8F%88%E5%8F%91%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E5%8F%88%E7%82%AB%E9%85%B7%E7%9A%84%E5%8C%85%2F</url>
    <content type="text"><![CDATA[关于R语言可视化的内容，之前写有个系列，最近零零散散的又发现了一些好玩的包，刚学会就赶紧来跟大家分享~ 这一篇分享一个围绕ggplot开发的主题包——ggtech。 数据准备：不过这个包依赖的ggplot2版本需要很高才能搭配使用（仔细了解了下，貌似要开发版的ggplot2） 所以在开始本篇分享之前，你需要保证自己已经下载了开发版的ggplot2包 devtools curl 以上两个是下载开发版ggplot2的必备包 然后运行以下代码：1devtools::install_github('hadley/ggplot2') 也许会报错，你可能需要更新你的Rtools至最新版。 如果实在没法下载成功开发版的ggplot2的话，也不要着急，据说ggplot2最新版本马上就要提供更新了，再稍微耐心等待几天，就会有更新提醒的。 之所以跟大家分享ggtech包是因为，该将几个全球著名的互联网公司官方用色做成了图表主题和配色模板，使用ggtech可以很容易的套用这些主题和配色模板。 还以diamonds数据集为例：12library(ggplot2)library(ggtech) 主题套用：套用Airbnb主题 123456data&lt;-diamonds[diamonds$color %in%LETTERS[4:7], ]ggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+theme_tech(theme="airbnb") + scale_fill_tech(theme="airbnb") +labs(title="Airbnb theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0") 123456789101112131415161718192021222324ggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+ theme_airbnb_fancy() + scale_fill_tech(theme="airbnb") + labs(title="Airbnb theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0")``` ![](http://orz60j4aw.bkt.clouddn.com/image3.png)怎么样，配色系统还不错吧，那是自然的，这组配色是取自大名鼎鼎的Airbnb的官方用色，设计感和视觉体验那都是全球顶尖水平的。而且使用以上ggtech函数之后，语法上还是与ggplot体系保持一致，只是……竟然可以设置subtitle参数了禁简直太逆天了……要知道老版本ggplot2如果想要设置一个副标题，你要么需要使用写自定义函数，要么需要使用labs并且自己指定副标题的精确位置函数。（鬼才知道呢，要一点儿一点儿写位置参数不断尝试~—~）除了Airbnb的主题之外，还有几个著名互联网公司的颜色风格主题：**etsy风格：**```rggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+ theme_tech(theme="etsy") + scale_fill_tech(theme="etsy") + labs(title="Etsy theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0") fackbook风格：12345ggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+ theme_tech(theme="facebook") + scale_fill_tech(theme="facebook") + labs(title="Facebook theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0") Google风格：12345ggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+ theme_tech(theme="google") + scale_fill_tech(theme="google") + labs(title="Google theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0") Twitter风格： ggplot(data,aes(carat,fill=color))+geom_histogram(bins=30)+ theme_tech(theme="twitter") + scale_fill_tech(theme="twitter") + labs(title="Twitter theme", subtitle="now with subtitles for ggplot2 &gt;= 2.1.0") 很惊艳吧有木有，想象一下你的图表如果都是这种配色，还会被领导嫌弃嘛！ 这种国际顶尖互联网公司的配色风格，一般都是经由世界级的视觉与色彩设计师们的大手笔，无论是设计感还是艺术感上都是棒棒哒，用在自己的业务分析图表中，绝对可以给你的工作增色不少。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>ggtech</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot图表系统中的辅助线]]></title>
    <url>%2F2017%2F06%2F22%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E5%9B%BE%E8%A1%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E8%BE%85%E5%8A%A9%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[在之前的推送中，曾经有过一篇介绍excel图表辅助线的制作方法，其中用到的技巧五花八门、令人眼花缭乱。 而ggplot图表系统中的辅助线添加起来却异常简单，非常易于操作。 这主要得益于ggplot函数系统的图层控制理念以及该包的开发者很早就意识到图表辅助线这一层面的图表元素需求。 数据准备：接下来我以几个案例的形式对图表辅助线操作进行演示：123library(ggplot2)library(reshape2)library(ggthemes) 12data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Conpany = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,3800,2900,2500,3300),Sale2016 = c(5050,3800,2900,2500,3300))mydata&lt;-melt(data,id.vars=c("Name","Conpany"),variable.name="Year",value.name="Sale") 1ggplot(mydata,aes(reorder(Conpany,-Sale),Sale,fill=Conpany))+geom_bar(stat="identity") 添加辅助线：以上柱形图中，我们如果想要了解五个公司的销售额均值以及单个公司销售额与均值的对比情况，需要在图表中添加一条平均线。 1ggplot(mydata,aes(reorder(Conpany,-Sale),Sale,fill=Conpany))+geom_bar(stat="identity")+geom_hline(aes(yintercept=mean(Sale)),linetype=5,col="red") 以上通过geom_hline图层为柱形图添加了均值辅助线，但是大家一定好奇为啥均值线那么低，低于所有公司的销售额，因为均值是季度均值，而销售额是年度累计销售额。 接下来我们制作一个分季度的柱形图。1ggplot(mydata,aes(reorder(Conpany,-Sale),Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+geom_hline(aes(yintercept=mean(Sale)),linetype=5,col="red") 当然这种均值线在分面状态下也是可以添加的。 1ggplot(mydata,aes(reorder(Conpany,-Sale),Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+geom_hline(aes(yintercept=mean(Sale)),linetype=5,col="red")+facet_grid(.~Year) 辅助线在散点图中也是经常使用的一种图表元素，它可以帮助我们对分布形态进行分割和归纳，使得数据分布形态及趋势更加明显。 接下来使用diamond数据集来展示散点图中的辅助线。 1ggplot(diamonds,aes(carat,price))+geom_point() 以上散点图没有很明显的分散趋势，不过为了演示散点图中的辅助线，我还是将散点像素画处理，给散点图加上均值十字线。 1ggplot(diamonds,aes(carat,price))+geom_point(shape=".")+geom_hline(aes(yintercept=mean(price)),linetype=5,col="red")+geom_vline(aes(xintercept=mean(carat)),linetype=5,col="red") 像素化处理之后，再加上均值十字线，你可以清晰地看到，数据分布形态中，左下角最为密集。 辅助线的另外一种常见的用途就是在时间序列数据中。 1ggplot(economics,aes(date,unemploy))+geom_line() 这里可以使用辅助线来标注我们最感兴趣的时间点数据： 1ggplot(economics,aes(date,unemploy))+geom_line()+geom_vline(aes(xintercept=as.numeric(start)),data=presidential) 12345678&gt; head(presidential) name start end party1 Eisenhower 1953-01-20 1961-01-20 Republican2 Kennedy 1961-01-20 1963-11-22 Democratic3 Johnson 1963-11-22 1969-01-20 Democratic4 Nixon 1969-01-20 1974-08-09 Republican5 Ford 1974-08-09 1977-01-20 Republican6 Carter 1977-01-20 1981-01-20 Democratic presidential数据集是一个美国历届总统的任期截止时间，通过添加总统任期时间点，我们甚至可以从经济波动数据中观察到经济指标变波动与政治周期的关系。 start是一个代表日期的字段，也就是说我们可以赋值给geom_vline函数一个字段，从而在折线图中绘制出多个时间点的辅助线。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[竟然是一个升级版的数据透视表,Tableau真的没有那么神秘~]]></title>
    <url>%2F2017%2F06%2F22%2F%E7%AB%9F%E7%84%B6%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8D%87%E7%BA%A7%E7%89%88%E7%9A%84%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8-Tableau%E7%9C%9F%E7%9A%84%E6%B2%A1%E6%9C%89%E9%82%A3%E4%B9%88%E7%A5%9E%E7%A7%98%2F</url>
    <content type="text"><![CDATA[前一篇跟大家详述了关于Excel在作图理念上的诸多细节，今天让我们把交点聚焦于多分类维度的数据呈现问题。 前言：当然今天这篇我会把视角从Excel切换到Tableau，没错就是Tableau。可能很多小伙伴儿已经了解过这款商务智能工具，这是一款目前市面上最成熟、最人性化的桌面端可视化工具（没有之一，至于PowerBI，我之后会写专门的实用贴来解释）。 相信很多小伙伴儿（特别是已经在职场已经混迹很多年的）对Excel中的数据透视表非常熟悉，没错Tableau就是一款升级版的数据透视表。 它不仅仅可以将原始的一维表数据透视为二维表格，它甚至强大到可以将原始数据直接透视成多维图表，所有的流程跟Excel的数据透视表几无二致。 特色对比 好吧，我要为我说过的话负责，接下来我们界面菜单布局和使用体验两个角度，以案例的形式来解释以上原因： 在正式介绍之前，我们应该明确的是，数据可视化其实就是在呈现一组由不同维度和度量组成的字段（变量），无论是一维、二维、三维甚至更高维的情况，所以所有的可视化形式都是建立在维度与度量等指标之上的，在导入数据源之后，你就应该有意识的熟悉数据结构，认识到所有的指标的属性（是维度还是度量）以及度量之间的关系（粒度的粗细，层级的高低）。 想强调的第二点是，数据可视化是一种数据变量间的关系探索。因而不要带着长久以来微软的Excel强加给你的关于可视化图表类型的限制，可视化形式应该服务于业务分析与关系挖据的需求，应该说我们是按照自己的目的去定制可视化的呈现形式的，至于单个的图表类型，那只是诸多可视化形式中使用频率比较高的几种而已，事实上的可以呈现数据的图形可视化形式远不止于此。 关于Tableau与Excel数据透视表的界面高度一致：Excel的数据透视表和Tableau的工作表都同时提供菜单式操作和页面式操作，而且操作体验和风格大致相当。 页面式操作——Excel： 页面式操作——Tableau:（Tableau界面只有一处筛选器，放在了菜单里） 菜单式操作——Excel： 菜单式操作——Tableau:（Tableau界面只有一处筛选器，放在了菜单里） 我们把Excel和Tableau的页面式操作和菜单式操作窗口进行对比展示： 页面式（Excel VS Tableau） 菜单式（Excel VS Tableau） 表面上看，Tableau就是另一个翻版的Excel数据透视表，这在两者的界面设计理念以及菜单设计上就已经一清二楚。 行、列、值、筛选四大模块应有尽有。唯一的不同就在于，Tableau有了一个标识模块，而Excel是没有的。 接下来解释原因，看过我之前文章的小伙伴儿大概都已经有所熟知我所说的可视化视觉信号，视角信号可以是物理元素（点线面）也可以是色彩元素（透明度、色调等），当然更多的时候是点线面和颜色元素的组合。 当然文本也可以被称为一种视觉元素，毕竟文本是可以被我们的肉眼识别的视觉信息。 我们常说的字不如表、表不如图，其实严格来说三者表达的信息都是一致的，但是从视觉呈现上来说，我们人类都是视觉动物，大脑主观上更能接受由这些物理元素与颜色属性等视觉信号组成的混合图形（即图表）。 所以说Excel所完成的就是视觉呈现中的字和表，表示纯数字的，无需对其进行各种形状、颜色的修饰，所以Excel的透视表界面中除了行、列、筛选等三个常用维度容器之外，只有一个值容器（用于盛放度量指标）。 而Tableau中除了行、列、筛选等三个常用维度容器之外，更多的是通过标识来进行度量的视觉信号转化过程。（当然里面也是包含文本的，文本标识就完全可以胜任Excel数据透视表中的值呈现了）。 我们从上图中可以看到，Tableau的标识模块中，不但提供了文本呈现方式（效果就是数据投透视表啦），还有各种颜色、大小、线条、形状、详细信息（图表标签）、工具提示（图表弹窗）等。可以说你能想象到的可视化元素，机会都有了。 这才是一款成熟的可视化软件应该具备的样子。 多维度数据呈现案例展示：说了这么久，干巴巴的总要来几个案例练习一下，同样的数据，同样的菜单，同样的字段布局，这个解释可不可以给个满分。 也会针对Excel而言，这已经是极限了，因为Excel数据透视表透视的仅仅是表而言，没法再多给出除了数字之外的信息，这时候就是Tableau大展身手的时候啦。 我可以将单个指标大小映射给单元格背景颜色，这时候就可以做出类似Excel色阶功能。 同样也可以将单个指标映射给单元格的字体颜色，此时指标的大小可以通过字体颜色深浅来表达。 我同样可以将指标映射给形状、大小等，同一个图表对象上，我们可以通过将同一个指标连续添加不同的映射属性上来扩展该图表信息呈现丰富度，也可以将指标添加到文本、详细信息、工具提示等选项上来丰富图表单个指标的信息解释功能。 而tableau最最高明之处（我觉得）就是，利用维度透析的理念来按需完成可视化探索过程，而不会受制软件工具的技术限制，因为所有的规则都是透明的，方法和Excel的透视表示类似的、逻辑与使用者对数据结构的理解和业务逻辑的识别能力有关。 维度呈现自如灵活，如行云流水，随心所欲，无所不能。 辅助右上角的筛选器和图例菜单，动态效果立马显现，自助式BI的精髓表达的淋漓尽致。 Tableau也支持很流行的地图数据可视化探索功能。 通常需要在地图上呈现的数据形式无非两种：填充地区颜色以及添加基于坐标的气泡图（也可填色）。 这些形式都可以用Tableau模块中的对应可视化形式来完成，而如果能够精心设计配色和版式，合理选择可视化形式，Tableau完全可随意出版物级别的数据可视化仪表盘。 更多关于Tableau的干活，请持续关注本公众号后续更新。 当然我所说的以上规则只适用于建立在笛卡尔坐标系下的普通图表，基于极坐标系、空间投影坐标以及想树状图、气泡云图等没有明显轴维度的图表类型并不适用，但是关于维度与度量的呈现规则是适用的，因为无论什么样的图表呈现的无外乎都是一组维度与度量的指标。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Tableau</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>Tableau</tag>
        <tag>商务智能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——多图层叠加（离散颜色填充与气泡图综合运用）]]></title>
    <url>%2F2017%2F06%2F21%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%A4%9A%E5%9B%BE%E5%B1%82%E5%8F%A0%E5%8A%A0%EF%BC%88%E7%A6%BB%E6%95%A3%E9%A2%9C%E8%89%B2%E5%A1%AB%E5%85%85%E4%B8%8E%E6%B0%94%E6%B3%A1%E5%9B%BE%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%EF%BC%89%2F</url>
    <content type="text"><![CDATA[今天这一篇是昨天推送的基础上进行了进一步的深化，主要讲如何在离散颜色填充的地图上进行气泡图图层叠加。 为了使得案例前后一致，仍然使用昨天的数据集。 数据准备：加载包：1234library(ggplot2)library(plyr)library(maptools)library(sp) 导入中国省界地图：123china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")data1&lt;- china_map@data data2&lt;- data.frame(id=row.names(data1),data1) 数据格式转化及业务数据合并：1234china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1,data2, type = "full") mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata, type="full") 各省省会城市经纬度数据： 1province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") 构造数据地图作图数据：根据自己的数据量级和具体业务需要设置分割点12345mydata&lt;-mydata[,-c(5,6)]mydata$zhibiao&lt;-rnorm(33,100,50)mydata$zhibiao&lt;-abs(mydata$zhibiao)mydata$zhibiao2&lt;-round(mydata$zhibiao,0)mydata$fau &lt;- cut(mydata$zhibiao, breaks = c(0,50,100,150,200,250)) 将转换的分段因子变量重新命名为我们需要的分段阀值：1mydata$fam&lt;-factor(mydata$fau,levels=c('(0,50]','(50,100]','(100,150]','(150,200]','(200,250]'),labels=c('0~50','50~100','100~150','150~200','200~250'),order=TRUE) 将业务数据与地理信息数据合并：123china_data &lt;- join(china_map_data, mydata, type="full") province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv")windowsFonts(myFont = windowsFont("微软雅黑")) 离散标度填充：12345678910111213141516ggplot(china_data, aes(x = long, y = lat, group = group,fill =fam)) + geom_polygon(colour="white")+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) 在离散颜色标度的基础上添加各省份散点图：1234567891011121314151617ggplot() + geom_polygon(data=china_data, aes(x=long,y=lat,group=group,fill=fam),colour="white")+ geom_point(data=province_city,aes(x=jd,y=wd),colour="red")+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) 更该散点图为气泡图：12province_city$PerforamA&lt;-round(rnorm(34,100,30),0)province_city$Perforamb&lt;-round(rnorm(34,100,30),0) 123456789101112131415161718ggplot() + geom_polygon(data=china_data, aes(x=long,y=lat,group=group,fill=fam),colour="white")+ geom_point(data=province_city,aes(x=jd,y=wd,size=PerforamA),shape=21,fill="#8E0F2E",colour="black",alpha=0.6)+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens scale_size_area(max_size=6)+ coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL),size=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) 本来打算再继续在气泡图的基础上进行颜色渐变填充呢，可以试了一下，这样的话前面的底图离散颜色标度填充的的时候已经使用过了一个fill属性设置选项，而要对气泡图进行颜色渐变填充就要再使用一次fill属性，可是目前为止我还不知道如何在多图层中出现多个fill属性的时候如何识别并分别进行标度设置，当我运行如下代码时，软件无法识别两个颜色标度设置分别对应的指标，因而图表无法跑出来： 12345678910111213141516171819ggplot() + geom_polygon(data=china_data, aes(x=long,y=lat,group=group,fill=fam),colour="white")+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens geom_point(data=province_city,aes(x=jd,y=wd,size=PerforamA,fill=PerforamB),shape=21,fill="#8E0F2E",colour="black",alpha=0.6)+ scale_size_area(max_size=6)+ scale_fill_gradient2(low="DarkCyan", mid="Azure", high="Sienna", midpoint=median(province_city$PerforamB))+ coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL),size=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) Scale for ‘fill’ is already present. Adding another scale for ‘fill’, which will replace the existing scale.Error: Discrete value supplied to continuous scale 实在是太遗憾了，不知道哪位大神知道如何处理多图层相同的fill属性，可以告知在下，这里先行谢过了。 处理标签问题：最后来处理标签问题，为了防止页面杂乱不堪，我只用了PerforamA指标前十个标签。1234567891011121314151617181920labelper&lt;-province_city[order(province_city[,5],decreasing=T),][1:10,]ggplot() + geom_polygon(data=china_data, aes(x=long,y=lat,group=group,fill=fam),colour="white")+ geom_point(data=province_city,aes(x=jd,y=wd,size=PerforamA),shape=21,fill="#8E0F2E",colour="black",alpha=0.6)+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens scale_size_area(max_size=6)+ coord_map("polyconic") + geom_text(aes(x=jd+2.3,y=wd,label=city),size =3,family="myFont",fontface="plain",data=labelper) + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL),size=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) 要是把所有的标签全部都添加到地图上的话，真的不太合适，本来图层就有两个，已经出现信息相互遮挡的情况了。12345678910111213141516171819ggplot() + geom_polygon(data=china_data, aes(x=long,y=lat,group=group,fill=fam),colour="white")+ geom_point(data=province_city,aes(x=jd,y=wd,size=PerforamA),shape=21,fill="#8E0F2E",colour="black",alpha=0.6)+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens scale_size_area(max_size=6)+ coord_map("polyconic") + geom_text(aes(x=jd+2.3,y=wd,label=city),size =3,family="myFont",fontface="plain",data=province_city) + ggtitle("某公司2015~2016年度营业状况分布图")+ #写入标题 guides(fill=guide_legend(reverse=TRUE,title=NULL),size=guide_legend(reverse=TRUE,title=NULL))+ theme( panel.grid = element_blank(), panel.background = element_blank(), title=element_text(family="myFont"), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.4), legend.text.align=1 ) 所以标签的话，还是尽量越少越好，最好别添加，本来省级行政单位作为地理常识，已经是大家心知肚明的东西了，信息表达到位了就OK了。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>R语言</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——数据地图离散百分比填充（环渤海）]]></title>
    <url>%2F2017%2F06%2F21%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E7%A6%BB%E6%95%A3%E7%99%BE%E5%88%86%E6%AF%94%E5%A1%AB%E5%85%85%EF%BC%88%E7%8E%AF%E6%B8%A4%E6%B5%B7%EF%BC%89%2F</url>
    <content type="text"><![CDATA[今天跟大家分享如何以百分比形式填充离散分段数据地图。 案例用环渤海三省二市的地理数据。 数据准备：加载包：123library(ggplot2)library(maptools)library(plyr) 数据导入、转换、抽取：123456CHN_adm2 &lt;- readShapePoly("c:/rstudy/CHN_adm/CHN_adm2.shp") CHN_adm2_1 &lt;- fortify(CHN_adm2) data1 &lt;- CHN_adm2@data data2 &lt;- data.frame(id=row.names(data1),data1) china_map_data &lt;- join(CHN_adm2_1, data2, type = "full") huanbohai &lt;-subset(china_map_data,NAME_1==c("Beijing","Tianjin","Nei Mongol","Hebei","Shandong")) 建立业务数据：123huanbohai_perm&lt;-data.frame(NAME_2=unique(huanbohai$NAME_2),zhibiao=rnorm(42,100,50))huanbohai_perm$zhibiao&lt;-round(huanbohai_perm$zhibiao,0)write.table (huanbohai_perm, file ="C:/rstudy/huanbohai.csv", sep =",", row.names =FALSE) 业务数据导入及合并：12mydata&lt;-read.csv("C:/rstudy/huanbohai.csv",header=T)huanbohai_map_data &lt;- join(huanbohai,mydata, type="full") 将转换的分段因子变量重新命名为我们需要的分段阀值：12huanbohai_map_data$fau &lt;- cut(huanbohai_map_data$zhibiao, breaks = c(0,40,80,120,160,200)) huanbohai_map_data$fam&lt;-factor(huanbohai_map_data$fau,levels=c('(0,40]','(40,80]','(80,120]','(120,160]','(160,200]'),labels=c('0~40','40~80','80~120','120~160','160~200'),order=TRUE) 离散颜色标度填充（实际值分段）:1234567891011121314151617windowsFonts(myFont = windowsFont("微软雅黑")) ggplot(huanbohai_map_data, aes(x = long, y = lat, group = group,fill =fam)) + geom_polygon(colour="white")+ scale_fill_brewer(palette="Greens") + ###Blues&amp;Greens coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( title=element_text(family="myFont"), legend.text.align=1, ###图例标签右对齐 panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.6) ) 以上是昨天在东三省填充地图中所使用过的方法，接下来我解释一种新的填充方案，通过将数量段转换为百分比进行离散颜色标度填充： 离散颜色标度分割（百分比数量段）：1234qa &lt;- quantile(na.omit(huanbohai_map_data$zhibiao), c(0,0.2,0.4,0.6,0.8,1.0))huanbohai_map_data$zhibiao_q&lt;-cut(huanbohai_map_data$zhibiao,qa,labels = c("0-20%", "20-40%","40-60%","60-80%", "80-100%"),include.lowest = TRUE)&gt; levels(huanbohai_map_data$zhibiao_q)[1] "0-20%" "20-40%" "40-60%" "60-80%" "80-100%" 通过将指标变量以分段百分比的方式进行分割，新建立一个百分比分段因子变量： 离散渐变（百分比）1234567891011121314151617windowsFonts(myFont = windowsFont("微软雅黑"))ggplot(huanbohai_map_data,aes(long,lat))+ geom_polygon(aes(group=group,fill=zhibiao_q),colour="white")+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + guides(fill=guide_legend(reverse=TRUE,title=NULL))+ ggtitle("某公司2015~2016年度营业状况分布图")+ theme( title=element_text(family="myFont"), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position =c(0.2,0.7), legend.text.align=1 ) 带标签 接下来处理标签问题：创建各城市中心地理坐标：12midpos &lt;- function(data1) mean(range(data1,na.rm=TRUE))centres &lt;- ddply(huanbohai_map_data,.(city),colwise(midpos,.(long,lat))) 填充并添加标签：123456789101112131415161718ggplot(huanbohai_map_data,aes(long,lat))+ geom_polygon(aes(group=group,fill=zhibiao_q),colour="white")+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + geom_text(aes(label=city),size =3,family="myFont",fontface="plain",data=centres) + guides(fill=guide_legend(reverse=TRUE,title=NULL))+ ggtitle("某公司2015~2016年度营业状况分布图")+ theme( title=element_text(family="myFont"), title=element_text(family="myFont"), panel.grid = element_blank(), panel.background = element_blank(), legend.text.align=1, axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.2,0.7) ) 文件及代码分享在QQ群共享中. 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>R语言</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——数据地图应用（东三省）]]></title>
    <url>%2F2017%2F06%2F20%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E5%BA%94%E7%94%A8%EF%BC%88%E4%B8%9C%E4%B8%89%E7%9C%81%EF%BC%89%2F</url>
    <content type="text"><![CDATA[今天是一个案例应用，采用东北三省地图进行离散颜色映射，让大家感受下R语言在地理信息空间可视化方面的强大功能，同时也会对之前强调过的地图配色技巧进行应用。 加载工具包：123456library(ggplot2) ###绘图函数library(plyr) ###数据合并工具library(maptools) ###地图素材导入library(sp)library(Cairo) #图片高清导出library(RColorBrewer) ###有一些高质量的地图配色模板可以参考 数据导入、转换、合并、提取123CHN_adm2 &lt;- readShapePoly("c:/rstudy/CHN_adm/CHN_adm2.shp") #中国地理信息数据 CHN_adm2_1 &lt;- fortify(CHN_adm2) #转化为数据框 data1 &lt;- CHN_adm2@data #提取行政区划信息 12data2 &lt;- data.frame(id=row.names(data1),data1) china_map_data &lt;- join(CHN_adm2_1,data2, type = "full") #合并地理信息数据与经纬度数据 1dongsansheng &lt;-subset(china_map_data,NAME_1==c("Heilongjiang","Jilin","Liaoning")) #抽取东北三省的合并数据信息 到这里你可以查看一下东三省的市级行政单位详细信息：12aaa&lt;-data.frame(name=unique(dongsansheng$NAME_2))aaa 以上已经完成了东北三省的数据提取与整理工作，但是如果要使用自己的数据对各个市级行政进行填充，我们还需要自己制作一个业务数据文件文件，以前我都是将上一步的市级行政单位信息复制黏贴到excel表格中，然后建立业务数据，但是突然发现使用write导出函数可以很容易的将行政单位导出成csv格式数据，而且还避免手动黏贴造成的格式错误： 构造作图数据：同上，将市级行政单位提取出来，并附带建立一个指标变量。1dongsansheng_perm&lt;-data.frame(NAME_2=unique(dongsansheng$NAME_2),zhibiao=rnorm(35,100,20)) 将指标变量保留整数1dongsansheng_perm$zhibiao&lt;-round(dongsansheng_perm$zhibiao,0) 使用write函数将东三省的行政单位信息导出到数据文件目录下，并取名dongsansheng1write.table (dongsansheng_perm, file ="C:/rstudy/dongsansheng.csv", sep =",", row.names =FALSE) 如果你需要最后显示各市中文名称的话，可以自己将各市中文名称添加到行政信息文件中，然后将指标列数据更换成自己的真实业务指标。当然如果想要直接使用拼音的话就不必添加中文名。 使用read.csv函数将刚才整理好的带有业务数据的文件再次导入： 1mydata&lt;-read.csv("C:/rstudy/dongsansheng.csv",header=T) 将业务数据与地理信息数据再次合并1dongsansheng_map_data &lt;- join(dongsansheng,mydata, type="full") 至此，制作地图的信息已经全部整理完毕，接下来要正式开始进行填充填充： 地图数据可视化：对于连续渐变填充的方法，之前已经有多篇推送进行介绍，这里还是给出代码，便于大家对不同的方法做出来的效果进行比较：1234567891011ggplot(dongsansheng_map_data, aes(x = long, y = lat, group = group,fill=zhibiao)) + geom_polygon(colour="grey40") + scale_fill_gradient(low="white",high="steelblue") + coord_map("polyconic") + theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank() ) 不要以为到这里就完事儿啦，精彩的好戏还在后头呢！ 虽然我们使用连续渐变映射做出来了东三省的数据地图，可以如果我问你你能明确的告诉我某一个市的数值范围具体在那个数量段，你可以立马的告诉我吗，反正我是不能。 连续渐变只能给读者一个大小顺序上的感官印象，我们的依靠肉眼很难辨别出某一个地区的指标所处的数量段，这是连续渐变填充情况下的最大弊端： 经过一段时间的摸索，我终于找到了好的解决办法：下面就是通过数值分割的离散填充技巧具体步骤： 首先要了解自己的业务指标具体分布情况：1234summary(dongsansheng_map_data$zhibiao)Min. 1st Qu. Median Mean 3rd Qu. Max. 63.00 93.00 93.00 98.73 100.00 161.00 计划将该指标在0~200之间均分为5份：1dongsansheng_map_data$fau &lt;- cut(dongsansheng_map_data$zhibiao, breaks = c(0,40,80,120,160,200)) 12levels(dongsansheng_map_data$fau)[1] "(0,40]" "(40,80]" "(80,120]" "(120,160]" "(160,200]" 以上通过查看因子水平，我们得到了分割后的因子变量情况，但是直接将该因子变量作为离散颜色边度填充依据的话，那么图例中的因子变成就会默认使用（0，40]……很不美观，所以我们需要对各段因子变量进行重新命名： 1234dongsansheng_map_data$fam&lt;-factor(dongsansheng_map_data$fau,levels=c('(0,40]','(40,80]','(80,120]','(120,160]','(160,200]'),labels=c('0~40','40~80','80~120','120~160','160~200'),order=TRUE)levels(dongsansheng_map_data$fam)[1] "0~40" "40~80" "80~120" "120~160" "160~200" 这样的分段更加符合我们的认知，看起来也更加的协调。 接下来就是离散颜色标度的填充：1windowsFonts(myFont = windowsFont("微软雅黑")) #首先定义字体，如果你特别追求字体细节的话 填充函数：12345678910111213141516ggplot(dongsansheng_map_data, aes(x = long, y = lat, group = group,fill =fam)) + geom_polygon(colour="white")+ scale_fill_brewer(palette="Greens") + ###Blues&amp;Greens coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( title=element_text(family="myFont"), legend.text.align=1, ###图例标签右对齐 panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.6) ) 这里因为指标全部是正值，且分割后的因子变量是有序因子变量，我用了RColorBrewer包中的单色调离散颜色方案。 其中Blues也是一个很好的选择： 12345678910111213141516ggplot(dongsansheng_map_data, aes(x = long, y = lat, group = group,fill =fam)) + geom_polygon(colour="white")+ scale_fill_brewer(palette="Blues") + ###Blues&amp;Greens coord_map("polyconic") + ggtitle("某公司2015~2016年度营业状况分布图")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( title=element_text(family="myFont"), legend.text.align=1, ###图例标签右对齐 panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.6) ) 这个包的配色方案中还有很多非常漂亮的颜色，大家可以依次尝试。 接下来我们来处理各省份的标签问题： 这里有一个很棘手的问题，因为要想给各个城市设置标签，我们必须知道各个城市详细的经纬度数据，而我们的数据集中有的经纬度数据是各城市的轮廓线数据，并没有各城市（城市中心）精确的经纬度数据，所以这里只能勉为其难的取各个城市区域的中心位置作为添加标签的依据（哪位小伙伴儿如果能够获取详细的城市中心经纬度数据，可以共享一下，虽然也可以一个一个的通过百度地图查找当时毕竟效率低）。 获取各个城市区域中心经纬度坐标： 12midpos &lt;- function(data1) mean(range(data1,na.rm=TRUE))centres &lt;- ddply(dongsansheng_map_data,.(city),colwise(midpos,.(long,lat))) 接下来就添加标签：12345678910111213141516ggplot(dongsansheng_map_data,aes(long,lat)) + geom_polygon(aes(group=group,fill=fam),colour="white") + scale_fill_brewer(palette="Greens") + ###Blues&amp;Greens geom_text(aes(label=city),size =3,family="myFont",fontface="plain",data=centres) + ggtitle("某公司2015~2016年度营业状况分布图")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ theme( title=element_text(family="myFont"), panel.grid = element_blank(), legend.text.align=1, panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.6) ) 到此，整个数据地图填充完毕，今天这篇主要针对离散标度颜色填充进行，还有一类离散颜色标度填充方式是将具体的数值转化成百分比数量段进行填充，作为该篇的续集下次再讲，代码文件和数据将会分享在魔方学院QQ群里供群友下载。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>R语言</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些培训师都不曾告诉你的关于Excel图表的秘密~]]></title>
    <url>%2F2017%2F06%2F20%2F%E9%82%A3%E4%BA%9B%E5%9F%B9%E8%AE%AD%E5%B8%88%E9%83%BD%E4%B8%8D%E6%9B%BE%E5%91%8A%E8%AF%89%E4%BD%A0%E7%9A%84%E5%85%B3%E4%BA%8EExcel%E5%9B%BE%E8%A1%A8%E7%9A%84%E7%A7%98%E5%AF%86%2F</url>
    <content type="text"><![CDATA[这是一篇关于Excel数据可视化的心得汇总！ Excel对宽数据和长数据的适用范围： Excel的图表模块更适合宽数据（即汇总过的二维表）； 在长表中，我将选中得三列全部作为簇状柱形图的数据源，默认的柱形图如下所示，虽然在横轴上也出现了两个维度信息（公司维度、日期维度），但是两个维度布局的很不友好。 Excel图表数据源行列限制规则：针对宽数据而言，Excel并不严格限定行列（允许行列自由转置），过渡的自由有时候会造成制图效率的低下，所以如果等领会我接下来交给你的心得，那么你的制图效率将会提高很多。 在详细解释以上内容之前，你需要对数据结构中的基本概念有所了解，即什么叫维度、什么叫度量。 如果不那么严格的进行定义，你可以粗略的将数值型指标当做度量（并不绝对，要视实际意义而定），类别型指标视作度量。（这其实对应于统计学中的变量类别划分标准：定类变量/定序变量——维度，定距变量/定比变量——度量） 了解变量类型之后，我们可以知道，我们的源数据包含两个维度（公司、日期），一个度量（对应日期某公司的指标）。 源数据的维度之间可以自由的转职（与线性代数中的转至概念没什么差别，就是行列位置的对应调整，并不改变具体度量值，改变的只是呈现数据的方式）。 转至在Excel中有两种方式可以完成，一种是复制数据源，选择性黏贴——行列转换。 另一种则是在已经完成的默认图表选择菜单中点击行列数据变换。 我使用同一数据源的原始维度和转之后的维度分别插入了默认的簇状柱形图。结果如下。 仔细分析以上数据源与默认图表的行列对应关系你会发现，三个字段的位置在原始表格与图形化后的图表上分布及其有规律。 列标题总是对应图表中的横轴，行标题总是对应图表中的图例。而度量总是呈现在图表的纵轴（数量轴）上。 这个规律是Excel图表的默认规则，当然你不必要严格执行此规则，那么不执行的后果就是，如果维度呈现的顺序不符合你的意图，你要么需要在源数据中进行数据转至，要么需要在图表的选择菜单里进行行列变化，进而转换成你中意的图表呈现形式。 所以结论就是，你的数据源组织，需符合以下要求： 1、想要对比的维度按列分布；（最终将会呈现在X轴上）2、需要分类的维度按行分布：（最终通过图例中的颜色分类进行区分）。3、行列虽然可以自由变换（通过数据源选择性黏贴转至或者在图表的选择菜单中进行行列变换），但一定要想清楚你的图表侧重对比那个维度，按照那个维度分类。 Excel与数据聚合功能：Excel的图表模块并没有数据聚合功能。（原因大概是这个模块并不能识别因子变量）。 我所说的聚合是指，通过将一组分类指标（一个维度与一个度量）按照类别分开并计算各类的均值、众数、中位数、方差、标准差、求和计算等。 所以，无论你的维度理念包含多少类别，Excel图表都只会把单个观测值视作单独的指标，这是它与主流可视化工具以及编程类工具在可视化功能上的最大差别和缺憾，也是验证上述观点中：Excel图表模块专为二维表（宽数据）所设计的证据之一。 以上图示中，列是一个呈现公司维度的指标，这种维度在数据库中非常常见，可能是日期的细分维度、也可鞥是地区的细分维度。 但是Excel的默认图表将维度的单个观测全部视作唯一值，而不会对齐进行任何分类聚合操作。 所以我们要想直接呈现汇总后的图表，需动用数据透析表进行维度透析，或者，将其整理成二维表制作多分类的可视化图表。 （以上操作同样适合条形图，只是条形图实质上相当于将柱形图向右旋转了90，所以条形图的行列概念与柱形图刚好颠倒过来） Excel维度指标的识别：这里先放四张图供大家思考： 我想大家一定看出了些猫腻，但是好像还不说不出其中的端倪。 我是这么理解的，Excel的图表模块是通过行列标题来自动探测并识别维度指标的。以上四幅图最符合我们需求的的应该是第一张图，该图完整的呈现了两个维度和度量的信息。 图二中，我们在首行首列的位置放入了一个YEAR的名称，我们理所当然的以为这个只是首列的标题而已，可是Excel并没有这么智能，它将其视作与后几列同样性质的公司维度中的一个名称。因为首列也成了一个特殊的公司（日期则成了该特殊公司的另一个维度不同水平的指标）。 所以整个图表的行维度（公司数）变成了6个，而因为没有定义列维度（原始数据中失去了行标题，其实是有的，但是因为添加了一个首行首列交叉位置的YEAR标签，结果Excel将首行作为列的一个维度，因而也就不存在名义上的日期维度分类）。 尽管Excel不知道丢失的维度的具体水平及名称，可是改变不了原始数据是一个二维表这样一个事实，因而还是给丢失的维度信息在图表中补全了，但是是通过默认的系列1、系列2、系列3……等方式来弥补的。 接下来看图示3： 该图的原始数据仍然是一个二维表，但是只有明确的行列维度信息（你以为你写了一组2012、2013^2016这么一组有规律的数据，Excel就能明白这是一个日期维度呀，那你真的是想多了，它跟其他的数值型指标没有任何的区别），与图2的过程类似，维度信息的丢失改变不了原始数据是二维表这样一个事实。因而Excel仍然会帮其补全行列维度（图表横轴补全了原始表列维度信息【即我们想当然以为当做行维度信息的日期和后5列指标】，图表纵轴补原始表中行维度信息，此时行为度信息已经不是我们想当然以为的那个日期指标，而是一组未知度量）。 图示4： 图示4中只明确了表格中列维度信息，而没有声明行维度信息，因为不存在错误识别，该状况下，Excel可以很完美的识别列维度（呈现在图表的横轴上）。而丢失的行维度信息则自动补全（呈现在图例的分类颜色指标上）。 综上所示，Excel识别维度信息是通过原始二维表表结构中的首行首列标签来识别的(切记不要在首行首列中写入任何信息，一定要留白、一定要留白、一定要留白)。 倘若不慎将首行首列（即行列维度标签的交叉单元格）标签交叉位置写入任何内容，那么结果是致命性的，你的列为度（也就是图表的横轴上）会被加入一个虚假的维度类别指标。 关于作图效率：以下是分别在Excel中制作多分类序列图表和其他软件工具（包含桌面端可视化工具以及编程工具等）所分别适用的数据源。 从效率上来说，自然是其他 工具能更高一些，Excel将每一个分类都视作一个列字段（典型二维表风格），其他的工具是通过将分类序列进行堆栈操作，聚合成一个包含类别变量（因子变量）和一个度量（数值型变量）从而大大简化了数据源，这在分类特别特别多的时候具有很大的优势。（想象一下如果有一千个分类，你难倒要在Excel里面列出1001个列字段吗，使用二维表仍然是三个字段，公司名称、日期，指标）。 当然 也不能说Excel这种二维表作图一无是处，二维表直观易懂，其本事就兼具图形化的信息呈现功能，否则为什么很多专业的报告中除了图表之外，包含很多表格呢，而一维表这种篇原始（但是易于存储）结构的数据应该不会常用于报告中。 所以说对于小数据或者二维表而言，Excel的图表工具还是非常适于此种可视化场景，而要是将二维表用于其他攻击高来进行可视化（可视化桌面端工具或者编程工具），则你需要额外进行数据的长宽转换。（关于数据长宽转换以及多维数据集在不同可视化工具中的最有可视化解决方案，我会专门列一篇进行分析讲解） 以上关于行列维度的分析并不适用于呈现连续性数据的图表类型（如直方图、散点图、气泡图等），原因很简单，如果图表的二维坐标系中都呈现连续性指标，那么也就无所谓维度了，维度是针对分类资料所定义的一种特殊指标，连续性指标也就只剩下度量指标啦。 事实上Excel出了为二维表作图而生之外，还是转门为分类数据可视化而生的（可能我说的比较绝对了，大家不要喷我），为什么的，原因有两个： Excel的现存图表库中绝大多数图表是适应分类数据作图，（只要一个轴支持分类数据即可算作离散数据可视化类型，而真正用于连续性数据可视化呈现的图表类型及其少，比如散点图【你会发现Excel的散点图也是支持类别变量的】、气泡图、直方图【直方图以往都是在数据分析库模块中，需要单独调用才能使用，近期才加入普通图表的菜单入口】）。 普通的业务分析场景下，更多的是不同维度间的交叉对比和汇总分析，而连续数据的可视化多用于预测与建模，这在学术研究中（时间序列数据的建模）以及企业的战略数据挖掘部门（市场拓展与销售预测等）使用场景比较多，而且数据量一般都大。（这也决定了Excel使用的局限性，即更适合客观呈现、适合分类资料的汇总可视化，不适合用于大数据量的挖掘呈现）。 当然我还有一个证据在证明我以上的看法，那就是最近两年微软公司尽心尽力培育的PowerBI商务智能系统，在数据源上完美支持主流数据库，可视化形式上使用一维表进行操作，在数据量上也大大突破了Excel所能承受的量级。这或许就是当前大数据如火如荼的形势下，微软的office系统显然已经无法支撑大数据下的分析与可视化需求，必须布局其自己的大数据分析与可视化系统。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>Excel</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot图表中的线条]]></title>
    <url>%2F2017%2F06%2F19%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E5%9B%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%9D%A1%2F</url>
    <content type="text"><![CDATA[今天跟大家分享的是ggplot图表中的一类重要元素——线条。 不要觉得专门为线条写一章推送有点小题大做，其实线条对于图表而言，功不可没，即便是不起眼的网格、轴线、或者线条的粗线、线型、磅数等都将决定着你的图表品质。 R语言中ggplot函数系统中涉及到线条的地方有很多，最常见的场景就是我们做geom_line()（折线图）、geom_path（）(路径图),以及图表的绘图区（panel）、图表区、网格系统（grid）中所涉及到的线条。 今天以一个折线图为例，简要说明ggplot函数中关于线条的主要参数及其效果。 数据构造过程：1234library(ggplot2)library(reshape2)library(ggthemes)library(RColorBrewer) 12data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Company = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,4000,3200,2800,3700),Sale2016 = c(6000,4800,4500,3500,4300))mydata&lt;-melt(data,id.vars=c("Name","Company"),variable.name="Year",value.name="Sale") 案例引入：我先用一个简单的折线图代码跑出来一个折线图：1ggplot(mydata,aes(Company,Sale,fill=Year))+geom_line() geom_path: Each group consists of only one observation. Do you need to adjust the group aesthetic? 当我用以上代码运行的时候，软件报错，提示如上： 图表展示区给出了一个只有坐标系的空白图表； 相信根据英文意思也可以明白怎么回事，因为我们给折线图的X轴映射是一个离散的因子变量，而默认状态下软件会将单条记录都会视作一个分类，这样肯定是无法出来图表的，而如果是一个连续变量，则会只会当做一个类别进行映射。 我们使用过ggplot内内置数据集验证我们的猜想。123head(LakeHuron)LakeHuron$data&lt;-seq(1875,1972,1)ggplot(LakeHuron,aes(data,LakeHuron))+geom_line() 参数解释说明：以上使用了一个时间序列数据，很顺利的完成了折线图的制作。 那么针对离散变量的折线图到底如何来做呢，我们可以通过group指定分组的形式来达到目的。 1ggplot(mydata,aes(Company,Sale,group=Year,fill=Year))+geom_line() 通过指定group即告知软件将变量按照年份变量分组，否则单个不重复记录都会被当做一个单独分组。 1ggplot(newdata,aes(Company,Sale,group=Year))+geom_line()+geom_point() 1ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point() #按照年份分组的同时按照年份进行线条的颜色映射 参数变化的对比效果：接下来通过对线条内部参数的修改，我们可以体会到ggplot对于线条细节的把控是多么的专注： 1ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point() 线条的参数主要有size、colour、linetype. 其中线条的类型主要有0=blank,1=solid,2=dashed,3=dotted,4=dotdash,5=longdash,6=twodash 每一个类型示例如下： 1234567ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line()+geom_point() ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=1,size=1.5)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=2,size=1.5)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=3,size=1.5)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=4,size=1.5)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=5,size=1.5)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(linetype=6,size=1.5)+geom_point() 下面是关于线条粗度的不同感知：123456ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=1,linetype=1)+geom_point() ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=2,linetype=1)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=3,linetype=1)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=4,linetype=1)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=5,linetype=1)+geom_point()ggplot(newdata,aes(Company,Sale,group=Year,colour=Year))+geom_line(size=6,linetype=1)+geom_point() 以上依次使用的线条粗度值为1,2,3,4,5,6，大家可以通过图表感受到ggplot图表中线条的粗度变化规律。 除了折线图（以及路径图，等图层中的线条之外），在theme系统中存在大量的关于线条的属性设置(网格系统、图表边框、轴线、图例系统)，均可以参照以上参数进行设置。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>图表美化</tag>
        <tag>theme</tag>
        <tag>视觉信号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Word天呀，气泡图居然还有这种操作~]]></title>
    <url>%2F2017%2F06%2F19%2FWord%E5%A4%A9%E5%91%80%EF%BC%8C%E6%B0%94%E6%B3%A1%E5%9B%BE%E5%B1%85%E7%84%B6%E8%BF%98%E6%9C%89%E8%BF%99%E7%A7%8D%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[在之前写实习僧爬虫可视化案例之时，曾经用过一个很类似气泡图的图表——气泡云图（superbubble）。 它的图表信息呈现与文字云非常相似，都是在控制一组元素的大小，文字云的大小是文字，气泡云图的大小是形状（气泡）。 关于可视思维的一些感想：虽然看起来，它与普通气泡图比起来非常相似，但是实质上数据信息含量已经大相径庭，气泡图实际上使用了三个指标变量，而气泡云图仅适用了两个（而且仅有大小变量是数值型的）。 实际上以上对比是为了启发大家一种认识图表的思路： 通常情况下，我们被各种课程或者书籍指导着，认识到的可视化无一例外的是从数据如何转换为图表，坦白的说，这中思路问题不大，至少没有方向性的失误。 但是可视化是一套理念，而非流程或者过程，从数据到图表仅仅解决的是数据（变量）通过视觉信号映射到图表的过程，更为完善的可视化视角应该是： 你既要知道视觉元素是是如何通过数据映射到图表上的，更要知道一张已经被映射完成的图表，其视觉信号如何还原为原始的数据结构，毕竟很多职场人士是先看到自己觉得满意的图表之后，再回过头来思考自己的数据怎么做成那种理想的图表。 即可视化是一套从数据信息到视觉信息，再由视觉信息还原数据信息的过程。（个人愚见） 今天要讲的气泡云图，你可以这么理解，我们有一组指标（离散），并且想要呈现（从宏观上）该组指标的客观大小。以上属于正向的从数据到图表的可视化思维。 更加常见的情况是，我看到了一张非常漂亮的气泡云图，我想要将其用在我的项目或者业务报告之中，那么你一定要搞明白，你是否有这么一组指标（数据），仅需从宏观上呈现其大小。（因为这种需求有很多图表类型可以运用，而且达到的目的大同小异）。 这里仍然以之前那个实习僧职位需求top100企业为例： 我会分别使用PowerBI、Tableau、R语言来制作这一案例。 PowerBI：我完成后的整个软件界面是这样的，大家可以看到，我只使用了两个字段：分别是一个文本标签和一组对应频率。 在superbubble的菜单中，刚好对应category选项和Role_DisplayName_Values字段。 就这样，完成了PowerBI中的气泡云图的制作。（该图表对象并非PowerBI内置图表对象，需要在其官方的在线社区中下载对应插件并加载之后才可用）。 Tableau:在Tableau操作界面中，仍然是使用两个字段，我将文本字段作为标签，freq作为大小映射给了该图表对象，同时因为Tableau系统中的图形对于颜色设置了非常严格的使用标准，所以默认是单色的，为了不过于单调，我将freq又映射给了一个颜色标度。（由此可见Tableau在数据可视化领域的专业性和权威性，PowerBI一直是在替用户选择，Tbaleau是用户掌握选择权）。 R语言：R语言的官方社区中没有气泡云图（superbubble），但是在HTMLwidgets的开发者社区里，有一个制作该图表的扩展包：123devtools::install_github("jcheng5/bubbles")library(bubbles)library(RColorBrewer) example：1bubbles(value = runif(26),label=LETTERS,color=rainbow(26, alpha=NULL)[sample(26)]) 以下接前面案例： 123456mydata&lt;-read.csv(&quot;D:R/File/shixiseng_job.csv&quot;,stringsAsFactors=FALSE,check.names=FALSE)color1&lt;-brewer.pal(9,&quot;YlOrRd&quot;)color2&lt;-brewer.pal(9,&quot;Greens&quot;)color&lt;-c(color1,color2)colorpan&lt;-sample(color,100,replace = TRUE)bubbles(value =mydata$Freq,label=mydata$Var1,color=colorpan) 简单几行代码，一幅还算看的过眼的superbubble图表就完美出炉了，关键是，它的信息呈现角度与众不同，给人的视觉感受比较震撼，令人耳目一新，心领神会。 本文总结：总结一下今天的分享概要： 1 可视化的两个环节： 从数据到图表——数据元素到视觉信号的映射过程 从图表到数据——视觉信号还原为数据结构的过程2 图表的数据信息含量一致，与所使用的软件无关： 因而所有的可视化工具在设计底层理念的时候，都是有规律的，不要害怕软件操作难，我们掌握心法就好。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>气泡云图.superbubble</tag>
        <tag>PowerBI</tag>
        <tag>Tableau</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot图表配色技巧]]></title>
    <url>%2F2017%2F06%2F18%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E5%9B%BE%E8%A1%A8%E9%85%8D%E8%89%B2%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[今天跟大家分享ggplot图表的配色原理与基本技巧。 图表配色是一个很深奥的话题，多亏了R语言平台的众多开发者贡献的配色包，让图表的配色不再深不可测。 图表配色常用类型：这里我暂且将所有的配色场景划分为两类： 离散变量配色与连续变量配色 ggplot函数的配色机制相对来说比较智能，当你给colour或者fill属性指定给变量映射的时候，该函数就会自动的区分变量属性（是离散变量或者是连续变量），进而给出适用于两种情况的配色风格。1ggplot(diamonds,aes(carat,price,colour=cut))+geom_point() 1ggplot(diamonds,aes(carat,price,colour=depth))+geom_point() 大家可以对比以上两句代码：我并没有指定任何实际的颜色，只是将colour颜色属性指定给离散变量cut或者连续变量depth,而输出的图表已经完成了默认的离散颜色映射和连续颜色渐变映射。 对于以上两种类型颜色使用场景，如果是要自行修改，则需要自行定义颜色标度： 常用配色方案简介：1scale_colour_XXX: 这里最经常适用的三种情况 第一种情况，使用ggthemes包中的颜色主题，其中有些非常流行的颜色主题，如经济学人的主题scale_colour_economist()、scale_colour_wsj(),还有excel的主题、tableau主题以及stata主题。 第二种情况，可以使用RColorBrewer包中的配色卡，以下是该包scale_colour_brewer()函数所允许使用的所有离散颜色色卡。 该配色系统方案给予我们三种关于分类变量的配色场景： 同色系方案，即在同一个色系中均匀取出若干个色段，用于分类变量填充，最终呈现的效果，看起来非常清爽，图中最上面的一排颜色均为此类。（适用于表达有序因子分类变量，比如GDP的分段呈现等） 二分色系方案，即两个色系方向平滑过渡，均匀取值，中间色一般为白色或者淡色。（适用于表达含有正负值的分类数量段，譬如增长率指标、利润率等） 多分类不同色系方案，取不同色系相对协调的一组颜色，这种情况比较适合用于表达仅作分类，分类项之间没有顺序和大小的普通情况。 以上色卡以及配色包是由一个著名的专做地图可视化配色方案的团队所开发的，网址如下，提供在线配色并免费下载服务。（网站可能被屏蔽，如无法打开需要使用VPN） RColorBrewer 当然第三种就是自己DIY了，R支持直接调用可识别的颜色名称以及颜色代码（16进制代码）。1scale_fill_manual(values=c("#FB882C","#5B88A0")) 或者1scale_fill_manual(values=c(&quot;Linen&quot;,&quot;Peru&quot;,&quot;PeachPuff&quot;,&quot;SandyBrown&quot;,&quot;Chocolate&quot;)) 连续型配色方案： 而针对连续型变量颜色修改的情况，可探讨的余地不多： 1234scale_fill_gradient（）scale_fill_gradient2（）scale_fill_gradient（） #允许分配一组双色连续渐变，low="white",high="red"scale_fill_gradient2（）#允许分配一组三色连续渐变，low="blue",mid="white",high="red" 配色方案案例演示：接下来针对以上几种情况，我分别演示一个案例： 12library("ggthemes")library("RColorBrewer") 离散型配色方案： 使用ggthemes包中的颜色主题（华尔街日报的主题色模板）1ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_wsj() 使用RColorBrewer包中的配色卡 1ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_brewer(palette="Greens") 使用DIY方式自己制作配色卡 1ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+scale_colour_manual(values=c("#84CEFC","#ACDAE4","#5C9EA4","#04FEFC","#4CD2CC")) 连续型： 双色渐变：1ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()+scale_colour_gradient(low="white",high="Blue") 三色渐变：1ggplot(diamonds,aes(carat,price,colour=depth))+geom_point()+scale_colour_gradient2(low="#8E0F2E", mid="#BFBEBE", high="#0E4E75",midpoint=median(na.omit(diamonds$depth))) 以上就是R中最常用到的配色技巧，可以满足我们大部分使用场景的需求。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>图表美化</tag>
        <tag>配色技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于数据地图的几个遗留问题解决方案]]></title>
    <url>%2F2017%2F06%2F18%2F%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%87%A0%E4%B8%AA%E9%81%97%E7%95%99%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[今天跟大家分享三个数据地图的遗留问题，包括以前因为技术手段限制无法解决的问题，以及读者吐槽最多的问题。 如何在一个版面上呈现不同行政级别的地理信息； 如何给版面添加mini导航定位窗口； 关于九段线问题。 问题一：关于第一个问题的解决方案，其实很简单，就是通过两个不同行政级别的图层进行叠加来达到目的。1234567library(maps) library("ggplot2")library("ggthemes")library("dplyr")library("maptools")library("grid")library("ggimage") 1234world_map&lt;-map_data("world")data&lt;-read.csv("D:/R/mapdata/Word_State.csv",stringsAsFactors = FALSE,check.names = FALSE) data1&lt;-filter(data,region=="Russia" | Address=="Asia")mymapdata&lt;-merge(world_map[,1:5],data1,type="right")%&gt;%filter(long&gt;=30 &amp; lat&gt;=10)%&gt;%arrange(group,order) 底层的区域地图：1234ggplot(mymapdata)+geom_polygon(aes(x=long,y=lat,group=group),fill="grey95",col="black")+coord_map("polyconic") +theme_map() 表层的中国省级行政区划地图：12china_map &lt;- readShapePoly("D:/R/rstudy/CHN_adm/bou2_4p.shp") china_map1 &lt;- fortify(china_map) 1234ggplot(china_map1)+geom_polygon(aes(x=long,y=lat,group=group),fill="white",col="black")+coord_map("polyconic") +theme_map() 将两个图层对象放在同一个图形对象中（注意先后顺序）。 12345ggplot()+geom_polygon(data=mymapdata,aes(x=long,y=lat,group=group),fill="grey95",col="grey")+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="white",col="black")+coord_map("polyconic") +theme_map() minimini导航窗口第二个问题，关于minimini导航窗口。 其实这个问题多少跟第一个问题有些关联，也是旨在给我们要呈现的中心地图一个区域定位的作用。解决方案依然是拼图，不过这次是拼的图表（整个图表对象），而非图表中的图层。 位于中间的中国行政区划地图： 1234p1&lt;-ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="white",col="grey")+coord_map("polyconic") +theme_map();p1 1234p2&lt;-ggplot()+geom_polygon(data=world_map,aes(x=long,y=lat,group=group),fill="grey95",col="grey")+annotate(geom="rect",xmin =30, xmax =155,ymin =10L, ymax = 55,colour="grey",fill="orange",alpha=.3)+theme_map() %+replace% theme(plot.background=element_rect(colour="black"));p2 拼贴合并：12vie&lt;-viewport(width=0.30,height=0.25,x=0.25,y=0.25)p1;print(p2,vp=vie) 第三个问题；也是被吐槽最多的九段线问题，这个问题，其实严格来说，我也没有办法搞定。 关于九段线问题：一般的九段线标识方法有两种，一种是在实际位置框定九段线范围，另一种则是将九段线的实际范围单独移至版面的边缘位置。第一种方法需要精确的九段线经纬点数据，获取不易，第二种则九段线位置过于灵活，然后不好掌握数据。 如果你能获取带有九段线数据的地图素材，那么这是最佳的解决方案，倘若不行，我们就要对图表后期进行处理（大部分人想到的方法是使用PS等软件，当然 这也是一种解决方案，至少清晰度上可以保证）。 但是既然是在R里面写代码，突然跑去玩PS总感觉怪怪的，能用代码解决的问题就不算问题，没错拼图嘛，R依然搞的定。 首先你要有个九段线素材图片。 123456jiuduanxian&lt;-"E:/数据可视化/R/R语言学习笔记/可视化/timg.jpg"ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="white",col="grey")+geom_image(aes(image=jiuduanxian,x=130,y=20),size=.2)+coord_map("polyconic") +theme_map() 我找的这个九段线素材可能跟中国地图风格搭配的不是很好，当然各位使用的时候可以自己去找相对准确、美观的素材使用。 最后提醒大家，关于九段线问题，一定要在报告或者文章末尾进行免责声明，涉及到领土争端问题，不仅仅要意识到，而且要尽可能的做好应对措施，避免不必要的麻烦。 关于数据源问题的说明： 点击博客左下侧的GitHub链接： 进入本人GitHub主页之后，打开名为datawarehouse的数据仓库； 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>数据地图</tag>
        <tag>九段线</tag>
        <tag>mini导航窗口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot的theme订制]]></title>
    <url>%2F2017%2F06%2F17%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E7%9A%84theme%E8%AE%A2%E5%88%B6%2F</url>
    <content type="text"><![CDATA[ggplot作图系统在R预言诸多可视化包中之所以如此的风靡，除了它拥有自己的图层理念之外，我觉得还要归功于它对于图表细节元素的灵活调整。 对于ggplot的初学者而言，可能没有太多的在意图表的主题是否优雅，配色是否美观，仅求能够准确无误的出图就OK了。 但是如果仅限于此，那么使用ggplot作图真的就是杀鸡用了宰牛刀了。 就拿默认的图表来说，虽然你只靠两句代码就可以跑出来一幅还算及格的图表，可是ggplot语法博大精深，背后给你的代码默认匹配的参数不计其数。 其中有一组特别庞大的参数组就是theme（）参数： 默认的图表再不添加任何自定义主题和配色的情况下，软件会给出默认的主题和配色： 默认主题是theme_gray,中一共给出了两套主题，分别是theme_gray、theme_bw 接下来我们来一步步验证： 首先加载包：123library（ggplot2）library（reshape2）library(ggtheme) 构造作图数据：12data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Conpany = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,3800,2900,2500,3300),Sale2016 = c(5050,3800,2900,2500,3300))mydata&lt;-melt(data,id.vars=c("Name","Conpany"),variable.name="Year",value.name="Sale") 初始化绘图：1ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity") 以上代码（已经简化的不能再简化了，不夸张的说，再少一个标点符号，就要报错了）跑出来的默认堆积条形图。 添加主题：可是在R预言可视化这个领域内，以上图表绝对是一个烂大街的货色，怎么说呢，因为你不修改主题，它搭配的主题永远都是theme_gray 12ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity")+theme_gray()ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity")+theme_bw() 以上两个图表分别套用了默认主题theme_gray()和备用主题theme_bw()，所以看去来前者与第一幅图无异，后者则差别很大。 虽然看起来修改主题好像很简单的样纸，殊不知，在主题内部，该函数是设定了不计其数、让人眼花缭乱的参数。 主题函数结构：你可以通过theme_gray 查看主题函数内的参数配置： 1theme_gray 1theme_bw 哈哈看傻眼了吧，其实仔细捋一捋，主题函数内的参数虽然繁杂，但是绝对算不上晦涩。 以下是自己整理的主题参数列表： 通过设定主题参数，你也可以制作专属的图表主题模板。 接下来我将设定一个简单的主题模板用于修改以上的图表主题； 1234567891011121314theme_xmf &lt;- function(..., bg='white')&#123; require(grid) theme_classic(...) + theme(rect=element_rect(fill=bg), plot.margin=unit(rep(0.5,4), 'lines'), panel.background=element_rect(fill='transparent', color='transparent'), panel.border=element_rect(fill='transparent', color='transparent'), panel.grid=element_blank(), axis.title = element_text(color='black', vjust=0.1), axis.ticks.length = unit(-0.3,"lines"), axis.ticks = element_line(colour = "grey20"), legend.title=element_blank(), legend.key=element_rect(fill='transparent', color='transparent'))&#125; 套用自己的自定义主题：1ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity")+theme_xmf() 这里要强调一点，主题中是不包含颜色模板设定的，因为颜色的使用场景及类别比较复杂，会有专门的颜色标度进行设定，其实就是scale_colour_xxx()/scale_fill_xxx()进行设定（分别为点、线色以及区域色） 这里暂且使用一个RColorbrewer色板中的渐变色装饰一下，不做过多解释，下一节，专门讨论颜色。 1ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity")+theme_xmf()+scale_fill_brewer(palette="Blues") 至于图表中的颜色填充顺序和图例相反，这个问题只需追加一句代码即可： 1ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity")+theme_xmf()+scale_fill_brewer(palette="Blues")+guides(fill = guide_legend(reverse = TRUE)) 其他的细节设定，下次讲。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>图表美化</tag>
        <tag>主题定制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leaflet的小搭档leaflet.minicharts来了，从此动态地图又多了一些乐趣~~~]]></title>
    <url>%2F2017%2F06%2F17%2Fleaflet%E7%9A%84%E5%B0%8F%E6%90%AD%E6%A1%A3leaflet-minicharts%E6%9D%A5%E4%BA%86%EF%BC%8C%E4%BB%8E%E6%AD%A4%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9B%BE%E5%8F%88%E5%A4%9A%E4%BA%86%E4%B8%80%E4%BA%9B%E4%B9%90%E8%B6%A3%2F</url>
    <content type="text"><![CDATA[本文内容取材自leaflet.minicharts包官方主页的案例介绍，本篇案例虽然是关于leaflet在线地图的辅助包，但是该包的出现对于leaflet生态系统来说，确是有着划时代的意义。 该包大大扩充了leaflet包所能呈现的图表形式，打破了散点图、路径图、热力图三类图表对于传统地图数据呈现形式的垄断地位。 该包为此提供了气泡饼图、玫瑰图、mini柱形图以及时间维度控制器等多种数据可视化元素。 以下便是作者对该包的简要介绍及案例演示： leaflet.minicharts包简介：一直以来，借助于Rstudio团队开发的交互式地图工具包——leaflet，在R语言中创建交互式地图已非难事。但是该包仅仅提供了很少的集中图表呈现类型，因而在一张单独的地图上呈现的数据信息量被大大限制了。 倘若你要在地图上呈现一些点数据，你只能需要使用两个变量定位出这些点在地图上的位置，然后更改点的半径和点的填充颜色来呈现数据。然后leaflet.minicharts包的出现大大改变了这一格局。你可以在利用其提供的两个附加函数，在leaflet包的交互地图上增加更多的mini图表。 这些mini图表可以呈现比之前多得多的变量数据（理论上不受变量数量的限制），目前为止，仅支持三种图表类型： barcharts (the default), pie charts and polar area charts. 数据预览：该包内提供了一个法国自2010~2017年包含电力产品、电力消费及结构变动趋势的数据集。 123456library("ggplot2")library("leaflet.minicharts")library(geojsonio)library(rgdal)data("eco2mix")head(eco2mix) 地图数据及作图数据整理：123456789101112131415161718192021222324geojson &lt;-readOGR("D:/R/mapdata/State/France.json","OGRGeoJSON",stringsAsFactors=FALSE)library(dplyr)prod2016 &lt;- eco2mix %&gt;% mutate( renewable = bioenergy + solar + wind + hydraulic, non_renewable = total - bioenergy - solar - wind - hydraulic ) %&gt;% filter(grepl("2016",month) &amp; area!= "France") %&gt;% select(-month) %&gt;% group_by(area,lat,lng) %&gt;% summarise_all(sum) %&gt;% ungroup()``` ### 制作背景地图：抽取了法国2016年的能源消费结构数据信息：```rlibrary(leaflet)library(leafletCN)basemap &lt;- leaflet(geojson,width ="100%",height="400px") %&gt;% amap() %&gt;%addPolygons(weight=1,color="#444444",opacity=1,fillColor ="white",fillOpacity =0.7,smoothFactor=0.5) 默认图表（柱形图）123456789renewable2016 &lt;- prod2016 %&gt;% select(hydraulic,solar,wind)colors &lt;- c("#3093e5","#fcba50","#a0d9e8")basemap %&gt;% addMinicharts( prod2016$lng, prod2016$lat, chartdata = renewable2016, colorPalette = colors, width = 45, height = 45 ) 气泡饼图12345678colors &lt;- c("#4fc13c", "#cccccc")basemap %&gt;% addMinicharts( prod2016$lng, prod2016$lat, type = "pie", chartdata = prod2016[, c("renewable", "non_renewable")], colorPalette = colors, width = 60 * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=0) 玫瑰图1：1234567basemap %&gt;%addMinicharts(prod2016$lng, prod2016$lat,type = "polar-radius",chartdata = prod2016[, c("renewable", "non_renewable")],colorPalette = colors,width = 60 * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=0) 玫瑰图2：1234567basemap %&gt;%addMinicharts(prod2016$lng, prod2016$lat,type = "polar-area",chartdata = prod2016[, c("renewable", "non_renewable")],colorPalette = colors,width = 60 * sqrt(prod2016$total)/sqrt(max(prod2016$total)),transitionTime=0) 添加时间趋势：柱形图（带时间趋势）123456789prodRegions &lt;- eco2mix %&gt;% filter(area != "France")basemap %&gt;% addMinicharts( prodRegions$lng, prodRegions$lat, chartdata = prodRegions[, c("hydraulic", "solar", "wind")], time = prodRegions$month, colorPalette = colors, width = 45, height = 45 ) 饼图（带时间趋势）12345678910prodRegions &lt;- eco2mix %&gt;% filter(area != "France")basemap %&gt;% addMinicharts( prodRegions$lng, prodRegions$lat, chartdata = prodRegions[, c("hydraulic", "solar", "wind")], time = prodRegions$month, colorPalette = colors, type="pie", width = 45, height = 45 ) 玫瑰图（带时间趋势）12345678910prodRegions &lt;- eco2mix %&gt;% filter(area != "France")basemap %&gt;% addMinicharts( prodRegions$lng, prodRegions$lat, chartdata = prodRegions[, c("hydraulic", "solar", "wind")], time = prodRegions$month, colorPalette = colors, type="pie", width = 45, height = 45 ) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>minicharts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——图表排版之一页多图]]></title>
    <url>%2F2017%2F06%2F17%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9B%BE%E8%A1%A8%E6%8E%92%E7%89%88%E4%B9%8B%E4%B8%80%E9%A1%B5%E5%A4%9A%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[昨天跟大家分享了关于图表嵌套的函数用法，今天跟大家分享在多图情况下如何正确的进行图表的版面布局。 这里要分享的图表版面设计其实就是指，在做了很多图的情况下，如何将诸多图表合理的布局在一张大的版面上，而不是一幅一幅的导出最后在其他软件中手动拼凑。 这个技能在制作多图仪表盘场景下，将会特别有用： 还需要强调下这里所指的一页多图与我们之前介绍过的分面可是大有不同，分面其实是一幅图表中，将分类变量所构成的分类图表分图呈现，但是本质上所有分面内的单个图表共享标题、图例、坐标轴刻度（虽然可以手动定义）。 也就是说分面的图表类型与诸多元素都是一样的，但是分面解决不了不同图表的排版布局问题：比如单独绘制而成的一幅散点图、柱形图和一幅饼图，分面将无能为力。 R语言中可以实现多图同页布局的函数有很多（我所知道的旧有大概四五种），但是有些参数略微复杂不便记忆，这里只跟大家介绍两种： 关于多图排版的函数简介： 一种是grid.layout函数（就是我们昨天所讲到的图表嵌套所用到的是同一个包），另一个是rmisc包中的multiplot函数： grid.layout函数： require(ggplot2) require(grid) 绘制备用图表（这里必须给图表命名，因为最后制作汇总图的时候需要引用图表名称） 123chart1 &lt;- ggplot(mtcars, aes(mpg, wt, colour = factor(cyl))) + geom_point()chart2 &lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point()chart3&lt;- ggplot(diamonds, aes(carat, depth, colour = color)) + geom_point() + facet_grid(.~color) 以上三个函数定义了三个图表对象，如果想要查看图表则只需给出图表名称然后回车即可： 123grid.newpage() ###新建图表版面pushViewport(viewport(layout = grid.layout(2,2))) ####将版面分成2*2矩阵vplayout &lt;- function(x,y)&#123;viewport(layout.pos.row = x, layout.pos.col = y)&#125; 定义图表的布局规则123print(chart3, vp = vplayout(1,1:2)) ###将（1,1)和(1,2)的位置画图chart3print(chart2, vp = vplayout(2,1)) ###将(2,1)的位置画图chart2 print(chart1 , vp = vplayout(2,2)) ###将（2,2)的位置画图chart1 以上函数将逐步按照之前的位置规则按照对应顺序绘制三幅图表，每打印一次你都可以看到画布上增加一个图表。 以上是该方法制作一页多图的全部过程，其实因为里面有自定义函数，看起来稍微有点儿麻烦，不过不影响理解。 multiplot函数：123library("Rmisc")library("lattice")library("plyr") 使用multiplot函数制作一页多图的语法非常简单，过程同样也是先制作出单个图表并命名，然后一句函数就搞定： 1multiplot(chart1,chart2,chart3, cols=2) 虽然使用multiplot函数非常方便高效，但是默认情况下，它不会对单个的图表长宽比例做最优布局，我们的案例中，chart3是一个水平分面图，属于矮款型的，但是multiplot函数将它压缩成长宽近似的矩形，放在四象限的第二个位置。 整体看上去，第一种方法虽然过程复杂些，但是局部灵活些，可以调整单个图表所占的空间，第二种方式更加高效、快捷，但是布局上欠缺优化（也许是我还没有接触到内部的局部调整参数，有懂的小伙伴儿麻烦指导一下，不胜感激）！ 对了，做完图之后记得使用dev.off() #函数关闭活动版面，否则会影响之后的其他不相关图表！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>版面控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot携手plotly，让你的图表灵动起来！]]></title>
    <url>%2F2017%2F06%2F16%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E6%90%BA%E6%89%8Bplotly%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84%E5%9B%BE%E8%A1%A8%E7%81%B5%E5%8A%A8%E8%B5%B7%E6%9D%A5%EF%BC%81%2F</url>
    <content type="text"><![CDATA[这段时间一直在研究ggplot2这个神奇的可视化利器，可是ggplot2纵然所向披靡，唯独无法呈现动态效果！ 最近发现R语言的官方CRAN中有一款名叫plotly的包，详细了解了下，这个plotly是基于js脚本语言开发的专用于动态交互可视化的利器，开发有在线版和桌面本，而且效果相当不错！ 而这里提到的plotly包就是该机构专门针对R语言环境发布的可视化包（具有不仅R语言，给MATLAB和Python都留有接口），不但可以协助ggplot2包将静态图表动态化，而且拥有自己独特的作图函数语法（语法非常精炼，据说是参考ggplot的语法写的，基本上一看就懂）。 今天只涉及ggplot结合plotly而动态化图表的功能，暂不涉及plotly的独有作图函数。（主要是自己也正摸索中，找个合适的时间再跟大家分享）。 这个包因为是辅助ggplot2开发的，所以需要ggplot2包同时加载协同工作。 包下载及加载：123devtools::install_github("ropensci/plotly")library("plotly")library(ggplot2) 数据集预览：这里我将使用ggplot2的内置数据集diamonds先做出图表，然后使用plotly函数进行动态化。 为了更加明显的看出最终的动效，这里使用随机取样，只抽取500个记录。 123set.seed(2333)mydata &lt;- mydata[sample(nrow(mydata), 500), ]head(mydata) plotly动态图表演示：1ggplot(mydata,aes(carat,price,colour=color))+geom_point() 接下来是我们要重点关注的地方，以上使用ggplot函数制作的默认的散点图，是一张静态的不带任何交互效果的图表。 尽管ggplot的作者在图表背后针对默认的图表主题及背景做了深度美化，但是没有动态效果这一点儿着实让人感觉有点儿美中不足： 我所说的动态效果是指：当鼠标悬浮到任何一个数据点，立马会有弹出文本框显示该数据点的具体指标信息，当鼠标点击图例中的分类标识时，显示对应分类项下的数据点，而其他未被选中的数据点均会自动隐藏或者淡化（变成浅灰色）。这是我所理解的动态图表的最基础属性。 但是有了plotly包的辅助，ggplot所做出来的图表立马可是实现以上所述的功能： 而所需要的函数却极其简单： 1ggplotly() 运行完以上代码，再次zoom你的图表，仔细观察你会发现，图表右上角多出了一行菜单，而且当你将鼠标悬浮在任意一个数据点上时，立马回弹出对应的文本信息对对应数据点进行详细注释。 更加不可思议的是，当你用鼠标单击右侧图例对应分类项，则图表中会对应只显示选中的分类项目数据点； 右上角的菜单中你可以自由选择将图表聚焦呈现、放大缩小、保存为图片等多种功能。 下面是我录制的一个动态小视频，可以感受下plotly带给ggplot的动态交互体验： 而且这种动态效果机会不受ggplot图表类型及版面的限制，在分面情况下，动态效果依然如故：12ggplot(mydata,aes(carat,price,colour=color))+geom_point()+theme_economist()+scale_colour_economist()+facet_wrap(~cut)ggplotly() 以上图表中加入了经济学人的主题及配色模板，动态效果依然还在，有了这种动态效果，展示呈现多维数据方面，省去了不少麻烦，特别是分类较多时，一时半会很难弄清楚某种分类的整体分布情况，而通过动态选择，可以很容易的过滤掉暂时无关的分类项对信息获取的障碍。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>动态图表</tag>
        <tag>版面控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Excel依然是一款强大的数据可视化利器~]]></title>
    <url>%2F2017%2F06%2F16%2FExcel%E4%BE%9D%E7%84%B6%E6%98%AF%E4%B8%80%E6%AC%BE%E5%BC%BA%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[早期的数据小魔方用户大概都知道，我最初也是从学习Excel起步的，只是学习的深入了之后，才开开慢慢的迁移到R语言。 我往R语言转型并不代表自己开始放弃Excel或者觉得Excel不适合做可视化，只是想体验一下Excel外围的可视化世界是什么样子的，毕竟在这个大行业内，还活跃着太多可视化领域的佼佼者，譬如 PowerBI、Tableau等。 对图表的粗浅认识：当然，这些软件各有特点，但是在要划分一个类别的话，我觉得可以划分为三类： Excel（以及寄生于Excel平台的各种辅助软件dashboard、Think-cell-chart） 桌面端可视化工具（以Tableau、PowerBI等） 编程工具。（以R语言、Python以及各种js开源可视化库） 但若要继续对其进行简化分类的话，我觉得其实可以分为两类： Excel家族； 非Excel家族。 也许这里的分类大家会觉得摸不着头脑，我的理由是，数据可视化很重要的一步即是对原始业务数据结构的理解，而在Excel的图表库中，微软所设计的图形库是基于二维表的。（因为Excel自由灵活的表结构不限制变量类型，不识别因子变量（即用于构造模型或者用于图形映射））。 也许以上解释并不能令你满意，这里我只强调一点，同样制作一个多分类的柱形图（或者条形图），假若你获取的原始数据是三个字段，一个门店名称，一个季度标签，一个销售额，那么这种数据结构你是无法对其进行图表化呈现的，你需要借助Excel的数据透视功能，对其进行维度交叉透析，进而使用汇总表（二维表）进行多分类图表构建。 以上就是Excel中图表构建原理的大致过程，而除Excel之外的数据可视化产品，基本上都是使用一维表结构（长数据）来构建可视化图形的。其中因子变量（即通常意义上的分类变量）充当着至关重要的作用。 这也是用惯了Excel的小伙伴儿，如果想要迁移到其他可视化工具上，迈出的第一步往往无比艰难（也不能一概而论，假如你经常使用Excel的数据透视表功能，并且对数据库有所了解，对于数据的长宽转换应该早就烂熟于心了，这道坎不会困扰你太久）。 二维表有二维表的好处，即所见即所得，因为二表已经具备一定的图形化特征，而不单单是表了，但是二维表作图在效率上有着天然的劣势，即你会淡化对数据数据结构的理解，会被Excel的这种作图理念所吞噬，进而被绑架。（纯属个人愚见） 又扯远了，今天的主角仍然是Excel，我使用自己学习以来的案例来说明，Excel仍然是一款不折不扣的优秀可视化工具。 ###案例模仿： 学习的第一步当然是模仿，所以才有了这些积淀很久的案例： 调整高难度案例：模仿可以快速提升你的“图感”，然后你会更大胆的去挑战高难度动作： 尝试着自己找案例练习：等有了足够的经验和技巧积累，尝试着自己找案例去做： 实习中接触项目锻炼：实习是很好的锻炼机会，可能你不需要做高难度高复杂度的工作，但是你能学到如何平衡技能与实际业务数据，融合并凝练细节。 Excel的强大远不止于此，如果你能习得名称管理器、开发工具与高级查询函数，那么制作动态仪表盘是分分钟的事儿，再将平时里积淀的优秀版式、配色方案等融入其中，那么你的工作价值一定会呈指数级增长。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>可视化案例呈现</category>
      </categories>
      <tags>
        <tag>Excel</tag>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习R语言我都做了那些有趣的事情！！！]]></title>
    <url>%2F2017%2F06%2F16%2F%E5%AD%A6%E4%B9%A0R%E8%AF%AD%E8%A8%80%E6%88%91%E9%83%BD%E5%81%9A%E4%BA%86%E9%82%A3%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%8B%E6%83%85%EF%BC%81%EF%BC%81%EF%BC%81%2F</url>
    <content type="text"><![CDATA[学习R语言已经整整一年光景了， 是时候整理一下自己学习以来的收获和成就。 虽然一直学的很专注（一直埋头在可视化的小圈子了，总感觉这样是停留在舒适区，也许外面的风景会更好），但是专注有专注的好处，就是每一个细节都有机会做的更好！ 以下是我学习以来自己练习过程中的一些案例，包括给别人定做的报告、高仿的商务图表、以及我尝试着创新出的一些好玩的创意图表，集中分享给大家。 以下案例按照时间顺序排列： 刚入门没多久，就跃跃欲试的开始模仿那些曾经用Excel做过的商务图表 也热衷于制作各种炫酷的信息图： 练习了大量的数据地图（所以才有资格跟大家输出地理信息可视化案例呀！） 给别人定做过一些有报酬的小作品： 尝试着爬取数据，做一些地理信息可视化作品： 一些零零散散的小创意也会令自己成就感爆满： 以上所有图表（不含文字云）都是基于R语言ggplot2包绘制； 回首学习的过程，虽然很痛苦但也都挺过来了，没有专门学习R语言的相关课程（几乎也不存在这种可能，因为我在案例中融入的元素并不是来自于R语言本身，而是以前积淀的可视化基础），也几乎没有正儿八经的看完一本R语言可视化的参考书。 当然这些并不是全部，还有很多案例来不及给大家分享，那些学完爬虫之后，自己能够遍历网页，获取实用数据的时刻，确实非常令人振奋。 也许学习技能的最好方式，就是立马用起来，做一些有趣的事情，时刻保持着热情，那么总能有所收获！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>可视化案例呈现</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>商务图表</tag>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——图表嵌套（母子图）]]></title>
    <url>%2F2017%2F06%2F15%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9B%BE%E8%A1%A8%E5%B5%8C%E5%A5%97%EF%BC%88%E6%AF%8D%E5%AD%90%E5%9B%BE%EF%BC%89%2F</url>
    <content type="text"><![CDATA[之前在学习ggplot的时候，一直存在着一个困惑。 就是这个函数是否允许两个做出来的两个相关图表重叠嵌套（也就是在一个大图（主图）的边缘位置，放置另一个缩小版的小图）。 这个想法很奇葩，本来想着没啥希望，鉴于该包的开发者那犀利的审美观，估计也不能允许这种情况的发生。 不过最近浏览一位大神的博客，真的有这种情况的解决措施，喜出望外，赶紧在这里分享给大家。 不过他的处理方式不是通过ggplot的内置函数，而是通过grid包中的viewport函数来实现的： 以下是具体的实现步骤： 加载包：12library(ggplot2) #用于画图，主图和附图都使用ggplot的内置数据集library(grid) #用于设定附图的长宽及叠放在主图的精确位置 加载并预览数据集：这里我们还是使用关于钻石的那个数据集（之前的图表案例很多都是使用该数据集）12data(diamonds)head(diamonds) 制作复合图的主图：1chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(0.9,0.72),legend.background=element_rect(I(0))) 以上函数可以制作出以carat和price为主要对应关系的散点图，同时分类变量cut通过颜色映射进行区分。最后调整了图例位置和图表背景。 设定附图长宽及分布精确位置： 1vie&lt;-viewport(width=0.669,height=0.4,x=0.7,y=0.306) 制作附图:123456789101112chart2 &lt;-ggplot(diamonds,aes(depth,fill=cut,alpha=.2))+geom_density()+xlim(54,70) + theme(axis.text.y=element_text(face="bold",colour="black"), axis.title.y=element_blank(), axis.text.x=element_text(face="bold",colour="black"), plot.background=element_rect(I(0),linetype=0), panel.background=element_rect(I(0)), panel.grid.major=element_line(colour=NA), panel.grid.minor=element_line(colour=NA), legend.background=element_rect(I(0),linetype=1), legend.position=c(0.85,0.72))chart2 #预览附图 因为附图要放置在主图边缘并且缩放很大比例，为了防止其背景和网格线系统遮挡主图的重要信息，对其主题元素进行了大量的简化。 将主图与附图合成一并显示：1print(chart2,vp=vie) 将以上代码打包组合：1234567891011121314chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(0.9,0.72),legend.background=element_rect(I(0)))chart1vie&lt;-viewport(width=0.669,height=0.4,x=0.7,y=0.306)chart2 &lt;-ggplot(diamonds,aes(depth,fill=cut,alpha=.2))+geom_density()+xlim(54,70) + theme(axis.text.y=element_text(face="bold",colour="black"), axis.title.y=element_blank(), axis.text.x=element_text(face="bold",colour="black"), plot.background=element_rect(I(0),linetype=0), panel.background=element_rect(I(0)), panel.grid.major=element_line(colour=NA), panel.grid.minor=element_line(colour=NA), legend.background=element_rect(I(0),linetype=1), legend.position=c(0.85,0.72))print(chart2,vp=vie) 其实仔细看这种做法，里面也不外乎图层叠加，先做出主图，然后通过viewport函数将附图缩小并叠加到主图上，不过这种方式用来展示一些需要多角度透视的数据分布问题还是很合适的，而且因为是依赖于不同的包，所有主图与附图之间没有严格的类型限制，你所需要做的只是调整好两个图表的位置与大小，别让彼此相互遮挡掩盖重要信息就OK了。 下面我将附图的类型更换为堆积直方图大家看下效果：1234567891011121314chart1&lt;-ggplot(diamonds,aes(carat,price,colour=cut))+geom_point()+theme(legend.position=c(0.9,0.72),legend.background=element_rect(I(0)))chart1vie&lt;-viewport(width=0.669,height=0.4,x=0.7,y=0.306)chart2 &lt;-ggplot(diamonds,aes(depth,fill=color))+geom_histogram()+xlim(54,70) + theme(axis.text.y=element_text(face="bold",colour="black"), axis.title.y=element_blank(), axis.text.x=element_text(face="bold",colour="black"), plot.background=element_rect(I(0),linetype=0), panel.background=element_rect(I(0)), panel.grid.major=element_line(colour=NA), panel.grid.minor=element_line(colour=NA), legend.background=element_rect(I(0),linetype=1), legend.position=c(0.85,0.72))print(chart2,vp=vie) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>版式设计</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——地图与气泡图结合应用]]></title>
    <url>%2F2017%2F06%2F14%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8E%E6%B0%94%E6%B3%A1%E5%9B%BE%E7%BB%93%E5%90%88%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[今天跟大家分享如何在地图上进行散点图、气泡图绘制。 昨天跟大家介绍了ggplot函数进行地图绘制的原理，通过轮廓点和分组来定义每一个地区（国家边界），通过多边形填充来完成区域填色。 ggplot的图层叠加原理允许许我们在坐标系统的叠加多个图层； 所以在地图上叠加散点、甚至气泡可以很容易的实现： 包的导入：123library(maptools)library(ggplot2)library(plyr) 导入地理信息数据：12china_map &lt;- readShapePoly("c:/rstudy/bou2_4p.shp") # 读取地图信息数据china_map1 &lt;- fortify(china_map) #转化为数据框 业务数据导入及作图数据合并：123mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv") #读取业务数据province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") #读取省会城市坐标china_data &lt;- join(province_city, mydata, type="full") #合并两个数据框 地图语法：123456789101112131415ggplot()+ geom_polygon(data=china_map1, aes(x=long, y=lat, group=group), fill="grey95", colour="grey60")+ geom_point(data=china_data, aes(x = jd,y = wd, size=zhibiao, fill=zhibiao2, alpha=0.3), shape=21, colour="black")+ scale_size_area(max_size=8)+ scale_fill_gradient2(low="DarkCyan", mid="Azure", high="Sienna", midpoint=median(na.omit(china_data$zhibiao2)))+ coord_map("polyconic") +ggtitle("Heat&amp;Bubble plot")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = "none" ) 以上语法中，使用了geom_polygon()多边形函数来定义并填充地图背景 （注意里面的fill参数（指定地图区域颜色），colour参数指定多边形（也就是地区轮廓线）边框颜色），然后通过geom_point()函数添加散点图图层。 图层中指定数据源为合并后的业务数据，散点面积（大小）用zhibiao1来映射，气泡图颜色用zhibiao2来映射（本来散点是只有点颜色（使用colour控制，没有填充色的，可是当给散点指定其形状后，散点就有了面积属性可以使用fill进行颜色填充），气泡的轮廓线用colour来指定）。 之后的scale_size_area（）和scale_fill_gradient2（）是对前面geom_point内的fill与size两个标度进行的深度调整，scale_size_area（）告诉软件散点大小与面积要严格的与指标1具体数值大小成比例，并规定面积最大为25。 scale_fill_gradient2（）定义了一个三色渐变，low、mid、high分别由一个颜色代码控制，同时均值颜色要映射给指标2的平均数。 最后的ggtitle定义主题，theme内的参数清除掉所有图层上的无关元素（背景、网格系统、横纵轴标签、刻度线、轴标题、图例） 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>ggplot2</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>ggplot2</tag>
        <tag>数据地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用R语言抓取网页图片——从此高效存图告别手工时代]]></title>
    <url>%2F2017%2F06%2F13%2F%E7%94%A8R%E8%AF%AD%E8%A8%80%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E2%80%94%E2%80%94%E4%BB%8E%E6%AD%A4%E9%AB%98%E6%95%88%E5%AD%98%E5%9B%BE%E5%91%8A%E5%88%AB%E6%89%8B%E5%B7%A5%E6%97%B6%E4%BB%A3%2F</url>
    <content type="text"><![CDATA[今天这个标题实在是有点言过其实了，对于R的爬虫知识，我只是领会了一点儿皮毛。 主要看不懂正则表达式，特别是那种一个括号里要匹配多种类型文本的语句，特像火星文，估计短期很难搞懂了。 再加上对于HTML结构没啥感觉，在目标定位上很苦恼。 但是相对于文本信息而言，图片在html中的地址比较好获取，这里仅以图片抓取为例，会Python爬虫的大神还求轻喷~ 今天要爬取的是一个多图的知乎网页，是一个外拍的帖子，里面介绍了巨多各种外拍技巧，很实用的干货。 网页分析：1234library(rvest)library(downloader)library(stringr)library(dplyr) 知乎某外拍帖子 打开网页之后，在帖子内容里随便定位一张图片，然后单击右键——检查元素（Ctrl+Shift+I），页面右侧弹出的网页结构会自动定位到该图片的地址，你会看到该图片在html结构中的名称标签：——（img）;地址标签——（src）。 我们想要获取的就是该图片的地址信息，你可以尝试着使用downlond函数下载单张图片。 12url&lt;-"https://pic4.zhimg.com/2db250e935ca4f1b8b2b546c60104067_b.jpg"download(url,"D:/R/Image/picturebbb.jpg", mode = "wb") 这样就完成了自动下载过程，但是图片地址仍然是肉眼观察获取的，显然不够智能，我们想要的效果是通过一个函数自动的批量获取图片地址并下载图片。 那么下一步的目标就很明确了，如何通过函数批评获取图片地址，然后将包含图片地址的字符串向量传递给下载函数。 以上就需要我们大致了解html的构建了，知道所有的图片存放在html构建的那一部分里面，通过网址定位到图片存放区间，通过获取图片存放的区间，批量获取图片地址，然后传递给下载函数执行。 太深入的我也不太了解，但是html的常用结构无非是head/body/,head中存放网页标题和导航栏的信息（我是小白，不要吐槽以上每一句话的准确性哈~），而我们要抓取的目标图片肯定是存放在body中啦。 继续打开body部分，你会被一大摞的 结构晃瞎眼，不要担心，我已经瞎了好几回了~—~ div是html里面的分区结构，每一个分区都是以开头,以结尾。（html中几乎所有结构都是这种方式，仔细观察一下其他形式的结构就会发现）。 当然div分区有N多个，而且div结构本身可以层层嵌套。对于太复杂的网页，在你发现图片存放的div分区之前估计会先被div语句晃瞎眼。 那怎么办呢，还记得在本文开始部分，说的那个手动定位吗，依靠浏览器的审查元素功能，我们可以先定位要下载的第一张图片，右键——检查，找到该图片的div分支结构。 我们需要获取的信息是该图片的div分区名称信息（就是div结构中的class属性或者ID属性） class和ID获取其中一个就行，如果是class属性，则地址书写规则是：div.class，如果是ID则规则是div#ID。 如果class和ID中字符较长，且单词间存在空格，空格以英文.号替换。 以上图片的div分支结构定位信息就可以写作div.zm-editable-content.clearfix 其实这里有一个简便方法，如果你不确定自己定位的区间是否正确的话，可以查看右下角的html路径（可以自动根据你的鼠标所在的html位置定位父级路径）。 简单爬取测试：接下来使用read_html函数获取网页并一步一步的定位图片地址。 12url &lt;- 'https://www.zhihu.com/question/19647535'link&lt;- read_html(url)%&gt;% html_nodes("div.zm-editable-content.clearfix")%&gt;%html_nodes("img")%&gt;%html_attr("src") 我们需要获取的是图片所在div分支结构中的img标签下的src内容（也就是图片地址），那么如果不想抓取一大堆不相干的图片的话，就必须明确目标图片的存放位置，以上代码过程从url(该知乎帖子页面网址)定位到目标图片所在的div分支结构，然后定位到分支结构中的img(图片标签)中的src信息（也就是目标图片网址）。 运行以上两句代码并以head函数预览link向量的前几行，查看获取的图片地址是否正确。 很遗憾，我们获取的存放图片地址信息的字符串向量中，每隔一行都有一个无效网址，如果不清除掉这些无效网址或者筛选出那些完整的网址的时候，download函数执行到无效网址会终端，下载过程就会失败。 这里需要使用stringr包来进行条件筛选。 12pat = "https"link&lt;-grep(pat, link,value=TRUE) 匹配之后，只保留了完整的图片网址，这就是我们最终要的结果。现在可以使用一个for循环来自动执行图片批量下载任务。 12345dir.create("D:R/Case/") #新建文件夹for(i in 1:length(link)) &#123; download(link[i],paste("D:/R/Case/picture",i,".jpg",sep = ""), mode = "wb")&#125; #一个循环批处理所有下载任务 至此，爬虫的代码部分完成，剩余的时间……嘿嘿，泡一杯咖啡，看会儿美剧，静静地等待软件完成自动下载过程吧（速度视图片原始大小和宽带速度而定）。 结束之后，到D盘的Case文件夹下浏览下刚才下载的成果： 394张图片全部顺序标号，乖乖的躺在文件夹里了（当然里面还包含各种表情包图片，这个，我真的不太会分辨，暂时木办法）。 内容总结：下面就今天分享内容总结以下几点： 用R抓取图片的核心要点是获取html结构中存放图片的div分区中的img标签内的src内容（也就是图片地址，有时候可能需要使用read_src内的地址）。图片的目标div分区结构的选取至关重要（如果你不指定div分区地址、只使用img标签下的src定位的话，很有可能抓取了全网页的图片网址，各种特殊符号和表情包、菜单栏和logo图表都会被抓取）如果不太确定自己定位的div结构是否正确，可以借助鼠标选取+html路径信息来定位；有时候有些网页的图片不是集中存放在单个div分区结构中，而是每张图片都是单独的div结构，这时候如果还是定位的最底层div分区位置的话，那么你可能只能获取单张图片地址。这时候适当的定位父级div分支结构名称（酌情观察，看那个父级结构范围可以涵盖所有目标图片的子div分支结构）还有一种情况，就是有些公开的图片网站图片存储结构非常规则，分页存储，单页中单个div结构下的一组图片名称是按照数字顺序编号的： 比如： 123456http：//################.1.jpg http：//################.2.jpg http：//################.3.jpg http：//################.4.jpg ……………………………………… http：//################.n.jpg 如果你碰到这种存储方式的图片网页，那你真的太幸运了，不用再傻乎乎的去从网页地址的html结构中一步一步的去定位图片地址了，直接使用for循环遍历完所有的图片网址，然后直接传递给download函数批量下载就OK了。 1234567891011for(n in 1:50) #自己定位到网页最后一个子页面，查看下最大的图片编号是多少。 &#123; link&lt;- c(paste("http：//################/",n,".jpg",sep=""),link) &#125;for(i in 1:length(link))&#123; download(link[i],paste("D:/R/Case/picture",i,".jpg",sep = ""), mode = "wb")&#125; 这样完全避免了从网址中曾曾定位获取图片地址的麻烦，直接就可以获取全网页所有目标图片的地址，效率就更高了。 以上是小魔方最近学习过程中的一丁点儿心得，会爬虫的大神别喷我，我真的是个小白~ 声明： 以上图片爬虫代码仅作个人练习R语言爬虫使用，各位小伙伴儿练习完毕之后，请尊重知乎原答主的版权，勿将所抓取图片商用，或者直接删除。学好技术也要遵守底线，做一个规矩的技术达人。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>网络爬虫</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>爬虫</tag>
        <tag>revst</tag>
        <tag>网络抓取</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[当PowerBI遇到R语言]]></title>
    <url>%2F2017%2F06%2F13%2F%E5%BD%93PowerBI%E9%81%87%E5%88%B0R%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[PowerBI作为微软系最新的商务智能办公系统，自去年发布以来，一直都备受瞩目。 他的更新频次相当之高，功能更新迭代非常迅速。 大概对可视化领域稍有涉猎的朋友们，都明白其中缘由，大数据与云计算的趋势席卷全球，海量数据处理成为了限制各行业发展的掣肘。而受制于编程工具的门槛，大部分数据处理业务人员，可能要严重依赖Excel以及其他无需编程的可视化自助操作软件。 以上需求也称为自助式BI工具，也就是无需IT人员主导的、业务人员可自行操作的商务智能工具。 而目前这个领域，Tableau的成功商业化使其已经赢得先机，广大的用户基础以及多次功能迭代，无论是在可视化呈现形式还是报表的质量上都可圈可点。 微软帝国必须亮出必杀技了（为什么没有盖茨的软件在什么事情上都落后一拍，移动操作系统、搜索、智能终端），前期在office2013版就已推出PowerQuery、PowerPivot、PowerView、PowerMap等四款高质量插件。 在最新的Excel2016版中更是将其封装成内置程序（这样就不用自己配置各种环境啦）,同时将四件套整合，建立了PowerBI的在线平台和桌面端工具PowerBI Desktop。 虽然PowerBI的可视化图表类型和质量（受制于开发周期和市场经验）还不够完善，但是免费呀（Tableau据说几千刀呢）……这一条就够啦…… 当然PowerBI自出生始就含着金汤勺，地图库是对接的BingMap,依靠PowerQuery的支持具备强大的数据源获取能力、依靠PowerPivot的支持又增添了功能强大的数据建模处理能力，PowerView与PowerMap结合基本上可以解决大部分的可视化形式。 除此之外，PowerBI的在线社区允许广大开发者贡献高质量的、令人眼花缭乱的新型可视化对象。（你以为PowerBI只有内置的那几款图表对象吗，去他的社区看一看吧，里面能淘到很多好东西）。 第三方可视化库网址： 这些可视化视觉对象在社区中被划分为两类： Custom visuals R-powered visuals 今天要跟大家分享的内容仅包含内置视觉对象中的R脚本和在线社区的R风格视觉对象。 下面是干货~ 使用体验：最近试用了PowerBI的R语言脚本对象功能，虽然用着很蹩脚，但是作为微软商务智能系统开始尝试对接主流统计学编程语言的开始，这一步还是很有意义的。 接下来就针对我所经历的使用体验跟大家分享一下（其实还是吐槽居多）： PowerBI中支持的R相关的图表有两类： 一类是需要在R中自建脚本代码执行，插入R图形对象来显示输出结果的形式。 另一类是PowerBI线上社区以及官方平台引用并借鉴优秀的R语言可视化包所封装的PowerBI视觉对象。 第一种需要大家有R基础，会书写图形代码。导入数据集后，输入并运行R代码即可在PowerBI页面生成R语言风格的可视化图表。（当然既然是运行的R代码，前提你PC上肯定得事先安装好R的Gui程序，如果有Rstudio的话,PowerBI也是支持调用的。） 这种方式基本相当于把PowerBI作为R的第三方IDE了，不过现在称它为R的第三方IDE确实为时过早，因为…… 它的代码运行效率和操作体验简直不能再烂，别说RStudio,就连R的官方Gui界面都要比它好用好几倍…… 代码时效速度超级慢； 需要事先导入数据集； 只能在数据对象中显示图形对象而无法显示文本信息； 第一类R语言视觉对象案例演示：接下来我运行几段程序作为案例演示： 自建R脚本需要在开始——获取数据——插入RScript对象： 在弹出的执行R脚本输入框中以R代码的形式获取数据： 1data(mtcars) 待连接成功后，导入数据集： 数据模型加载完成后，在PowerBI右侧的字段列表中会列出数据集的所有可用字段，在左侧左上角表格栏目可以展示并预览整个数据观测值。 数据集导入之后，在可视化图表对象中选择R脚本，并插入，同时将右侧字段列表中需要用到的字段拖入值区域。 你发会发现，插入R脚本对象后，执行的所有鼠标操作在R脚本编辑器中都被记录为R代码（很类似Excel中的录制宏啊有木有~）。 现在你可以在R脚本编辑器中自由的编写并执行代码了。（代码与R中的一样，写完一句代码，选中点击编辑器的运营按钮）1234library(ggplot2)library(RColorBrewer)library(ggthemes)ggplot(mtcars,aes(qsec,disp,colour=factor(cyl)))+geom_point()+theme_economist()+scale_colour_economist()+guides(colour=guide_legend(title=NULL)) 1ggplot(mtcars,aes(qsec,disp,size=mpg,colour=factor(cyl)))+geom_point()+scale_size_area()+theme_economist()+scale_colour_economist()+guides(colour=guide_legend(title=NULL)) 接下来我使用diamonds数据集（来自ggplot2包）123library(ggplot2)library(ggthemes)ggplot(diamonds,aes(depth,fill=color))+geom_histogram()+theme_economist()+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+scale_x_discrete(limits=c(50,70)) 虽然以上图表都很完美的输出了结果，但是过程还是很艰辛的，PowerBI无法像在R里面调用数据集那么方便，每次想换一个数据，都要重新建立一个RScript对象。 第二类R语言视觉对象案例演示：下面跟大家介绍关于PowerBI的的第二类R视觉对象，也是个人比较推荐的一类。 因为这些视觉对象是经过开发者努力改造过了，基本上不需要你写代码就可以输出的精美图表（因为是后台调用的R程序，所以依然需要你事前安装R软件）。 这一类图表对象你可以在PowerBI的线上开发者社区下载到图表插件和案例demo。 每一个R图表对象都提供插件下载和Sample独享可供参考。 下载完事儿之后，在可视化菜单中导入视觉对象。 插入刚才导入的相关性可视化图表对象，并将要呈现的相关性的字段拖入Values字段框中。 之后你会发现图表对象会自动相关热力矩阵图。（颜色深浅代表相关性大小，正为蓝，负为红） 该图表对象调用的是R中的corrplot函数。我们在RStudio中使用该函数生成相似的案例图。 1234library(corrplot)data(mtcars)corr &lt;- cor(mtcars[,c(1,3,4,5,6,7)])corrplot(corr) 看吧是不是很像呢~ 和相关性矩阵图一样的R图表视觉对象在社区中一共有6个（包含Correlation plot）。 以上六个图形视觉对象都是包含着统计算法和统计模型的视觉可视化对象，经过设计师的精心设计，复杂的统计算法模型呈现出精美的视觉图表图表对象，决策者可以在不用深入了解模型和算法原理的基础上，很直观的领会模型所表达的决策信息。这就是数据可视化的魅力所在。（当然如果能具备这些模型的理论基础的话，用起来就更加的得心应手啦） 小魔方已经将微软第三方应用平台的所有视觉对象插件打包整理（包含R对象的几款插件），共享在魔方学院的QQ群文件里啦，想要体验的小伙伴儿赶快去下载吧~ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>PowerBI</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>在线地图</tag>
        <tag>PowerBI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——多边形与数据地图填充]]></title>
    <url>%2F2017%2F06%2F12%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E5%A4%9A%E8%BE%B9%E5%BD%A2%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E5%A1%AB%E5%85%85%2F</url>
    <content type="text"><![CDATA[ggplot函数中有一类特殊的图表类型叫做多边形，很难用传统的视角来定义它属于哪一类图表，因为它能够呈现信息多种多样。 特别是在做某些比较高阶的图表——地图时，这种多边形函数便能够大显神通。 之前本公众号所推送的所有涉及地图图表绘制所使用的技巧，几乎全部都依赖多边形函数的支持。123library(ggplot2)library(plyr)library("maptools") 这里以之前推送过的全球地图为例： 传统做法（shp形状）1world_map &lt;-readShapePoly("c:/rstudy/wold_map/World_region.shp") 使用路径图进行区域轮廓描边：12ggplot(world_map,aes(x=long,y=lat,group=group)) +geom_path() 更改路径线为白色，清除掉背景和网格线以及坐标轴：1234567ggplot(world_map,aes(x=long,y=lat,group=group)) +geom_path(colour="steelblue")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 使用多边形进行描边并填充：（在多边形中是可以进行线条与形状分别填色的）12345ggplot(world_map,aes(x=long,y=lat,group=group)) +geom_polygon(fill="white",colour="grey") + theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 这就是我们之前所制作的填色地图的主体代码语句，数据集是从shp文件导入，可以看出，其实只需要三列字段信息，就可以画出一幅地图来：经纬度（二维坐标信息，也可以看作是一组代表X、Y轴的散点），另外的一列变量group其实是一个分类变量，将同一个单位区域轮廓（一个国家或者地区、岛屿等）用一组相同的编号表示。 如果再加上一列连续数值变量，可以将其指定为fill渐变填充的参考指标，那么最终完成的图表就是一幅按照不同地区指标大小对应渐变填色地图。 内置地图素材包：其实这种不带任何实质数据信息的地图，很多R包中都有提供：（这里以maps包为例）1234567library(maps)states&lt;-map_data("state")ggplot(states,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) map包是一个专门用来做地图的加载包，里面存有几个可以用的地图数据包：123456states&lt;-map_data("world") #全球地图ggplot(world,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 123456france&lt;-map_data("france") #法国地图ggplot(france,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 123456county&lt;-map_data("county") #美国郡级ggplot(county,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 添加地图投影：12345france&lt;-map_data("france") #法国地图ggplot(france,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+coord_map("polyconic")+theme( axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 12345county&lt;-map_data("county") #美国郡级ggplot(county,aes(long,lat,group=group))+geom_polygon(fill="white",colour="steelblue")+coord_map("polyconic")+theme( axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank()) 地图图表作为ggplot函数中一大类比较高阶的图表，可以做出很多让人眼花缭乱、令人尖叫的作品来，感兴趣的小伙伴儿赶快学起来。 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>多边形填充</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言颜色综合运用与色彩方案共享]]></title>
    <url>%2F2017%2F06%2F11%2FR%E8%AF%AD%E8%A8%80%E9%A2%9C%E8%89%B2%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%E4%B8%8E%E8%89%B2%E5%BD%A9%E6%96%B9%E6%A1%88%E5%85%B1%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[今天这篇主要讲解R语言颜色综合运用，主要跟大家介绍如何提取那些专业色彩包中的颜色搭配用于在基础绘图系统和高级绘图系统中共享。 其实无论是R语言的预设配色系统、自定义颜色表还是哪些专属配色包，我们所使用（或者R语言识别的）的仅仅就是一组字符向量所代表的色值而已，并不神秘。 通过scales中的色彩获取函数，我们可以将专属配色主题（RColorBrewer、ggthemes）中的配色主题提取出来，以函数的形式传递给基础绘图系统（plot）以及ggplot绘图系统。 主要内容： RColorBrewer部分： ggthemes部分： scales：（brewer.pal运用：） RColorBrewer部分关于RColorBrewer包之前在写ggplot函数系统的时候已经有所涉猎，其中专门讲解过它的官方配色网站：colorbrewer 这是一个非常神奇的网站，RColorBrewer包中的配色方案全部来源于此，而且网站上允许自定义色彩序列和类型，衍生出来的颜色要比该包中的配色资源多出很多倍。 123library(RColorBrewer)display.brewer.pal(n, name)display.brewer.all(type="all") ColorBrewer设计团队将配色方案分为三种： seq:连续渐变色 div:双向渐变色 qual:分类色 通过display函数可以查看不同类型的色板： 颜色查看：1234display.brewer.all(type = "all") #查看所有色板display.brewer.all(type = "seq") #查看单色渐变色板display.brewer.all(type = "div") #查看双色渐变色板display.brewer.all(type = "qual") #查看离散（分类）色板 以上通过display四个函数成功显示了全部色板、单色渐变色板、双色渐变色板、离散（分类）色板 当然你也可以通过display.brewer.pal(n, name)函数显示指定名称的颜色主题：1display.brewer.pal(9, "BuGn") 123456789101112par(mfrow=c(1,5),mar=c(1,1,2,1),xaxs="i", yaxs="i")mycolors&lt;-brewer.pal(9, "BuGn")barplot(rep(1,times=9),col=mycolors,border=mycolors,axes=FALSE, horiz=T,main="MyColors of BuGn ")mycolors&lt;-brewer.pal(9, "OrRd")barplot(rep(1,times=9),col=mycolors,border=mycolors,axes=FALSE, horiz=T,main="MyColors of OrRd")mycolors&lt;-brewer.pal(9, "YlGn")barplot(rep(1,times=9),col=mycolors,border=mycolors,axes=FALSE, horiz=T,main="MyColors of YlGn")mycolors&lt;-brewer.pal(9, "Oranges")barplot(rep(1,times=9),col=mycolors,border=mycolors,axes=FALSE, horiz=T,main="MyColors of Oranges")mycolors&lt;-brewer.pal(9, "Blues")barplot(rep(1,times=9),col=mycolors,border=mycolors,axes=FALSE, horiz=T,main="MyColors of Blues")dev.off() 大家已经看到了，通过brewer.pal(n, “name”)函数，可以很轻松的提取出你想要的配色主题。 如果你想要某个配色主题的其中几个色值，可使用如下方式提取：1display.brewer.pal(6, "BuGn")#按顺序提取前六个 如果想要提取某一组色彩主题不连续的颜色，可以使用文本函数： 123library(scales)a&lt;-brewer.pal(9, "BuGn")show_col(a[c(1,3,5,7,9)],labels=F) 通过向量合并，你还可以自己从色彩包中自定义色彩方案。 123b1&lt;-brewer.pal(9, "BuGn");b2&lt;-brewer.pal(9,"Blues")c&lt;-c(b1[c(1,3,5,7,9)],b2[c(2,4,6,8)])show_col(c,labels=F) 其实都是些很简单的文本函数组合，毕竟色彩方案在软件中也就是一组字符向量而已。 以上这些色彩方案可以很容易的应用到基础绘图系统和ggplot绘图系统中。 1234c&lt;-c(50,30,50,70,90,40)names(c)&lt;-LETTERS[1:6]mycolor&lt;-brewer.pal(9,"Greens")pie(sort(c,decreasing=T),labels=names(c),col=mycolor[c(3,5,5,6,7,9)],clockwise=T,radius=1,border=F) 12345678910111213library(ggplot2)library(plyr)mydata&lt;-data.frame(c)ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+ geom_bar(stat="identity",width=1,col="white")+ coord_polar(theta = "y",start=0)+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank())+ scale_fill_brewer(palette="Greens",labels=c("E", "D", "A","C","F","B"))+ guides(fill=guide_legend(reverse=TRUE,title=NULL)) ggthemes部分：接下来讲解ggthemes部分，其实ggthemes包原本是转为ggplot2包开发的辅助包（前面加的前缀——gg就可以看出来，这种包还有很多），里面提供了大量高质量的主题、颜色方案。其中就有我们所熟知的economist主题方案以及wsj方案，还有诸如stata、excel、tableau、solarized、tufte等主题方案。 ggthemes包中的色彩方案都是打包好，命名过的，所以我们引用的时候，只需赋值即可。 这里以economist和WSJ为例：123library(ggthemes)m1&lt;-economist_pal()(6)show_col(m1) 12mycolor&lt;-m1&lt;-economist_pal()(5)pie(sort(c,decreasing=T),labels=names(6),col=mycolor,border=F,clockwise=T,init.angle=90,radius=1) 12345678910ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+ geom_bar(stat="identity",width=1,col="white")+ coord_polar(theta = "y",start=0)+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank())+ scale_fill_economist(labels=c("E", "D", "A","C","F","B"))+ guides(fill=guide_legend(reverse=TRUE,title=NULL)) 12m2&lt;-wsj_pal()(6)show_col(m2) 12mycolor&lt;-m1&lt;-wsj_pal()(6)pie(sort(c,decreasing=T),labels=names(c),col=mycolor,border=F,clockwise=T,init.angle=90,radius=1) 12345678910ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+ geom_bar(stat="identity",width=1,col="white")+ coord_polar(theta = "y",start=0)+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank())+ scale_fill_wsj(labels=names(c))+ guides(fill=guide_legend(reverse=TRUE,title=NULL)) 其实关于economist和wsj的配色主题远不止这些元素，里面规定了详细的序列用色标准、线条用色标准、形状标准和背景色参考方案，这些信息，你可以通过使用ggthemes_data函数进行查看： WSJ背景色123ggthemes_data$wsj$bg gray green blue brown "#efefef" "#e9f3ea" "#d4dee7" "#f8f2e4" WSJ主题色1234567891011121314151617181920ggthemes_data$wsj$palettes #主题色$rgby yellow red blue green "#d3ba68" "#d5695d" "#5d8ca8" "#65a479" $red_green green red "#088158" "#ba2f2a" $black_green black gray ltgreen green "#000000" "#595959" "#59a77f" "#008856" $dem_rep blue red gray "#006a8e" "#b1283a" "#a8a6a7" $colors6 red blue gold green orange black "#c72e29" "#016392" "#be9c2e" "#098154" "#fb832d" "#000000" economist背景色：1ggthemes_data$economist$bg economist主题色：1ggthemes_data$economist$fg 也可以使用scales包中的show_col函数进行颜色的图形化输出：显示主题颜色： 《华尔街日报》123456show_col(ggthemes_data$wsj$bg) #背景色show_col(ggthemes_data$wsj$palettes$rgby) #rgbyshow_col(ggthemes_data$wsj$palettes$red_green) #red_greenshow_col(ggthemes_data$wsj$palettes$black_green) #black_greenshow_col(ggthemes_data$wsj$palettes$dem_rep) #dem_repshow_col(ggthemes_data$wsj$palettes$colors6) #colors6 《经济学人》123show_col(ggthemes_data$economist$bg) #背景色show_col(ggthemes_data$economist$fg) #主题色show_col(ggthemes_data$economist$stata) #基于stata的配色方案 以上ggthemes包中的所有颜色，你都可以通过names_pal()(n)的格式进行提取，然后使用文本函数进行抽取、转化、合并，自由搭配出属于自己的专属配色方案 scales包的brewer_pal函数：接下来的时间我会将全部精力放在brewer_pal函数上，告诉你为什么，因为这个函数是scales专门为图形标度所设置的颜色设置函数，而以上我们所述的RColorBrewer里面的brewer.pal以及ggthemes包中的names_pal函数，是用于提取自己的配色方案，适用范围较小。12library("scales")brewer_pal(type = "seq", palette = 1, direction = 1) 该函数直接对接RColorBrewer包中的配色主题，但是增加了一些输出参数，可以对输出的主题进行更加灵活的自定义操作。 type设置颜色种类，palette设置色板（可以是字符名称，也可以是编号），direction设置颜色输出顺序（默认为原始顺序，-1代表倒序，对于连续渐变类型的色板比较重要）。 123show_col(brewer_pal()(10))show_col(brewer_pal("div")(5))show_col(brewer_pal(palette = "Greens")(5)) 可以看出来，brewer_pal()函数允许通过色板类型、色彩数据、主题类型进行筛选输出。 我们可以通过brewer_pal函数将色彩信息传递给指定向量，或者直接将brewer_pal指定给col或者fill等图表中的标度参数。 123par(mfrow=c(1,2),mar=c(1,1,2,1),xaxs="i", yaxs="i")pie(rep(1,times=6),labels="",col=brewer_pal(palette="Greens")(6),border=F,radius=1,clockwise=T)pie(rep(1,times=6),labels="",col=brewer_pal(palette="Greens",direction =-1)(6),border=F,radius=1,clockwise=T) 因为ggplot中有专用于RColorBrewer的色彩主题函数scale_fill(colour)_brewer(），用于对接RColorBrewer中的色彩库，所以我们想要在ggplot图表系统中使用RColorBrewer中的配色主题，不必使用brewer_pal进行提取。 并且，brewer_pal函数内的参数，在scale_fill(colour)_brewer(）函数内也可以使用，对色彩方案进行筛选、抽取。12345678910111213141516171819202122232425library(Rmisc)library(lattice)p1&lt;- ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+ geom_bar(stat="identity",width=1,col="white")+ coord_polar(theta = "y",start=0)+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position="top")+ scale_fill_brewer(palette="Greens",labels=names(c))+ guides(fill=guide_legend(reverse=TRUE,title=NULL))p2&lt;- ggplot(data=mydata,aes(x=factor(1),y=c,fill=factor(c),order=desc(c)))+ geom_bar(stat="identity",width=1,col="white")+ coord_polar(theta = "y",start=0)+ theme(panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position="top")+ scale_fill_brewer(palette="Greens",direction =-1,labels=names(c))+ guides(fill=guide_legend(reverse=TRUE,title=NULL))multiplot(p1,p2,cols=2) 除此之外，还有一个叫ggtech的包，专门为ggplot2包提供科技公司风格配色方案。仔细看了包，没有取色函数，但是提供了全部的色值信息。 1234567891011library(ggtech)tech_key = list(airbnb = c("#FF5A5F","#FFB400", "#007A87", "#FFAA91", "#7B0051"), facebook = c("#3b5998","#6d84b4", "#afbdd4", "#d8dfea"), google = c("#5380E4", "#E12A3C", "#FFBF03","#00B723"), etsy = c("#F14000", "#67B6C3", "#F0DA47", "#EBEBE6", "#D0D0CB"),twitter = c("#55ACEE", "#292f33", "#8899a6", "#e1e8ed"))show_col(tech_key$airbnb)show_col(tech_key$facebook)show_col(tech_key$google)show_col(tech_key$etsy)show_col(tech_key$twitter) 以上是今天所要讲的主要内容，因为关于这块儿的内容，非常丰富，我也只能涉略一点儿，想要了解更多的R语言配色知识，可以参考详细的官方文档。 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
  </entry>
  <entry>
    <title><![CDATA[R预设配色系统及自定义色板]]></title>
    <url>%2F2017%2F06%2F11%2FR%E9%A2%84%E8%AE%BE%E9%85%8D%E8%89%B2%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%89%B2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[关于配色的话题，已经聊过很多次了，但是就像是之前说过的，对于图形可视化而言，配色决定着作品的“颜值”,谈再多次都不嫌多。 今天是R语言配色系统综合篇的上篇（当然是有下篇啦，下篇将会教你如何优雅的提取各种高大上配色主题，作为己用。经过几天的研究，小魔方已经发现了如果将各种高质量配色包中的主题色板通过函数的形式在高级绘图系统和低级绘图系统之间相互共享）。 今天的内容主要包含两部分： R预置色彩系统的色板 R语言自定义颜色调用 其实在R语言的色彩系统中，有两大类颜色系统，一类是预设的调色盘，通过调色盘，你可以获取任意数量的色彩组合。 R预置色彩系统的色板R语言的预设调色板一共有五个： rainbow heat.colors terrain.colors topo.colors cm.colors 这五个调色板就像是一个大染缸一样，排列着无数的色彩组合。取色也很简单，就是使用预设色盘名称+色彩数据即可： 1234rainbow(10) [1] "#FF0000FF" "#FF9900FF" "#CCFF00FF" "#33FF00FF" "#00FF66FF" "#00FFFFFF" [7] "#0066FFFF" "#3300FFFF" "#CC00FFFF" "#FF0099FF" 以上既是通过名称+数量的方式获取的一组10个颜色，同样我们可以通过scales包中show_col函数查看具体的颜色效果： 12library(scales)show_col(rainbow(10),labels=T)#labels控制是否显示HEX格式的色值信息. 接下来我用一个版面矩阵将五个色盘颜色全部显示出来： 12345678par(mfrow=c(1,5),mar=c(0.5,0.5,2,0.5),xaxs="i",yaxs="i")n&lt;-1000barplot(rep(1,times=n),col=rainbow(n),border=rainbow(n),horiz=T,axes=F,main="Rainbow Color")barplot(rep(1,times=n),col=heat.colors(n),border=heat.colors(n),horiz=T,axes=F,main="Heat.Colors")barplot(rep(1,times=n),col=terrain.colors(n),border=terrain.colors(n),horiz=T,axes=F,main="Terrain.Colors")barplot(rep(1,times=n),col=topo.colors(n),border=topo.colors(n),horiz=T,axes=F,main="Topo.Colors")barplot(rep(1,times=n),col=cm.colors(n),border=cm.colors(n),horiz=T,axes=F,main="Cm.Colors")dev.off()#关闭上次的绘图面板 运行以上代码之后，你会看到绘图面板上出现的五个色板色彩过渡效果，第一个rainbow是运用最为频繁的的色板，也是我们所熟知的彩虹七色，其余四个是截取rainbow色斑的某一段暖色系、冷色系或者单色做的渐变过渡。 五种颜色调用方法非常简单，名称+数量就可以。而且你也可以通过文本函数将不同色盘中截取的颜色相互混合使用。 123456par(mfrow=c(2,1),mar=c(0.5,0.5,2,0.5),xaxs="i",yaxs="i")a&lt;-heat.colors(10)b&lt;-topo.colors(10)barplot(rep(1,times=10),col=b,border=b,main="Topo.Colors10",axes=F)barplot(rep(1,times=10),col=a,border=a,main="Heat.Colors10",axes=F)dev.off() 12c&lt;-c(a[c(1,3,5,7,9)],b[c(2,4,6,8,10)])barplot(rep(1,times=10),col=c,border=c,axes=F,main="topo&amp;heat 10");box() 以上通过将两个色板提取出来的颜色进行组合，创造出了新的色彩组合。 R语言自定义颜色调用接下来介绍R语言的第二大色彩系统，自定义颜色。 R语言系统中内置了657中带有自定义名称的颜色（就是我们平时所熟知的blue、red、grey等）。 通过colors()函数可以查看这657种颜色的色值及名称类别信息： 1234head(colors(),10) [1] "white" "aliceblue" "antiquewhite" "antiquewhite1" [5] "antiquewhite2" "antiquewhite3" "antiquewhite4" "aquamarine" [9] "aquamarine1" "aquamarine2" 12library(plyr)count(cl) count函数列出了所有657中颜色名称。 使用show_col函数可以查看所有657中颜色的图形显示效果 show_col(cl,labels=F)#因为颜色数量太多，使用labels=F参数略去颜色色值信息。 使用colorRampPalette函数可以自由调用任何一种自定义颜色。 12colorRamp(colors, bias = 1, space = c("rgb", "Lab"), interpolate = c("linear", "spline"))colorRampPalette(colors, ...) color函数的介绍如上，具体的参数解释可以通过？colorRampPalette查看他的官方文档，这里我们直接取色。1234567891011par(mfrow=c(1,4),mar=c(0.5,0.5,2,0.5),xaxs="i", yaxs="i")n &lt;- 1000mycolors &lt;- colorRampPalette(c("red", "green"))(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c("blue", "yellow", "orange"))(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c( "white", "gold", "yellow", "brown"), bias=1.2)(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c("red","gold", "yellow", "grey","orange"), bias=1.2)(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)dev.off() 除了这两大色彩系统系统之外，R语言也支持直接以色值（HEX）形式输入的颜色，只需使用c()函数生成色值组成的字符向量，R语言就可自动识别。 还有一些特殊用途的grey函数，hsv函数等等可以通过设定灰度或者色调、饱和度、亮度等等方式获取颜色使用，这些由于过于繁琐，这里就略去了，甘感兴趣的小盆友可以自己探索。 当然，这里还没有讲解到那些已经做得很成熟的主题配色包，比如ggthemes（专为ggplot2开发的主题包）、RColorbrewer（里面存放着大量高质量的配色方案）、以及ggtech（是一个科技主题的配色包，主要供ggplot函数调用）。 通过scales包中的brewer.col，我们可以提取出以上各包的配色主题，来用于我们的可视化图表中，不光是ggplot绘图系统，即便是在基础绘图系统（base::plot）中也是可以调用这些色彩方案的，好了这里先放个彩蛋，下期再见！ 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>图表配色</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>配色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——极坐标变换与衍生图表类型]]></title>
    <url>%2F2017%2F06%2F11%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%9E%81%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%A1%8D%E7%94%9F%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[今天这篇内容会比较杂乱一点，因为会讲到ggplot函数中的一大类通过极坐标支持才能呈现出来的图表效果。 ggplot作图背后的图表哲学，没有给予饼图（以及衍生出的圆环图、玫瑰图等放射状图表类型）存在的空间（主要是该包的开发者个人的审美观，比较反感次坐标轴以及功能类型雷同的重复性图层函数，所以它宁可开发出分面图层原理也不愿意增加次坐标轴，不愿意为原本柱形图可以表达的图表形式再单独开发一种功能雷同的饼图函数）。 但是巧的是，在常见的三种坐标形式中，极坐标转换可以非常轻松的将常见的柱形图（条形图）、堆积柱形图通过只一句极坐标函数就神奇的转化为饼图、玫瑰图、圆环图等（不知道是有意为之还是偶然的巧合）。 饼图的实现原理：饼图需要借助柱形图结合极坐标进行转化： 12ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar() 当使用一个因子变量作为横轴，使用分类变量进行填充时，该柱形图变成了单条堆积柱形图。 接下来我们通过以上函数添加极坐标（注意极坐标的设定是如何影响最终的图表形式的） 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar(theta = "y") 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar(theta = "x") 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar() 从做出的图表以及极坐标函数内的参数我们可以看出来，当参数指定为x时，最终柱形图的x轴会被指定为极坐标的x轴（圆周），而柱形图的y轴则会成为极坐标的y轴（半径）。当指定为y轴时，柱形图的y轴为成为极坐标的x轴（圆周），柱形图的x轴会成为极坐标的y轴（半径）。 同时极坐标状态下，饼图的半径是由柱形图（条形图）宽度决定的，以上图表中圆心有个空白，如果我们将柱形图柱形图宽度定义为1,则会成为正圆。 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar(width=1)+coord_polar(theta = "y") 极坐标系下图表元素控制：图中其他的元素控制方式与往常的柱形图做法一样： 去掉极坐标轴的轴刻度标签，去掉两个轴标题、更换配色： 123456789101112ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar(width=1)+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank() )+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL)) 当有多个序列时：12ggplot(diamonds,aes(cut))+geom_bar(width=1) 通过极坐标转换可以实现圆环图、圆条图效果： 12345678ggplot(diamonds,aes(cut))+geom_bar(width=1,fill="steelblue",colour="white")+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.x = element_blank(), axis.title = element_blank()) 改变极坐标轴参数设置，可以模拟南丁格尔玫瑰图效果： 12345678910ggplot(diamonds,aes(cut))+geom_bar(width=0.95,fill="#3182BD")+coord_polar(theta = "x",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks= element_blank(), axis.title = element_blank())+ylim(c(-3000,22500)) 极坐标系下多序列图表：当然如果你使用的原始柱形图数据中添加了分类序列（也就是堆积柱形图），按照上面的方式可以制作更加复杂的圆环图、堆叠玫瑰图 12345678910ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.x = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL)) 12345678910ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "x",start=0)+theme( axis.text.y = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL))+ylim(c(-2000,12000))+theme_bw() 尝试着用分面来解决多序列问题：1234567891011ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "x",start=0)+theme( axis.text.y = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL))+ylim(c(-2000,6000))+theme_bw()+facet_grid(.~cut) 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>极坐标</tag>
        <tag>饼图</tag>
        <tag>圆环图</tag>
        <tag>玫瑰图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言图表美化——巧用分面表达优化图表布局，做出堪比杂志级视觉体验的商务图表]]></title>
    <url>%2F2017%2F06%2F10%2FR%E8%AF%AD%E8%A8%80%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94%E5%B7%A7%E7%94%A8%E5%88%86%E9%9D%A2%E8%A1%A8%E8%BE%BE%E4%BC%98%E5%8C%96%E5%9B%BE%E8%A1%A8%E5%B8%83%E5%B1%80%EF%BC%8C%E5%81%9A%E5%87%BA%E5%A0%AA%E6%AF%94%E6%9D%82%E5%BF%97%E7%BA%A7%E8%A7%86%E8%A7%89%E4%BD%93%E9%AA%8C%E7%9A%84%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[图表的优化布局在Excel中一直都是个大难题，难在Excel软件固有的限制。 特别是在制作多序列多分类图表的时候，放在一个图中显得序列过于拥挤，影响视觉效果，做出分面表达又耗时费力，需要掌握诸多技巧，（版式设计呀、单元格锚定呀等等、照相机呀什么的）是在是有心无力。 但是像R语言这样依靠图形语法来控制的作图形式，却不存在这样的问题。 今天跟大家分享如何在R语言中巧用分面表达来优化多系列多分类图表的版式布局！ 其实这一篇在不久前曾经发过的，当时还处于摸索阶段，写的很粗糙，今天重发一遍，所有的代码和图表都是优化过的，不仔细观察，还真看不出来，仔细对比一下就能发现了！ 我是分割线~ 当数据序列比较多的时候，特别是超过四个以后，还用堆积柱形图（条形图）、或者簇状柱形图的话，图表必然会因为系列太多而受到挤压或者变形，整体就会不协调、不美观。 还有ggplot不支持次坐标轴功能，它的作图思维基本源于塔夫脱的可视化理念，而且作者个人的审美也比较抵触次坐标轴，但是他留给大家解决多序列图表的方案是——图形分面 以下仅以常用的柱形图、条形图为例进行讲解（所有的图形对象几乎都支持分面） 构造作图数据集：123456data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Conpany = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,3800,2900,2500,3300),Sale2016 = c(5050,3800,2900,2500,3300)) 数据重塑（宽转长）：1mydata&lt;-melt(mydata,id.vars="Conpany",variable.name="Year",value.name="Sale") 作图函数：默认输出图表：12ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge") 默认图表的配色确实挺难看的，这里我使用华尔街日报、经济学人的主题、及配色模板进行适度美化。 华尔街日报：1234567ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank()) 经济学人1234567ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank()) 以上是我们使用传统的方法通过将颜色映射到不同类别的年度收入变量上，达到了区分效果，可是这样终究不是办法，五个序列实在是有点多，已经让然有点儿眼花缭乱了，如果有8个序列、10个序列呢，那又该怎么办呢~ 下面跟大家分享其中一种比较有效的解决办法——通过分面表达解决多序列图表呈现问题 横排分面：柱形分面（横排）：12345678ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank(),legend.position='none')+facet_grid(.~Year) 123456789101112ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+facet_grid(.~Year)+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.x=element_text(size=7.5) ) 条形分面（横排）：123456789101112131415161718192021ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+facet_grid(.~Year)+coord_flip()+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=10), axis.text.x=element_text(size=7.5), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.5,'cm'), axis.line.y=element_line(), axis.line.x=element_blank(), panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank() ) 12345678910111213141516171819202122ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+facet_grid(.~Year)+coord_flip()+scale_fill_economist()+theme(axis.ticks.length=unit(0.5,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=10), axis.text.x=element_text(size=7.5), axis.line.x=element_blank(), axis.line.y=element_line(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.5,'cm'), panel.grid.major.x=element_line(linetype="solid",colour="white",size=1.1), panel.grid.major.y=element_blank() ) 竖排分面：柱形分面（竖排）： 左12345678910111213141516171819202122232425p1&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.3,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank(),legend.position='none')+facet_grid(Year~.)右p2&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+facet_grid(Year~.)+scale_fill_economist()+theme(axis.ticks.length=unit(0.3,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=7.5), axis.text.x=element_text(size=7.5,face="bold"), strip.text=element_text(size=10) ) 使用multiplot函数进行版面合并：123require(grid)library("Rmisc")multiplot(p1,p2,cols=2) 条形分面（竖排）：123456789101112131415161718192021ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+facet_grid(Year~.)+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), ) 12345678910111213141516171819202122ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+facet_grid(Year~.)+coord_flip()+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype=1,colour="white",size=1.1), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.2,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), strip.text=element_text(size=10), axis.text.y=element_text(size=10) ) 关于簇状、分面图表数据标签问题：簇状图数据标签处理： 12345678910111213ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position =position_dodge(0.9),fontface="bold", vjust =1,colour="white",size=2)+theme( axis.title = element_blank(), axis.ticks.length=unit(0.3,'cm'), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), ) 横向分面柱图数据标签问题：12345678910111213141516ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+facet_grid(.~Year)+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position =position_dodge(0.9),fontface="bold", vjust =1,colour="white",size=2)+theme( axis.title = element_blank(), legend.position='none', axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_line(), axis.text.x=element_text(size=5), axis.text.y=element_text(size=7.5) ) 横向分面条形图数据标签问题： 1234567891011121314151617181920ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+coord_flip()+facet_grid(.~Year)+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position = position_dodge(0.9),hjust=1.2,vjust=0.5,colour="white",size=4)+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8), axis.text.y=element_text(size=10) ) 竖向分面柱形图数据标签问题： 竖向分面条形图数据标签问题： 1234567891011121314151617181920ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+facet_grid(Year~.)+coord_flip()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position = position_dodge(0.9),hjust=1.1,colour="white",size=3.5)+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.25,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.y=element_text(size=10), axis.text.x=element_text(size=10) ) 以上是本人在学习ggplot函数过程中的一些练习案例，当然要是仔细琢磨，里面的瑕疵还不少，改进空间还有很多，以后有机会慢慢跟大家补充，过几天再跟大家继续分享关于ggplot更加精深的用法技巧！ 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leaflet在线地图进阶宝典——高级交互特性]]></title>
    <url>%2F2017%2F06%2F09%2Fleaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E4%BA%A4%E4%BA%92%E7%89%B9%E6%80%A7(%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C)%2F</url>
    <content type="text"><![CDATA[本文针对leaflet的高级交互特性进行展开，主要涉及到leaflet中等值线地图的鼠标悬浮效果及点击效果的动态呈现。这也是leaflet的天然HTML属性所具有的强大优势。 在制作高质量在线数据地图的项目中，leaflet结合扩展的HTML性能，可以呈现非常人性化的动态效果，如能结合css、shiny等装饰器和交互框架，几乎可以胜任常见的动态交互网站的制作。 加载包：12345library("sp")library("leaflet")options(stringsAsFactors = FALSE,check.names = FALSE)#锁定目录：setwd("D:/R/mapdata/State") 导入美国地图素材（含数据） 1states&lt;-geojsonio::geojson_read("us-states.geojson", what = "sp") ###案例1：一个简单的开始：（引用mapbox地图）123456m &lt;- leaflet(states) %&gt;% setView(-96, 37.8, 4) %&gt;% #设置呈现的视觉中心 addProviderTiles("MapBox", options = providerTileOptions( id = "mapbox.light", #添加地图图层 accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))m %&gt;% addPolygons() #地图呈现 案例2：分箱及设置色盘：12bins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)pal &lt;- colorBin("YlOrRd", domain = states$density, bins = bins) 1234567m %&gt;% addPolygons( fillColor = ~pal(density), #显式声明颜色映射变量 weight = 2, #线宽 opacity = 1, #透明度 color = "white", #颜色 dashArray = "3", fillOpacity = 0.7) #填充透明度 12345678910111213m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( #设置高亮属性 weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE)) 设置鼠标点击事件：1labels &lt;- sprintf("&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g people / mi&lt;sup&gt;2&lt;/sup&gt;",states$name,states$density) %&gt;% lapply(htmltools::HTML) #转化为HTML格式标签 1234567891011121314151617181920m &lt;-m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE ), label = labels, labelOptions = labelOptions( #标签选项设置（参数类别HTML属性） style=list("font-weight"="normal",padding="3px 8px"), textsize="15px", direction="auto") );m 增加图例：12m %&gt;% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL, position = "bottomright") 以下是该案例的完整代码：From http://leafletjs.com/examples/choropleth/us-states.js（数据源，js格式记得保存为geojson格式） 123456789101112131415161718192021222324252627282930313233bins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)pal &lt;- colorBin("YlOrRd", domain = states$density, bins = bins)labels &lt;- sprintf( "&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g people / mi&lt;sup&gt;2&lt;/sup&gt;", states$name, states$density) %&gt;% lapply(htmltools::HTML)leaflet(states) %&gt;% setView(-96, 37.8, 4) %&gt;% addProviderTiles("MapBox", options = providerTileOptions( id = "mapbox.light", accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto")) %&gt;% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL, position = "bottomright") 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmapH(中心热度图)]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmapH-%E4%B8%AD%E5%BF%83%E7%83%AD%E5%BA%A6%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天是REmap系列的最后一篇——REmapH函数。 这个函数的特色是可以做中心辐射的热力图，这种热力图在气象、人口密度、海拔测绘领域有诸多运用，当然也可以上当用在商务场合——特别是跟地理信息有关的数据呈现方面。 加载包：12library("baidumap")library("REmap") 语法简介：123456789?remapHremapH(data, maptype = 'china', theme = get_theme("Dark"), blurSize = 30, color = c('blue', 'cyan', 'lime', 'yellow', 'red'), minAlpha = 0.05, opacity = 1, ...) data为要传入的数据，数据为三列，第一列为lon(经度)，第二列为lat(维度)，第三列为prob(密度/概率)； maptype为要绘制的地图类型，可选有：”china”，”world”或中国各省份名字； theme为绘制的地图主题类型，可由get_theme函数传入； blurSize为热力效果的泛化范围，可调整热力点中心的扩散程度； color为热力的渐变颜色； minAlpha为热力点的展示阈值，对应data中的prob列，作图时各点密度会对比minAlpha，以凸显不同密度所展示的不同热力分布； opacity为透明度，调整热力图的透明度。 12345678910get_theme(theme = "Dark", lineColor = "Random", backgroundColor = "#1b1b1b", titleColor = "#fff", borderColor = "rgba(100,149,237,1)", regionColor = "#1b1b1b", labelShow = T, pointShow = F, pointColor = "gold" ) theme为主题，设置该参数后无需设置get_theme里其他参数，可选有”Dark”、”Sky”、”blue”和”none”四种 lineColoe为线条颜色，对应为map图里面迁徙线条的颜色 backgroundColor为图片的背景色，支持16进制颜色输入，也支持rgb()函数和rgba() titleColor为标题的颜色，设置同上 borderColor为地图中各省、市边界颜色 regionColor为地图中各区域颜色，各省份和市 labelShow为是否展示各省、市名字，设置为True时展示 pointShow为是否展示各省会城市所在点，设置为True时展示 pointColor设置上述点的颜色 接下来首先通过两个案例进行讲解： 案例1：1options(remap.js.web=T) 这里有一个包含经纬度信息及对应密度的数据集，通过该数据集我们可以看到看到REmapH函数制作热力图的大致效果：1data&lt;- read.csv(file="D:\\R\\map\\MoveChart\\cityvaluetop10.csv",header=T) 数据结构如下：12345678910111213head(data) lon lat prob1 114.3948 23.40800 0.852 115.3948 24.40800 0.853 114.3948 23.40800 0.854 113.3948 23.40800 0.855 114.7307 27.69586 0.806 110.5066 28.69586 0.80'data.frame': 48 obs. of 3 variables: $ lon : num 114 115 114 113 115 ... $ lat : num 23.4 24.4 23.4 23.4 27.7 ... $ prob: num 0.85 0.85 0.85 0.85 0.8 0.8 0.8 0.8 0.75 0.75 ... 123456789map_out&lt;-remapH(data, maptype = 'china', theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out) 接下来制作辽宁省省域热力图数据集： 案例2：首先使用mapNames函数获取辽宁省市级行政单位：1234city_ln&lt;-mapNames("liaoning") [1] "大连市" "朝阳市" "丹东市" "铁岭市" "沈阳市" "抚顺市" "葫芦岛市" "阜新市" "锦州市" [10] "鞍山市" "本溪市" "营口市" "辽阳市" "盘锦市" 获取各市级行政单位经纬度信息：123456789101112131415161718city_list&lt;-get_geo_position(city_ln)&gt; city_list lon lat city1 121.6214 38.91934 大连市2 120.4573 41.57949 朝阳市3 124.3626 40.00569 丹东市4 123.8488 42.29257 铁岭市5 123.4390 41.81134 沈阳市6 123.9636 41.88608 抚顺市7 120.8434 40.71736 葫芦岛市8 121.6765 42.02798 阜新市9 121.1336 41.10087 锦州市10 123.0010 41.11412 鞍山市11 123.7735 41.29985 本溪市12 122.2415 40.67256 营口市13 123.2437 41.27445 辽阳市14 122.0773 41.12594 盘锦市 生成一列密度数据：12point&lt;-round(runif(14,min=0.3,max=0.95),2) [1] 0.89 0.82 0.91 0.87 0.90 0.90 0.85 0.89 0.87 0.94 0.90 0.85 0.88 0.88 合成数据框格式的热力图作图数据：1234567891011121314151617newdata&lt;-data.frame(city_list[,1:2],point) lon lat point1 121.6214 38.91934 0.892 120.4573 41.57949 0.823 124.3626 40.00569 0.914 123.8488 42.29257 0.875 123.4390 41.81134 0.906 123.9636 41.88608 0.907 120.8434 40.71736 0.858 121.6765 42.02798 0.899 121.1336 41.10087 0.8710 123.0010 41.11412 0.9411 123.7735 41.29985 0.9012 122.2415 40.67256 0.8513 123.2437 41.27445 0.8814 122.0773 41.12594 0.88 作图函数：123456789map_out1&lt;-remapH(newdata, maptype = "辽宁", theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out1) 因为以上数据集中使用的各市中心城市的密度数据，所以整体密度太过分散，看不出渐变效果，当然密度图的数据记录是不受数量限制的，在有较多数据点呈现密集分布的地方，可以看到非常明显的颜色热度渐变效果。 这里我通过添加一列分类数据，将以上密度图数据进行改造： 123newdata$perA&lt;-rep("A",14)newdata$perB&lt;-rep("B",14)newdata$perC&lt;-rep("C",14) 使用Reshape2包对数据进行一维转化：123456789101112131415161718192021222324252627282930313233343536373839404142434445mydata &lt;- melt(newdata, id.vars=c("lon","lat","point")) lon lat point variable value1 121.6214 38.91934 0.85 perA A2 120.4573 41.57949 0.81 perA A3 124.3626 40.00569 0.91 perA A4 123.8488 42.29257 0.90 perA A5 123.4390 41.81134 0.91 perA A6 123.9636 41.88608 0.93 perA A7 120.8434 40.71736 0.91 perA A8 121.6765 42.02798 0.87 perA A9 121.1336 41.10087 0.89 perA A10 123.0010 41.11412 0.82 perA A11 123.7735 41.29985 0.88 perA A12 122.2415 40.67256 0.95 perA A13 123.2437 41.27445 0.90 perA A14 122.0773 41.12594 0.84 perA A15 121.6214 38.91934 0.85 perB B16 120.4573 41.57949 0.81 perB B17 124.3626 40.00569 0.91 perB B18 123.8488 42.29257 0.90 perB B19 123.4390 41.81134 0.91 perB B20 123.9636 41.88608 0.93 perB B21 120.8434 40.71736 0.91 perB B22 121.6765 42.02798 0.87 perB B23 121.1336 41.10087 0.89 perB B24 123.0010 41.11412 0.82 perB B25 123.7735 41.29985 0.88 perB B26 122.2415 40.67256 0.95 perB B27 123.2437 41.27445 0.90 perB B28 122.0773 41.12594 0.84 perB B29 121.6214 38.91934 0.85 perC C30 120.4573 41.57949 0.81 perC C31 124.3626 40.00569 0.91 perC C32 123.8488 42.29257 0.90 perC C33 123.4390 41.81134 0.91 perC C34 123.9636 41.88608 0.93 perC C35 120.8434 40.71736 0.91 perC C36 121.6765 42.02798 0.87 perC C37 121.1336 41.10087 0.89 perC C38 123.0010 41.11412 0.82 perC C39 123.7735 41.29985 0.88 perC C40 122.2415 40.67256 0.95 perC C41 123.2437 41.27445 0.90 perC C42 122.0773 41.12594 0.84 perC C 从新运行图表函数：123456789map_out2&lt;-remapH(newdata[,1:3], maptype = "辽宁", theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out2) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>REmap</tag>
        <tag>热力密度地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmapC(填充地图)]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmapC-%E5%A1%AB%E5%85%85%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天跟大家介绍REmap函数家族中的第三个函数——REmapC。 REmapC函数允许我们同时在一张地图上制作填充图和点图、线图。 加载包：12library(REmap)library(baidumap) 语法简介：1234567891011121314?remapCremapC(data, maptype = 'china', markLineData = NULL, markPointData = NULL, color = c('#1e90ff','#f0ffff'), theme = get_theme("Bright"), title = "", subtitle = "", markLineTheme = markLineControl(), markPointTheme = markPointControl(), geoData = NA, mindata = NA, maxdata = NA) 四个主要参数说明： 参数一：data为需要的原始数据框格式数据，共2列，第一列为省份或者城市名称，第二列为对应的数值，数值大小将决定地图颜色深浅。 参数二：maptype为地图类型设置，可选world、china或者中国省份名称 参数三：color为热力图渐变颜色，默认为2个颜色，第一个为终止色，第二个为初始色。如果只有一个颜色，系统会自动以白色补充为初始铯色。 参数四：mindata与maxdata可以设置颜色极端点对应数据的上下限（默认是使用data中的数据最大值最小值作为两端极值）。 一、全国热力图首先利用mapnames函数提取全国各省份名称：1234province &lt;- mapNames("china") #全国省份value &lt;- rnorm(34,100,30) #随机生成分省值mydata &lt;- data.frame(province,value) #合成数据框作图数据remapC(mydata,color=c("yellow","red"),title="全国分省热地图",subtitle="我是副标题") #制作热力图 默认的颜色标度是从最小值到最大值。以上函数中省略了markLineData，markPointData 两个参数，所以并未显示点线图。 1234ad_ln &lt;- mapNames("liaoning") [1] "大连市" "朝阳市" "丹东市" "铁岭市" "沈阳市" "抚顺市" "葫芦岛市" "阜新市" "锦州市" [10] "鞍山市" "本溪市" "营口市" "辽阳市" "盘锦市" 123456789101112131415161718value_ln&lt;-rnorm(14,100,30)data_ln &lt;-data.frame(ad_ln,value_ln) ad_ln value_ln1 大连市 79.676302 朝阳市 41.931983 丹东市 173.315864 铁岭市 106.019905 沈阳市 119.402566 抚顺市 79.548207 葫芦岛市 155.629938 阜新市 122.995999 锦州市 94.1739510 鞍山市 82.1894411 本溪市 98.7097212 营口市 115.5995713 辽阳市 104.8919914 盘锦市 92.92975 画图：12345678map_out &lt;- remapC(data_ln, maptype = "liaoning", color=c("green"), title="辽宁省热力地图", theme = get_theme("Sky"), maxdata=180 ) plot(map_out) 接下来做一个案例：每年春运，广东省人口会大批回流原住地，形成壮观的春运人流大军，我们模拟出广东省回流各省的人口数，使用填色地图表示人流规模，使用动态流向线表示回流最大的前10个省份。 因为没有实际的数据，这里我用函数模拟数据（非真实数据）： 12345678province &lt;- mapNames("china") #全国省份value &lt;- round(rnorm(34,1000,30),0) #随机生成分省值mydata &lt;- data.frame(province,value) #合并数据labelper&lt;-mydata[order(mydata[,"value"],decreasing=T),][1:10,]origin&lt;-rep("广州",length(labelper))destination&lt;-labelper$provinceline_data&lt;-data.frame(origin,destination) 画图：1234567891011121314151617181920map_out1 &lt;- remapC(mydata, maptype = "china", title="人口迁徙地图", theme = get_theme("Drak"), color=c("#CD0000","#FFEC8B"), markLineData=line_data, markLineTheme=markLineControl( color="white", lineWidth=2, lineType="dashed" ), markPointData=line_data[2], markPointTheme=markPointControl( symbolSize=13, effect=T, effectType="scale", color="white" ) ) plot(map_out1) 因为假设广东是人口迁出地，给广东填色是没有任何意义的，所以mydata数据中需要忽略 广东的数据123456789101112131415161718192021mydata1 &lt;- mydata[-12,]map_out2 &lt;- remapC(mydata1, maptype = "china", title="人口迁徙地图", theme = get_theme("Drak"), color=c("#CD0000","#FFEC8B"), markLineData=line_data, markLineTheme=markLineControl( color="white", lineWidth=2, lineType="dashed" ), markPointData=line_data[2], markPointTheme=markPointControl( symbolSize=13, effect=T, effectType="scale", color="white" ) ) plot(map_out2) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>填充地图</tag>
        <tag>REmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——案例综合运用]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%2F</url>
    <content type="text"><![CDATA[今天跟大家介绍一个REmap包的新函数——REmapB。 它是REmap包中诸多组函数中的一位，功能上要强大于之前介绍的REmap函数，不仅可以完成REmap函数的所有图表效果，而且可以做出前者没有的地图效果。 语法简介：以下是该函数的详细语法及参数：1234567891011?remapBremapB(center = c(104.114129,37.550339), zoom = 5, color = "Bright", title = "", subtitle = "", markLineData = NA, markPointData = NA, markLineTheme = markLineControl(), markPointTheme = markPointControl(), geoData = NA) 参数说明： 参数一：center为地图中心，经纬度格式； 参数二：zoom为缩放设置，默认为5，代表全国地图，增大至10可放大至地市 参数三：color为地图颜色，可选有”Bright”, “Blue”, “light”, “dark”, “redalert”, “googlelite”, “grassgreen”, “midnight”, “pink”, “darkgreen”, “bluish”, “grayscale”, “hardedge” 参数四：title为地图主标题 参数五：subtitle为地图副标题 参数六：markLineData为绘制线条需要的数据，包括起点和终点两列 参数七：markPointDate为绘制点需要的数据，仅终点一列 参数八：markLineTheme为线条主题设置，通过markLineControl( )函数设置 参数九：markPointTheme为点主题设置，通过markPointControl( )函数设置 参数十：geoData为点、线绘制的地理位置数据存储，可以只是输入经纬度数据，也可通过get_geo_position(‘地点’)获取 其中以上参数中，markLineTheme和markLineTheme内含有诸多属性设置，类似REmap中的theme设置：12345678markLineTheme = markLineControl(symbol = NA,#控制线型symbolSize = c(0,4), #线条粗度变动范围smooth = T, #启用线条平滑度设置smoothness =0.2, #线条平滑度effect = T, #线条动效lineWidth = 2, #线宽lineType = ‘dotted’, #线条类别color =‘Random’) #线条颜色 参数说明： 参数一：symbol为标记样式，具体指线条两端的标记的形状，两个值分别为起点和终点，经过实际使用symbol参数不可修改 参数二：symbolSize为线条两端标记大小，对应symbol参数的两个值，实际上第一个值没用，因为开始标记为none 参数三：smooth为逻辑参数，设置线条是否平滑 参数四：smoothness为平滑度，smooth参数设置为T时有效，体现线条的弧度，减小到0时为直线 参数五：effect为逻辑参数，是否显示动态效果 参数六：lineWidth为线条粗细 参数七：lineType为线条类型，可选有solid（实线）、dotted（点线）、dashed（虚线） 参数八：color为线条颜色 根据以上参数名称，可以大致了解每一个参数的含义：12345markPointTheme = markPointControl(symbol = "heart", #点形状symbolSize = "Random", #点大小effect = T, #动效启用effectType = "scale", #动效类型color = "Random") #颜色 参数说明： 参数一：symbol为点样式，可选项none、circle、rectangle、triangle、diamond、emptyCirle、emptyRectangle、emptyTriangle、emptyDiamond、heart、droplet、pin、arrow、star 参数二：symbolSize为点大小 参数三：effect为逻辑参数，是否显示动态效果 参数四：effectType为动态效果样式，可选scale（放大）和bounce（跳动） 参数五：color为点颜色 解读：effect参数在点太多时，动态效果会失效，这时建议设置为FALSE。在remapB( )函数中通过另外一个参数markPointData也可以设置点颜色，优先级高于color参数。 案例应用：接下来我们可以根据以上参数说明制作一个一对多的流向图：123destination&lt;- c("shanghai","guangzhou","济南","dalian","xian","chengdu","changchun","taiyuan","nanyang","zhengzhou") #终点origin&lt;- rep("nanyang",length(destination)) #起点map_data&lt;- data.frame(origin,destination) #合成数据框格式的作图数据 12345678910map_out&lt;-remapB(zoom=5, #参数5绘制省级国家地图 color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme=markLineControl(), markPointTheme=markPointControl() )plot(map_out) ####通过设置markLineTheme、markPointTheme两个主题内部的详细风格参数，你可以对线条以及数据点的气泡进行个性化设置。1234567891011121314151617181920212223map_out1&lt;-remapB(zoom=5, color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme = markLineControl( symbol = NA, symbolSize = c(0,4), smooth = T, smoothness =0.2, effect = T, lineWidth = 2, lineType ="dotted", color ="white"), markPointTheme = markPointControl( symbol = "heart", symbolSize = "Random", effect = T, effectType = "scale", color = "white") )plot(map_out1) 如果只想要绘制流向线而不需要终点的点的话，直接给markPointData赋值为NA就可以了。 只要将我们的数据结构重新整理，就可以制作出路径地图：12345678910111213141516171819202122232425262728newdata&lt;- c("shanghai","guangzhou","chengdu","xian","taiyuan","济南","shanghai") origin&lt;-c(newdata[-7])destination&lt;-c(newdata[-1])map_data&lt;- data.frame(origin,destination)map_out2&lt;-remapB(zoom=5, color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme = markLineControl( symbol = NA, symbolSize = c(0,4), smooth = T, smoothness =0.2, effect = T, lineWidth = 2, lineType ="dotted", color ="white"), markPointTheme = markPointControl( symbol = "heart", symbolSize = "Random", effect = T, effectType = "scale", color = "white") )plot(map_out2) 最后一个案例使用REmapB函数制作目标分布图：首先搜索大连地区的大学： 加载百度地图包：123456789101112library("baidumap")#查找大连的所有大学dl_college &lt;- getPlace("大学","大连")Get 125 records, 7 page. Getting 0 th page Getting 1 th page Getting 2 th page Getting 3 th page Getting 4 th page Getting 5 th page Getting 6 th page Done! 1234567891011121314151617#预览数据：head(dl_college) name address lat lon1 大连工业大学 轻工苑1号 38.97890 121.53322 大连理工大学 辽宁省大连市甘井子区凌工路2号 38.88868 121.53623 大连海事大学 辽宁省大连市凌海路1号 38.87753 121.53874 大连交通大学（沙河口校区） 沙河口区黄河路794号交通大学小吃一条街内(近西南路) 38.91790 121.57705 大连外国语大学(旅顺校区) 中国辽宁省大连市旅顺南路西段6号 38.81853 121.31546 大连大学 学府大街10号 39.10660 121.8282 telephone1 (0411)863236932 &lt;NA&gt;3 &lt;NA&gt;4 (0411)841063135 (0411)861111576 (0411)87402114 12345678str(dl_college)'data.frame': 125 obs. of 5 variables: $ name : chr "大连工业大学" "大连理工大学" "大连海事大学" "大连交通大学（沙河口校区）" ... $ address : chr "轻工苑1号" "辽宁省大连市甘井子区凌工路2号" "辽宁省大连市凌海路1号" "沙河口区黄河路794号交通大学小吃一条街内(近西南路)" ... $ lat : num 39 38.9 38.9 38.9 38.8 ... $ lon : num 122 122 122 122 121 ... $ telephone: chr "(0411)86323693" NA NA "(0411)84106313" ... 一共抓取了大连地区的125个带有大学的机构经纬度地址： 构造作图数据：123456789newdata1&lt;-dl_college[,c(3,4,1)]head(newdata1) name lat lon1 大连工业大学 38.97890 121.53322 大连理工大学 38.88868 121.53623 大连海事大学 38.87753 121.53874 大连交通大学（沙河口校区） 38.91790 121.57705 大连外国语大学(旅顺校区) 38.81853 121.31546 大连大学 39.10660 121.8282 1234567891011121314newdata2&lt;-newdata1[,c(2,1,3)]map_out3 &lt;- remapB(center = c(121.62139,38.91934), zoom = 14, color = "Blue", title = "大连高校分布图", markPointData =newdata2[3], markPointTheme = markPointControl( symbol = "pin", symbolSize = 3, effect = T, color = "yellow"), geoData =newdata2 )plot(map_out3) 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out3) #保存的同时自动调用浏览器窗口 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>REmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmap(路径图)]]></title>
    <url>%2F2017%2F06%2F07%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmap-%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天紧接昨天的内容，跟大家分享如何使用REmap函数制作路径图。 路径图所需要的数据结构非常简单，两列数据，左侧是起点，右侧是终点，并且每一行的终点是下一行的起点，这样最终才可以制作出连接在一起的路径图。 首先我们来构造所需的数据： 构造数据：起点数据：1origin&lt;- c("beijing","shijiazhuang","zhengzhou","hefei","nanjing","济南","dalian") 终点数据：1destination&lt;- c(origin[-1],origin[1]) #将起点数据首尾互换，并构造终点数据 将终点数据、起点数据合并为数据框格式的作图数据：1map_data&lt;- data.frame(origin,destination) 绘图过程：绘图：123456map_out1&lt;- remap(mapdata=map_data, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out1) #在web上展示图形 上面的例子中，为了使得路径图首尾相连，终点数据是起点数据调换首尾行而得到的。 那么如果不要求路径图首尾相连的话可以设置如下结构： 12345678map_data1&lt;-map_data[-7,]map_out2&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out2) #在web上展示图形 这种路径图的形式非常适合用于表达带有很多中间节点的动态路线。 当然如果你也可以将数据源设置成两条毫不相干的路线： 12data1&lt;-c("西安","zhengzhou","shijiazhuang","beijing","shenyang","changhcun","哈尔滨") data2&lt;-c("nanyang","wuhan","changsha","南昌","guangzhou","南宁","贵阳") 123origin&lt;-c(data1[1:6],data2[1:6])destination&lt;-c(data1[2:7],data2[2:7])map_data1&lt;- data.frame(origin,destination) 123456map_out3&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out3) 随机生成的线条和气泡颜色看着挺别扭，我们可以将其修改为自定义颜色： 123456789map_out4&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='none', lineColor = "white", backgroundColor="black" ) )plot(map_out4) 你可以用这种方法，结合自己的数据来表达多个地域之间的流动方向：比如一打一路、长征、贸易路线、铁路路线图等都非常适合这种表达。 gif效果： 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out5) #保存的同时自动调用浏览器窗口 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>REmap</tag>
        <tag>路径图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmap动态地图]]></title>
    <url>%2F2017%2F06%2F07%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmap%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天开始，要跟着大家学习一个新的可视化R包——REmap包。 说起来，这个包要归功于百度的可视化开源项目——echarts,它是国内为数不多的高水平开源可视化js库，在业界地位首屈一指。 经过大神的努力，我们终于可以在R语言中以简洁的REmap函数形式，来调用Echarts核心功能，而不用亲自去学js代码，就可以创建动态地图可视化作品。 如果有小伙伴儿熟悉百度的大数据可视化项目——百度迁徙地图，以及交通通勤图，以及后来的一带一路可视化路线图，肯定对那些动态地图上流动的线条和路径有很深的印象。 下面我们开始简单介绍REmap的主要功能： REmap包中涵盖有一组函数，我所知道并用过的有REmap、REmapB、REmapC、REmapH。 每一个函数都对应着几种炫酷的动态效果类型： 今天我们先介绍REmap函数并利用该函数制作简单的流向图： 安装及加载：123install.packages("devtools")devtools::install_github("lchiffon/REmap") #开发者/包名library(REmap) #加载 语法介绍：REmap函数的作图理念与ggplot其实还是有雷同的，它也是将数据信息和美学信息分开表达，数据信息包含在数据表中，而美化修饰参数都包含在theme内。123remap(mapdata, title = " ", subtitle = "", theme = get_theme("Dark")) 这是一个典型的REmap函数的结构，mapdata是我们所要展示的数据框格式数据集，里面包含了两列数据：起点位置、终点信息。 title用于设置主标题、subtitle用于设置副标题。而theme用于设定整个图形的主题风格，该主题是一个封装的函数变量，里面包含诸多参数信息（各种点线面的颜色、度量等信息）。 下面是一个典型的REmap主题内的参数示例：123456789get_theme(theme = "Dark", lineColor = "Random", backgroundColor = "#1b1b1b", titleColor = "fff", borderColor = "rgba(100,149,237,1)", regionColor = "#1b1b1b", labelShow = T, pointShow = F, pointColor = "gold") 参数说明： 参数一：theme为总体配色，默认选项有“Dark”、“Bright”、“Sky”、“none” 参数二：lineColor为线条颜色，默认是随机， 也可自行设置，如’red’ 参数三：backgroundColor为地图外背景颜色 参数四：titleColor为标题颜色 参数五：borderColor为地图中地域边缘颜色，不同省份、城市的边缘 参数六：regionColor为地域颜色，即地图显示的颜色 参数七：labelShow为逻辑参数，是否显示地域名称，默认为T，即显示，只用于remapC函数 参数八：pointShow为逻辑参数，是否显示地域所在点，默认为F，不显示，只用于remapC函数 参数九：pointColor为pointShow中点的颜色，只用于remapC函数 REmap可以非常轻松的获取城市地点的经纬度数据： 以大连为例：12get_city_coord("大连")[1] 121.62139 38.91934 如果想要获取一组城市的经纬度信息，可以直接赋值给城市向量：123456789city_list &lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou")get_geo_position(city_list) lon lat city1 116.4136 39.91101 beijing2 117.2059 39.09091 tianjin3 123.4390 41.81134 shenyang4 121.6214 38.91934 dalian5 113.6313 34.75349 zhengzhou 而且据说这两个函数大部分时候对拼音与汉字，甚至拼音的大小写都不敏感，所以避免了很多麻烦。 生成模拟数据集：创建起始点：12destination&lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou") #终点origin&lt;- rep("dalian",length(destination)) #起点 合成数据框格式的起终点数据1map_data&lt;- data.frame(origin,destination) 数据预览：1234567head(map_data) origin destination1 dalian beijing2 dalian tianjin3 dalian shenyang4 dalian dalian5 dalian zhengzhou 作图函数：1234map_out&lt;-remap(mapdata=map_data, #流向地图的数据源（依次为起点、重点两列） title="我是标题", #设置主标题 subtitle="我是副标题", #设置副标题 theme =get_theme(theme="Bright")) #设置主题（默认主题一共有三套：“Dark”,“Bright,”Sky“） 运行以上代码之后，动态图表已经生成名为map_out的对象，只需使用plot函数调用一下map_out图表对象就可以看到该动态图表效果。 提示下，这里的map_out的对象是一个js代码生成的html对象，运行完plot之后，动态图表效果不是呈现在R的图表窗口而是调用了桌面浏览器的Web窗口。 12plot(map_out)Save img as: C:\Users\ADMINI~1\AppData\Local\Temp\RtmpAxQndv/ID_20161015191055_242761.html 运行完成之后，浏览器窗口会自动呈现动态图表效果： 其实仔细看以上代码，与ggplot的地图代码相比，要简单很多，数据集也很简单（最重要的直接支持地点名称而不需要经纬度数据），当然这些便利性主要归功于它的底层代码是调用Echarts项目，地理位置信息有百度地图的强大系统支持。 可选主题介绍：Dark主题：12map_out1&lt;-remap(mapdata=map_data,title="我是标题",subtitle="我是副标题",theme =get_theme(theme="Dark"))plot(map_out1) Sky主题：1234567map_out2&lt;-remap(mapdata=map_data,title="我是标题",subtitle="我是副标题",theme =get_theme(theme="Sky"))map_out&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme =get_theme(theme="Bright"))plot(map_out2) 关于主题自定义：以上是该函数内置的三款主题，当然如果你要想自定义主题的话，也是可以的，但是需要将theme=&quot;Sky&quot;设置为none，否则系统主题会覆盖掉你自定义的主题。 1234567891011map_out3&lt;-remap(mapdata=map_data, #设计流向地图title="我是标题", #设置标题subtitle="我是副标题", #设置副标题theme=get_theme(theme="none", #设置主题 lineColor="blue", #设置线条颜色backgroundColor="white", #设置背景颜色titleColor="black", #设置标题颜色borderColor="grey", #设置地区边界颜色regionColor="SandyBrown") #设置地区颜色)plot(map_out3) 但是个人习惯，还是比较喜欢先将主题定义好并命名，然后在运行图表代码的时候直接饮用，这样比较利于后期主题的微调： 123456mytheme&lt;-get_theme(theme="none", #设置主题 lineColor="blue", #设置线条颜色backgroundColor="white", #设置背景颜色titleColor="black", #设置标题颜色borderColor="grey", #设置地区边界颜色regionColor="Bisque") 12345map_out4&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme=get_theme(theme="none"))plot(map_out4) 当然如果将数据框中的数据两列调换，那么地图就可以做成流入图。 12origin&lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou") #终点destination&lt;- rep("dalian",length(destination)) #起点 合成数据框格式的起终点数据1234567map_data&lt;- data.frame(origin,destination) map_out5&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme=get_theme(theme="Bright"))plot(map_out5) 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out5) #保存的同时自动调用浏览器窗口 其实以上所有图表都是带有动态交互效果的！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>REmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leaflet在线地图进阶宝典之——高级辅助特性]]></title>
    <url>%2F2017%2F06%2F06%2Fleaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E4%B9%8B%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E8%BE%85%E5%8A%A9%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[本文跟大家分享leaflet在线地图的高级附加属性，这些属性通常来讲仅仅作为我们数据额可视化项目的修饰元素，而并不会影响数据元素。 但是有了这些辅助修饰元素，往往可以使你的数据可视化项目变得更具人性化。 本文内容根据leaflet的官方主页（R语言接口）翻译而来： 附加属性： 测度工具：Leaflet Measure 增加该工具可以轻而易举的让你在可视化地图中通过鼠标打点，测量两点之间的距离，如果是闭合区域，则可以直接计算闭合区域的真实面积。 网格线：Graticule 网格线可以提供平面坐标系下地理空间的经纬度位置参考线。 昼夜分界线：Terminator (day/night indicator) 昼夜分界线可以提供一天中不同地区的昼夜分界状况。 mini小地图：Minimap mini窗口小地图可以提供定位窗口，让你知道主版面中位置在更大范围地理区域上的大致方位，就相当于游戏中的mini导航图。 辅助按钮：EasyButton 辅助按钮可以提供一键初始化比例尺，一键定位功能。 自定义js属性：Custom JavaScript with htmlwidgets::onRender 你可以利用leaflet与HTML的接口工具对地图版面进行更加丰富的属性设置。 测度工具：Leaflet Measure123library(leaflet)m&lt;-leaflet()%&gt;%addTiles()m %&gt;%fitBounds(-73.9,40.75,-73.95,40.8) %&gt;%addMeasure() 右上侧的小弹窗打开之后选择创建测距选项，就可以通过鼠标打点儿，测量两点之间的地理距离，如果是三个以上的点，则会测量出闭合多边形区域的面积。 动态效果： 12345678m %&gt;% fitBounds(13.76134, 52.675499, 13.0884, 52.33812) %&gt;% #设定版面呈现的地理区域范围 addMeasure( position = "bottomleft", #测距菜单位置 primaryLengthUnit = "meters", #测量的点距离输出单位 primaryAreaUnit = "sqmeters", #测量的闭合多边形区域面积输出单位 activeColor = "#3D535D", # completedColor = "#7D4479") 网格线：Graticule1leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule() 12leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule(interval = 10, style = list(color = "#FF0000", weight = 1)) 而且网格线系统是可控元素，控制方式就是将其当成一个单独的图层，然后分组。 123leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule(group = "Graticule") %&gt;% addLayersControl(overlayGroups = c("Graticule"),options=layersControlOptions(collapsed = FALSE)) 昼夜分界线：Terminator (day/night indicator)1leaflet() %&gt;% addTiles() %&gt;% addTerminator() 昼夜分界线支持自定义日期和分组功能： 123456789leaflet() %&gt;% addTiles() %&gt;% addTerminator( resolution=10, time = "2013-06-20T21:00:00Z", group = "daylight") %&gt;% addLayersControl( overlayGroups = "daylight", options = layersControlOptions(collapsed = FALSE)) mini导航地图：Minimap123leaflet() %&gt;% setView(0,0,3) %&gt;% addProviderTiles(providers$Esri.WorldStreetMap) %&gt;% addMiniMap() mini导航地图中的地图背景也是支持自定义的： 123leaflet() %&gt;% setView(0,0,3) %&gt;% addProviderTiles(providers$Esri.WorldStreetMap) %&gt;% addMiniMap(tiles = providers$Esri.WorldStreetMap,toggleDisplay = TRUE) 视频演示： 辅助工具菜单：123456789library(htmltools)library(htmlwidgets)leaflet() %&gt;% addTiles() %&gt;% addEasyButton(easyButton( #添加一键恢复初始窗口比利时 icon="fa-globe", title="Zoom to Level 1", onClick=JS("function(btn, map)&#123; map.setZoom(1); &#125;"))) %&gt;% addEasyButton(easyButton( #添加一键定位功能（根据你的所在位置） icon="fa-crosshairs", title="Locate Me", onClick=JS("function(btn, map)&#123; map.locate(&#123;setView: true&#125;); &#125;"))) 动态效果： 辅助按钮：EasyButton以下代码展示了如何通过调用js工具控件来通过打开菜单工具开启地图上的点聚合功能，同时关闭菜单工具按钮，关闭点聚合功能。 1234567891011121314151617181920212223242526272829303132leaflet() %&gt;% addTiles() %&gt;% addMarkers(data=quakes, clusterOptions = markerClusterOptions(), clusterId = "quakesCluster") %&gt;% addEasyButton(easyButton( states = list( easyButtonState( #状态1：打开菜单，开启点聚合 stateName="unfrozen-markers", icon="ion-toggle", title="Freeze Clusters", onClick = JS(" function(btn,map) &#123; var clusterManager = map.layerManager.getLayer('cluster', 'quakesCluster'); clusterManager.freezeAtZoom(); btn.state('frozen-markers'); &#125;") ), easyButtonState( #状态2：关闭菜单，结束点聚合功能 stateName="frozen-markers", icon="ion-toggle-filled", title="UnFreeze Clusters", onClick = JS(" function(btn, map) &#123; var clusterManager = map.layerManager.getLayer('cluster', 'quakesCluster'); clusterManager.unfreeze(); btn.state('unfrozen-markers'); &#125;") ) ) )) 动态效果： 自定义js属性：Custom JavaScript with htmlwidgets::onRender基础图层会根据导航窗内的图层风格改变而随之转换：1234567891011121314151617181920mymap&lt;-leaflet() %&gt;% setView(0,0,3)esri &lt;- grep("^Esri", providers, value = TRUE)for (provider in esri) &#123; mymap &lt;-mymap %&gt;% addProviderTiles(provider, group = provider)&#125;mymap %&gt;% addLayersControl(baseGroups = names(esri), options = layersControlOptions(collapsed = FALSE)) %&gt;% addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE, position = "bottomleft") %&gt;% htmlwidgets::onRender(" function(el, x) &#123; var myMap = this; myMap.on('baselayerchange', function (e) &#123; myMap.minimap.changeLayer(L.tileLayer.provider(e.name)); &#125;) &#125;") 动态效果： 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leaflet在线地图进阶宝典——json素材操纵与图层面板控制]]></title>
    <url>%2F2017%2F06%2F05%2FLeaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E2%80%94%E2%80%94json%E7%B4%A0%E6%9D%90%E6%93%8D%E7%BA%B5%E4%B8%8E%E5%9B%BE%E5%B1%82%E9%9D%A2%E6%9D%BF%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[这篇教程憋了很久，其实算是3个月前leaflet在线地图系列的进阶篇，但是因为当时对于leaflet地图的数据源结构理解有限，技能勉强操控shp数据源，对于json数据源所知甚少，一直拖了这么久才更新。 随着近期在json数据结构的理解不断加深，对于list结构和向量化运算的掌握也多有提高，这才能熟练的在leaflet系统中操控json数据。 本篇主要分为两大部分： 如何自如的操纵json数据来打造leaflet所能识别的数据源和style属性； 如何操控leaflet控制台版面中的地图图层和数据图层。 想要很好的理解本文，你需先对leaflet系统基础语法有所掌握（其实可视化的图层语法都大同小异，leaflet属于JavaScript语言打造的在线地图库，同D3、plotly、Rcharts以及Highcharts等接口的语法差别不大）。 但如果你在看本文之前已经看过我的前期四篇leaflet入门篇： 动态地理信息可视化——leaflet在线地图简介 动态地理信息可视化——散点地图系列 动态地理信息可视化——leaflet构造路径图 动态地理信息可视化——leaflet填充地图 那么本文理解起来就容易多了，仅仅是温故知新罢了！ 当然如果你学有余力的话，你也可以顺便把百度的Echarts系统地图接口也学习一下： R语言可视化——REmap动态地图 R语言可视化——REmap(路径图) R语言可视化——REmapC(填充地图) R语言可视化——REmapH(中心热度图) 如果你能熟练掌握以上两套在线地图语法，那么制作此类可视化项目至少在技术角度上来说已经没有任何门槛。 以下是本文的主要内容： json地图数据结构和变量操控： 加载包：12345678910library(jsonlite)library(leaflet)library(dplyr)library(geojsonio)library(rgdal)library(sf)library(ggplot2)library(maptools)library(plyr)library(htmltools) 导入数据集：这样的全局预设可以为你省却很多麻烦，强烈建议 1234options(stringsAsFactors=FALSE,warn=FALSE) setwd("D:/R/mapdatanew/")url&lt;-"https://raw.githubusercontent.com/ljtyduyu/DataWarehouse/master/Mapdata/City/110100.json" 最近把自己所有的关于地图可视化的数据传到了个人Github上，这样无论是大家以后调用数据还是自己平时练习都方便多了！ 以下数据导入json原生数据格式的三种方式：（2,3两种是没啥区别的，但是simplifyVector=FALSE参数设定与否则至关重要，他决定着输入的json数据是经过平整的向量化数据还是原生的list数据，这里的leaflet需要原生格式的json数据） 123geojson1&lt;-fromJSON(url) #在同一层级对象长度一致，便会被自动视作数据框。geojson2&lt;-fromJSON(url,simplifyVector=FALSE) #不强转化为数据框。geojson3&lt;-readLines(url,warn=FALSE,encoding="UTF-8")%&gt;%paste(collapse="\n")%&gt;%fromJSON(simplifyVector=FALSE) 设置随机中非常必要，否则容易导致每次的效果都不一样：1set.seed(1234) 向地图素材中添加作图数据：向list对象中添加数据（随机数据）1234geojson3$features&lt;-lapply(geojson3$features,function(feat)&#123;feat$properties$scale&lt;-runif(1,0,10)feat&#125;) 从list对象中读取数据(主要读取我们可做更改与扩展的行政区划列表信息)123456mydata&lt;-ldply(geojson3$features,function(feat)&#123; name&lt;-feat$properties$nameid&lt;- feat$properties$idscale&lt;-as.numeric(feat$properties$scale)mydata&lt;-data.frame(name,id,scale)&#125;) Default styles for all features it has higher precedence compare with the style in a function of GeoJSON1geojson3$style=list(weight=1,color="#555555",opacity=1,fillOpacity=0.8) Color by scale using quantiles1pal&lt;-colorQuantile("Greens",mydata$scale) Add a properties$style list to each feature123456geojson3$features &lt;- lapply(geojson3$features, function(feat) &#123; feat$properties$style&lt;-list( fillColor=pal(feat$properties$scale) ) feat&#125;) 关于属性设置的三个优先级：按照由高到低的顺序排列为：123 feature-specific styles #（也就是设置在 simple featrue的style） the top-level style object #（设置在features中的style）style-related arguments passed to the function #（设置在GeoJSON内的各种参数） 这是通过增加地图图层来进行图层控制的简单案例：123456789101112leaflet()%&gt;%addTiles(group ="OSM (default)")%&gt;%setView(lng=116.435889,lat=39.932642,zoom=8)%&gt;%addGeoJSON(geojson3,group="GeoJSON")%&gt;%addProviderTiles(providers$CartoDB.Positron,group="CartoDB")%&gt;%addProviderTiles(providers$Stamen.TonerLines,options=providerTileOptions(opacity=0.35),group="TonerLines")%&gt;%addProviderTiles(providers$Stamen.TonerLabels,group="TonerLabels")%&gt;%addLayersControl( baseGroups = c("OSM (default)", "CartoDB", "TonerLines","TonerLabels"), overlayGroups = c("GeoJSON"), options=layersControlOptions(collapsed = FALSE) ) 以下这段代码是之前leaflet系列教程的线图篇里面的案例，这里刚好应用一下： 123456789101112data&lt;-read.table("D:/R/File/subwayline.txt",header=TRUE,stringsAsFactors = FALSE)data$size&lt;-runif(47,10,25)data$Type&lt;-as.factor(data$Type)data1&lt;-filter(data,Type=="NO1")data2&lt;-filter(data,Type=="NO5")pal &lt;- colorFactor(topo.colors(2),data$Type)leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,radius=~size,group=~Type) 这是一个高度综合的案例，包含底图图层的多分类控制；数据图层的多分类控制以及点线面三种数据图层的综合运用。 123456789101112131415leaflet()%&gt;%addTiles(group ="OSM (default)")%&gt;%setView(lng=116.435889,lat=39.932642,zoom=8)%&gt;%addGeoJSON(geojson3,group="GeoJSON")%&gt;%addProviderTiles(providers$CartoDB.Positron,group="CartoDB")%&gt;%addProviderTiles(providers$Stamen.TonerLines,options=providerTileOptions(opacity=0.35),group="TonerLines")%&gt;%addProviderTiles(providers$Stamen.TonerLabels,group="TonerLabels")%&gt;%addPolylines(data=data1,~lon,~lat,color="red",group="line1")%&gt;%addPolylines(data=data2,~lon,~lat,color="orange",group="line2")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,radius=~size,group="address",color = "#1843F9")%&gt;%addLayersControl( baseGroups = c("OSM (default)", "CartoDB", "TonerLines","TonerLabels"), overlayGroups = c("GeoJSON","line1","line2","address"), options=layersControlOptions(collapsed = FALSE) ) 动态视频效果来一波！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>json</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet填充地图]]></title>
    <url>%2F2017%2F06%2F05%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E5%A1%AB%E5%85%85%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[这一篇是leaflet动态地图的第四篇，也是最值得推荐的一篇，这一篇涉及到热力地图填充，通过该篇内容，大家可以体会大leaflet在线地图的R借口在处理热力地图上面颜色标度映射的强大优势。 加载包：12345678910library(plyr)library(maps)library(mapdata)library(leaflet)library(stringi)library(maptools)library(htmltools)library(RColorBrewer)library(ggplot2)library(rgdal) 地图素材加载：（leaflet支持多种地图素材，比如常见的shapefile格式、json格式以及其他在线地图，但是因为json格式本来还没有很熟练，这里用shp格式地图素材为例进行加讲解）。 肯定会有小伙伴儿会问，既然leaflet本身就是在线地图，为啥还要费事儿加载shp地图素材就进行映射，因为leaflet在线地图提供的地图底图本身具有多级缩放特性，每一缩放级别都有对应的行政区划界线，但是这些参数和行政区划是封装在底层的js语言中的，我们无法使用R语言直接进行调用，只能作为一个图层素材进行背景修饰，说白了，其实我们想要的仅仅是多级缩放的动态切换效果，这样再结合我们自定义的地图素材，可以呈现出更加完美的效果。（只有热力填充地图需要定义区域界线，而点图和线图都可以直接利用leaflet本身的地图素材，因为只需要坐标点位置即可）。 我们常用的地图素材资源无非以下三种，R包内置的地图数据、shapefile格式和json格式。以下是三种格式素材导入并在leaflet中制作的地图的基本代码： maps包:12mapStates&lt;-map("state",fill=TRUE,plot=FALSE)leaflet(mapStates) %&gt;% addTiles() %&gt;%addPolygons(fillColor=topo.colors(10,alpha =NULL), stroke = FALSE) 12mapWorld&lt;-map("world",fill=TRUE,col=rainbow(200),ylim=c(-60,90),mar=c(0,0,0,0))leaflet(mapWorld) %&gt;% addTiles() %&gt;%addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) shapefile:123American_map &lt;-readShapePoly("C:/rstudy/USA_map/STATES.SHP")American_map$STATE_NAME = iconv(American_map$STATE_NAME,"UTF8","CP936") leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(popup=~STATE_NAME,fillColor=topo.colors(10,alpha=NULL),stroke=FALSE) json文件：1234library(jsonlite)geoData&lt;-readLines("D:/R/mapdata/State/USA.json",warn=FALSE)%&gt;%paste(collapse="\n")%&gt;%fromJSON(simplifyVector=FALSE)geoData$style=list(weight=1,color="red",fillColor="green",opacity=1,fill=TRUE,fillOpacity=0.6)leaflet()%&gt;%setView(lng=-98.961387,lat=39.708533,zoom=3)%&gt;%addTiles()%&gt;%addGeoJSON(geoData) 前两种素材作图过程大同小异，特别是一些标度的属性声明很类似ggplot中的函数过程，但是json格式的素材操作起来就不是很友好，他的标度属性是要在数据文件中新建style的list对象进行生命，而且json格式中的list非常多，结构相对复杂，至今我也没完全搞明白如果自由操作。 几张分类颜色标度填充效果：下面是承接上面shapefile格式素材做展现的四中颜色标度（三种连续性标度和一种分类标度的映射过程）。 colorQuantile（连续性数值变量的百分比颜色过度）:1234pal &lt;- colorQuantile("Greens",American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title = "1990年人口数量（万人）") 以下两种同属连续性数值变量（使用颜色数量不同）12345colorNumeric(多色过度):pal&lt;-colorNumeric(c("darkgreen","yellow","orangered"),American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles() %&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title = "1990年人口数量（万人") 12345colorNumeric（单色过度):pal&lt;-colorNumeric("Greens",American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 以下两种也同属连续性数值变量的颜色标度映射 （但是可以自定义分组数量，其实实质上是对变量分割，后以分组形式填充，更准确的说，确实是应用了变量转换的方式（数值转有序因子），但是过程是自动进行的，而不是像在ggplot中一样不需手动转换） 12345colorBin（单色渐变分组过度):pal&lt;-colorBin("Greens",American_map@data$POP1990,10)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity=0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 12345colorBin（多色色渐变分组过度):pal&lt;-colorBin(c("darkgreen","yellow","orangered"),American_map@data$POP1990,8)leaflet(American_map) %&gt;% addTiles() %&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity=0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 离散标度： （这个例子是用在变量本身就是因子变量的情况下，算是分类变量情况下的颜色标度映射）1234567china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")mydata&lt;-read.csv("c:/rstudy/geshengzhibiao.csv")mydata$type&lt;-factor(sample(LETTERS[1:5],33,replace=TRUE))shape &lt;- merge(china_map,mydata,by="NAME")pal &lt;- colorFactor(c("green","red","blue","yellow","brown"), domain = c("A", "B","C","D","E"))#设置色盘：i_popup&lt;-paste0("&lt;strong&gt;Province:&lt;/strong&gt;",shape$NAME,"&lt;br&gt;","&lt;strong&gt;Level:&lt;/strong&gt;",shape$type) 12345设置弹出窗口leaflet(shape)%&gt;%addTiles()%&gt;% setView(116.387021,39.969369,zoom=3)%&gt;%addPolygons(fillColor=~pal(shape$type),fillOpacity=0.8,color="#000000",weight=1,popup=i_popup)%&gt;%addLegend(pal=pal,values=shape@data$type,position="bottomright",title=paste0("小魔方基团2016年","&lt;br&gt;","营业分布等级")) 以上地图效果都支持多节自动缩放和弹窗动态信息显示（需设置popup属性及少量html交互代码） leaflet在线地图底层由js源码编写，天然支持html语言，如能结合html搭配使用，可以在动态地图元素中，特别是弹窗中无缝嵌入图片、超链接甚至视频等多类元素，感兴趣的小伙伴儿可以自行探索。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>填色地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet构造路径图]]></title>
    <url>%2F2017%2F06%2F04%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E6%9E%84%E9%80%A0%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[根据先前几篇内容的框架，今天介绍leaflet在线地图的第三篇，以线条元素构造的路径图。 加载包：12library(leaflet)library(dplyr) 导入数据集：1234data&lt;-read.table("D:/R/File/subwayline.txt",header=TRUE,stringsAsFactors = FALSE)data$Type&lt;-as.factor(data$Type)data1&lt;-filter(data,Type=="NO1")data2&lt;-filter(data,Type=="NO5") 以上我用百度地图的坐标拾取平台采点拾取的背景地铁一号线和五号线的车站地理位置信息，（因为没有现成的数据，只能手工采点，可能不是很准确） 基本语法解释：今天要介绍的leaflet类型是线条，也即addPolylines函数，其基本语法如下： 12345678addPolylines(map, lng = NULL,lat = NULL, #指定数据源并做经纬度声明 layerId = NULL, group = NULL, #图层分组（制作动态可见性交互时使用） stroke = TRUE, #是否呈现路径线 color = "#03F",weight = 5,opacity = 0.5, #关于线条的颜色、宽度、透明度 fill = FALSE, fillColor = color, fillOpacity = 0.2, dashArray = NULL, smoothFactor = 1, noClip = FALSE, #线型参数，平滑度等 popup = NULL, options = pathOptions(), data = getMapData(map)) #弹窗、选项控制 构造色盘：1pal &lt;- colorFactor(topo.colors(2),data$Type) 可视化过程：作图函数：使用默认点标识12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addMarkers(data=data,~lon, ~lat,popup = ~address) 使用可自定义的圆点标识车站位置12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color="red") 12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,color=~Type) 以下是几种比较常用的地图背景素材1234addProviderTiles("Esri.WorldStreetMap") addProviderTiles("Esri.WorldImagery") addProviderTiles("Esri.WorldTerrain") addProviderTiles("Esri.NatGeoWorldMap") 几张常见的素材风格：12345leaflet()%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.WorldGrayCanvas") %&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.NatGeoWorldMap") %&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 是不是觉得花样不够多呀，那好吧，以下这些，全部都送给你，那好不谢！ OpenStreetMap.Mapnik OpenStreetMap.BlackAndWhite OpenStreetMap.DE OpenStreetMap.France OpenStreetMap.HOT OpenTopoMap Thunderforest.OpenCycleMap Thunderforest.Transport Thunderforest.TransportDark Thunderforest.SpinalMap Thunderforest.Landscape Thunderforest.Outdoors Thunderforest.Pioneer OpenMapSurfer.Roads OpenMapSurfer.Grayscale Hydda.Full Stamen.Toner Stamen.TonerBackground Stamen.TonerLite Stamen.Watercolor Stamen.Terrain Stamen.TerrainBackground Stamen.TopOSMRelief Esri.WorldStreetMap Esri.DeLorme Esri.WorldTopoMap Esri.WorldImagery Esri.WorldTerrain Esri.WorldShadedRelief Esri.WorldPhysical Esri.OceanBasemap Esri.NatGeoWorldMap Esri.WorldGrayCanvas MtbMap CartoDB.Positron CartoDB.PositronNoLabels CartoDB.PositronOnlyLabels CartoDB.DarkMatter CartoDB.DarkMatterNoLabels CartoDB.DarkMatterOnlyLabels HikeBike.HikeBike HikeBike.HillShading NASAGIBS.ModisTerraTrueColorCR NASAGIBS.ModisTerraBands367CR NASAGIBS.ViirsEarthAtNight2012 NASAGIBS.ModisTerraLSTDay NASAGIBS.ModisTerraSnowCover NASAGIBS.ModisTerraAOD NASAGIBS.ModisTerraChlorophyll 细数也有好几十个，够你玩一阵子了，使用方法仅仅是通过设置图层函数进行调用，然后就可以愉快的在图层上面进行可视化操作了。addProviderTiles(“地图类型”) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>路径图</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——散点地图系列]]></title>
    <url>%2F2017%2F06%2F03%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%95%A3%E7%82%B9%E5%9C%B0%E5%9B%BE%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[这是一篇拖了好久的稿子，因为过年玩high了，一直放着没写，今天得空，赶快得空，赶紧整理一下。 本篇主讲leaflet在线地图系列中的散点系列，包含颜色映射规则（离散和连续）、大小映射规则。 其实也就是包含了我们看到的常规的散点图类型和气泡图类型。同时结合leaflet丰富多彩的背景地图主题进行展开。 加载包：123456789library(plyr)library(maps)library(mapdata)library(leaflet)library(stringi)library(maptools)library(htmltools)library(RColorBrewer)library(ggplot2) 为方便展示这里统一使用中国省级行政地图（shp格式导入），在省会城市坐标进行指标数据映射。 地图素材数据导入：12345province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") #中国各省省会坐标province_city$size&lt;-round(runif(34,5,10),2) #添加连续数值变量province_city$type&lt;-factor(sample(LETTERS[1:5],34,replace=TRUE)) #添加因子变量以便之后演示co&lt;-substr(rainbow(34),1,7)province_city&lt;-data.frame(province_city,co) 制作色盘：12pal &lt;- colorFactor(c("green", "red","yellow","green","blue"), domain = c("A", "B","C","D","E"))#因子变量的映射色盘cPal &lt;- colorNumeric(palette = c("blue","yellow","red"),domain =province_city$size) #数值型变量的映射色盘 ###可视化图形： 作图函数：1leaflet(province_city)%&gt;%addTiles()%&gt;% addMarkers(lng=~jd,lat=~wd,popup=~city) 1leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) 1leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,radius=~size, color = ~co, fill=TRUE,popup=~city) 离散标度映射：1234leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,color = ~pal(type),weight=~size,popup=~city)%&gt;% addLegend("bottomright",pal=pal,values = ~type,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,color = ~pal(type),radius = ~size,fill=TRUE,popup=~city) addLegend("bottomright",pal=pal,values = ~type,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) 连续标度映射：123456leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,fillColor=~cPal(size),weight=~size,stroke=FALSE,fillOpacity=0.8,popup=~city)%&gt;%addLegend("bottomright",pal=cPal,values = ~size,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,fillColor=~cPal(size),radius = ~size,stroke=FALSE,fillOpacity=0.8,popup=~city)%&gt;%addLegend("bottomright",pal=cPal,values = ~size,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) 几种常见的地图风格主题效果：默认点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) 实心点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) 带轮廓的点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city)leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city)leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city) 可选择的地图类型：12345678addProviderTiles("Esri.WorldStreetMap") #浅色addProviderTiles("Esri.WorldImagery") #深色深色卫星云图addProviderTiles("Esri.WorldTerrain") #亮白色addProviderTiles("Esri.NatGeoWorldMap") #深沉轮廓色addProviderTiles("Stamen.Toner") #Third-Party TilesaddProviderTiles("Acetate.terrain") #addProviderTiles("CartoDB.Positron")addProviderTiles("Stamen.TonerLabels") # 本篇点形状是可以支持自定义的，需要使用网络图标资源，但是鉴于步骤和实用性，就此略过，如果感兴趣，可以私下探讨。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet在线地图简介]]></title>
    <url>%2F2017%2F06%2F02%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[最近稍微涉猎了一下leaflet这个包，突然感到发现了动态可视化的新大门，这个包所提供的地图类型、动态效果、图层展示方式都大大扩展了ggplot作图系统的在数据地图上的缺陷。 leaflet是业界比较流行的JS开源交互式地图包，它支持直接调用OpenStreetMap, Mapbox, and CartoDB等主流地图数据作为辅助图层来进行地理信息数据的可视化操作。 除了这些在线地图素材之外，它对于shapefile格式和json格式以及sp包的空间数据格式的地图数据都有着很好的支持，在图层函数中涵盖了点标记、线条和多边形等常用地理信息可视化图形要素。 该包的代码对R语言的文档输出系统有着良好的支持，可以很方便的嵌入knitr/rmarkdown文档中，也能无缝嵌入shiny系统的webapp中，兼容性可称之为逆天。 接下来以中国地图为例，先对该地图所能呈现和调用的地图类型做一个简短的介绍，深入应用系列技巧可能要等到年后才能陆续更新，大小耐心等吧！ 加载包：12345library(plyr)library(mapdata)library(leaflet)library(maptools)library(ggplot2) 导入中国各省会城市地理信息数据：12345province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") province_city$size&lt;-round(runif(34,5,10),2)province_city$type&lt;-factor(sample(LETTERS[1:5],34,replace=TRUE))co&lt;-substr(rainbow(34),1,7)province_city&lt;-data.frame(province_city,co) leaflet函数的基本语法结构如下：该句加载地图数据，也可以说是对地图的初始化操作，相当于ggplot2作图系统中的ggplot（）函数，会建立一个没有内容的空白图层面板。1m&lt;-leaflet(data=province_city) 该句设定所要展示的图层中心位置，参数为带有数据的地图图层、经纬度信息以及呈现的缩放级别（3~9级不等）。1setView(m,lng=116.38,lat=39.9,zoom=3) 该句会自动调用一个默认的地图图层作为页面底图。其实是一个图层函数，相当于ggplot系统的geom_XXX对象。1m&lt;-addTiles(m) 该句也是一个图层对象函数，主要呈现点对象信息，点标识为常见的雨滴形状，当然也可以进行自定义。1addMarkers(m,lng=~jd,lat=~wd,popup=~city) #地标符号 以上四局代码会制作出一个以province_city为数据源、以(116.38,39.9)为视觉中心，缩放级别为3级，点标识对象为city的中国行政地图出来。 而且图表原生支持动态操作，你可以使用鼠标滚轮进行放大缩小操作（也可以使用页面左上角的加减号进行操作），每一个点标识都是支持鼠标点击显示弹窗信息的。（弹窗信息中支持定义文本、图片、视频、超链接，当然这些需要对html语言有一定的操作经验）。 该函数的另一大特色是，原生支持管道函数操作，让你的代码简洁、易懂、高效。（很多R函数是需要打开dplyr包并借助其完成对于管道函数的支持）。 以上例子我们可以完全使用管道操作函数进行代码简化。1leaflet(province_city)%&gt;%addTiles()%&gt;%setView(lng=116.38,lat=39.9,zoom=3)%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet函数支持的点有三类（我所知的），默认的是雨滴形状（addMarkers），还有两种分别是addCircle、addCircleMarkers。 addCircle是实心点，只有一个颜色属性，addCircleMarkers是带轮廓的圆点，可以分别对轮廓和内园进行颜色设定，两者都支持大小（面积）映射。 当然剩余两种最为常见的地图图层属性就是线和面了，这是物理空间的重要三要素嘛 点图层：addMarkers\addCircle\addCircleMarkers 线图层:addPolylines 面图层：addPolygons 其实这些对象和ggplot中的图层对象对应的很完整，geom_point()\geom_line\geom_polygon 除此之外，无外乎颜色映射参数、图例参数等。 颜色映射对于数据地图而言是最复杂也最为重要的视觉对象，毕竟你的目光中要有很大一部分数据墨水比是由色彩来呈现的，但是小魔方再在前讲解ggplot数据地图系列的时候已经讲解过非常详细的颜色映射规则。 针对数据地图而言，颜色映射要依据数据类型而定，数值型变量（包含定距变量、定比变量）需要使用连续渐变色进行映射，因子变量（包含分类及有序）需要使用分类色、或者同色系的离散渐变进行颜色映射。 在leaflet函数中对颜色进行了非常精准和高效的分类。 用于连续数值的：colorNumeric，colorBin和colorQuantile; 用于分类输入，colorFactor。 colorNumeric：针对数值变量进行均匀插值，将颜色（定义的）连续均匀分布在数值区间内。 colorBin：针对数值型变量进行数量段的分组，然后按照组别分别填色。（其实相当于对数值型变量进行划组，生成有序的因子组，然后以分段因子变量的形式进行颜色映射，但是这个过程在leaflet函数中是自动化完成的，无需我们手工生成新变量，这一点儿是leaflet函数相对于ggplot函数在制作数据地图方面的重要优势）。 colorQuantile：也是针对数值型变量，只是是以百分比分位点的形式将数值变量划分为一组百分比分位点区间（其实理念和过程与colorBin一致，只是从绝对量分组变成了百分比分组），然后进行颜色映射。 colorFactor：这个就是单纯的分类变量（因子或者有序）映射的颜色设置方式。 图例对象：addLegend：是添加图例的图层对象，相当于ggplot中的guilde函数。 接来下给大家大致展现以下leaflet所能呈现的最为常见的几种风格地图样式。 ###你地图可视化类型： 地图类型：1234567addProviderTiles("Esri.WorldStreetMap") #浅色addProviderTiles("Esri.WorldImagery") #深色深色卫星云图addProviderTiles("Esri.WorldTerrain") #亮白色addProviderTiles("Esri.NatGeoWorldMap") #深沉轮廓色addProviderTiles("Stamen.Toner") #Third-Party TilesaddProviderTiles("CartoDB.Positron")addProviderTiles("Stamen.TonerLabels") # 1leaflet()%&gt;%addTiles() #默认风格 1leaflet()%&gt;%addProviderTiles("Esri.WorldStreetMap") 1leaflet()%&gt;%addProviderTiles("Esri.WorldImagery") 1leaflet()%&gt;%addProviderTiles("Esri.WorldTerrain") 1leaflet()%&gt;%addProviderTiles("Esri.NatGeoWorldMap") 1leaflet()%&gt;%addProviderTiles("Stamen.Toner") 1leaflet()%&gt;%addProviderTiles("CartoDB.Positron") 1leaflet()%&gt;%addProviderTiles("Stamen.TonerLabels") 限于字数和篇幅，本篇不宜再写下去了（主要小编太困了，上下眼皮打架，已经困得不行了） 关于leaflet内容，年前先暂时先更新这一篇（如果回家还有时间的话，也许继续更新）。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转数据地图系列之——地图上的迷你条形图]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E7%B3%BB%E5%88%97%E4%B9%8B%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E8%BF%B7%E4%BD%A0%E6%9D%A1%E5%BD%A2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[最近忙的厉害，产量下降的有点严重，感谢各位还没取关的小伙伴儿。 一周前更新了一篇数据地图上的气泡散点图的内容，不知怎地，这段时间就是跟地图死磕上了，今天还是数据地图，不过是在数据地图上呈现条形图、柱形图。 之前的一篇因为有现成的作图包支持，geom_scatterpie函数不用花费太大力气就解决了数据地图上的气泡散点图问题。 可是到目前为止我还没有发现支持对应坐标位置的条形图、柱形图，这一篇是参考了知乎上大神提供的思路。 加载包：1234library(maptools)library(ggplot2)library(plyr)library(ggmap) 导入地图素材及省会城市经纬度数据123china_shp &lt;-readShapePoly("c:/rstudy/bou2_4p.shp") china_map &lt;- fortify(china_shp) province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") #城市经纬度数据 新建三个指标，2015年和2016年的某经济度量指标（虚构）N15、N16和环比增长率Ratio。 12province_city1&lt;-mutate(province_city,N15=runif(34,min=500,max=1000),N16=runif(34,600,1100),Ratio=round((N16-N15)/N15,3))province_data&lt;-province_city1[sample(nrow(province_city1),10),] 合并后的数据结构如下，随即选取了10个城市的14、15年度某项经济指标（虚构）以及同比增长率。 ggplot的现有图层图形中是没有直接根据点坐标生成条形图、柱形图的，所以这里我们只能曲线救国，使用线条图和误差线来进行模拟。 首先来画底图：12ggplot()+geom_polygon(aes(x=long, y=lat, group=group), data=china_map, fill="white", colour="grey60") 接下来使用geom_linerange函数（也就是条线图函数）进行各个坐标点的模拟柱形绘制。 画出14年的指标值：123ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+N15/max(N15,N16)*5),size=5,color="orange",alpha=0.8) 再叠加一次16年的指标值1234ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",alpha=0.8)+geom_linerange(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",alpha=0.8) 接下来我们来对已经塑造好的双柱条形图进行美化操作，123456789windowsFonts(myFont = windowsFont("微软雅黑")) ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",alpha=0.8)+geom_linerange(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",alpha=0.8)+geom_text(aes(x=jd,y=wd-0.6,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2015", color= "#5B88A0", size=8)+ annotate("text", x=105, y=49, label="● 2016", color= "#FB882C", size=8) 其实最初在网上看到该图（大概是刘万祥老师的博客，在此感谢老师的启发），他的做法是使用geom_errbar图层函数，也就是误差线图层函数，其实理念是一致的。这里给出原方法。12345678ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_errorbar(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",width=0,alpha=0.8)+geom_errorbar(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",width=0,alpha=0.8)+geom_text(aes(x=jd,y=wd-0.6,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2014", color= "#5B88A0", size=8)+ annotate("text", x=105, y=49, label="● 2015", color= "#FB882C", size=8) 其实如果能换个思路，使用geom_errorh函数，想必一定了以做出横向的条形图。 12345678ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_errorbarh(data=province_data,aes(x=jd,y=wd,xmin=jd-3,xmax=jd+3*N15/max(N15,N16)),size=3,color="#5B88A0",height=0,alpha=0.8)+geom_errorbarh(data=province_data,aes(x=jd,y=wd-0.8,xmin=jd-3,xmax=jd+3*N16/max(N15,N16)),size=3,color="#FB882C",height=0,alpha=0.8)+geom_text(aes(x=jd+0.2,y=wd+1,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2015", color= "#5B88A0", size=7)+ annotate("text", x=105, y=50, label="● 2016", color= "#FB882C", size=7) 以上思路仅供大家大家参考，就像伟大的哈德利.威科姆所说的一样，ggplot只是给你了一个发挥想象力的空间，无拘无束的发挥想象力，总能创造出令人惊讶的作品。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>ggplot2</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转R语言数据地图——地图上的迷你气泡饼图]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%8E%A9%E8%BD%ACR%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E8%BF%B7%E4%BD%A0%E6%9F%B1%E5%BD%A2%E9%A5%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[这个周末刷微信的时候，偶然看到一篇关于R语言12月更新包的介绍，翻到底部看了一眼，刚好看到一个关于ggplot2的一个图层插件——geom_scatterpie。 这个包安装之后，可以提供给ggplot新的图层函数，并制作出气泡状饼图，饼图可以分类填色，饼图大小可以映射数值变量，特别是将这种图表形式引入地图之中，那么最终呈现的地图上的气泡饼图非常炫酷。 今天刚好整理了下完整思路，顺便分享。 加载包：12345678910library(ggplot2)library(plyr)library("maptools")library(scatterpie)world_map &lt;-readShapePoly("c:/rstudy/wold_map/World_region.shp")x &lt;- world_map@data xs &lt;- data.frame(x,id=seq(0:250)-1) world_map1 &lt;- fortify(world_map) world_map_data &lt;- join(world_map1, xs, type = "full") mydata&lt;-read.xlsx("D:/R/File/WorldGDP.xlsx",sheetName="Sheet1",header=T,encoding='UTF-8',stringsAsFactors = FALSE) 这里我使用2015年全球主要发达国家（15）的GDP、三大产业产比数据来演示此案例，GDP代表气泡图大小、三大产业占比用每一个气泡图的饼图份额占比来表示。 计算全球各国行政区划中心点：12midpos &lt;- function(x) mean(range(x,na.rm=TRUE))centres &lt;- ddply(world_map_data,.(COUNTRY),colwise(midpos,.(long,lat))) 匹配目标国家行政区划中心点：1mapdata&lt;-merge(centres,mydata,by.x="COUNTRY",by.y="FULLName",all.y=TRUE) 利用ggplot2函数结合scatterpie图层对象进行空间数据映射。 修正局部经纬度坐标：因为GDP数据量级太大，我将其折算成5~10之间的标准数，用于映射气泡半径。 123456789101112131415mapdata$order&lt;-as.factor(mapdata$order)mapdata$point&lt;-5*mapdata$GDP/max(mapdata$GDP)+5value&lt;-names(mapdata)[8:10]mapdata[1,c("long","lat")]&lt;-c(-77.013222,38.913611) #华盛顿mapdata[2,c("long","lat")]&lt;-c(2.329671,48.871029) #巴黎mapdata[3,c("long","lat")]&lt;-c(-0.124969,51.516434) #伦敦mapdata[4,c("long","lat")]&lt;-c(12.496336,41.91076) #罗马mapdata[5,c("long","lat")]&lt;-c(4.882042,52.372936) #阿姆斯特丹mapdata[6,c("long","lat")]&lt;-c(-3.704783,40.421502) #马德里mapdata[7,c("long","lat")]&lt;-c(139.650947,35.833005) #东京mapdata[8,c("long","lat")]&lt;-c(13.407002,52.527935) #柏林mapdata[9,c("long","lat")]&lt;-c(8.45468,47.440827) #苏黎世mapdata[11,c("long","lat")]&lt;-c(149.116199,-35.315167) #墨尔本mapdata[12,c("long","lat")]&lt;-c(-43.264882,-22.895071) #里约热内卢mapdata[15,c("long","lat")]&lt;-c(-99.129758,19.449516) #墨西哥城 因为有些国家的领土中含有远离本图的海洋小岛（可能是殖民时代的产物），导致所取的领土中心位置已经严重偏离本土，所以我更改了几个国家首府的经纬度。 1234567ggplot(world_map_data,aes(x=long, y=lat,group=group)) + geom_polygon(fill="white", color="grey")+ geom_scatterpie(data=mapdata,aes(x=long, y=lat,group=order,r=point),cols=value,color=NA, alpha=.8) + coord_equal()+ geom_scatterpie_legend(mapdata$point, x=-160, y=-55)+ scale_fill_wsj()+ theme_nothing(legend=TRUE) 除此之外，你可以可以使用maps包内置的世界地图，这样省去了自己自己加载并整理地图素材数据的麻烦： 12345678world &lt;- map_data('world') ggplot(world, aes(long, lat,group=group)) + geom_polygon(fill="white", color="grey")+ geom_scatterpie(data=mapdata,aes(x=long, y=lat,group=order,r=point),cols=value,color=NA, alpha=.8) + coord_equal()+ geom_scatterpie_legend(mapdata$point, x=-160, y=-55)+ scale_fill_wsj()+ theme_nothing(legend=TRUE) 使用maps包的地图好处是，地图数据是打包封装过的，处理效率比较高，自定义导入的shp格式地图数据需要手动进行各种操作，处理速度非常慢，建议大家尝试。 两幅图带图没有太大差别，导入的shp全球地图是不带南极洲的，但是maps中的世界地图是带有的。 该包的开发者是香港大学的Gangchuang Yu ，12月刚上线不久，下面网址是作者关于该包使用的一个小case，感兴趣可以参考。Gangchuang Yu 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>地理信息可视化</tag>
        <tag>ggplot2</tag>
        <tag>mini饼图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——用数据来聊聊国产电影~]]></title>
    <url>%2F2017%2F06%2F01%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E7%94%A8%E6%95%B0%E6%8D%AE%E6%9D%A5%E8%81%8A%E8%81%8A%E5%9B%BD%E4%BA%A7%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[最近国产电影评分风波引起了很多人的关注，豆瓣和猫眼因国产电影评分过低此被电影局约谈了，猫眼电影还因此下线了自己的电影评分系统，作为好奇宝宝，小魔方也来凑一波热闹。 当然今天不是要谈政治啦，刚好最近在学爬虫，那就爬一点儿官产电影的数据，用数据告诉大家，国产电影的真实处境。。（受限于技术手段和代码水平，数据不全，分析过程不敢保证精准，仅作为个人练习使用，请谨慎使用）。 以下是本文所使用的一些依赖包：1234567library(rvest)library(data.table)library(stringr)library("dplyr")library("plyr")library("ggplot2")library(ggthemes) 爬虫过程：1234567891011121314url&lt;-'https://movie.douban.com/tag/中国大陆?start='final &lt;- data.frame()for (m in 1:99)&#123;fun&lt;-function(m)&#123;url&lt;-paste(url,(m-1)*20,"&amp;type=T",sep='')web&lt;-read_html(url,encoding="UTF-8")Name&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)&gt;div.pl2&gt;a")%&gt;% html_text()%&gt;%str_trim()Abstract&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)&gt;div.pl2&gt;p.pl")%&gt;% html_text()%&gt;%str_trim()Point&lt;-web %&gt;% html_nodes("div.star.clearfix&gt;span.rating_nums")%&gt;%html_text()%&gt;%as.numeric()Value&lt;-web %&gt;% html_nodes("div.star.clearfix&gt;span.pl")%&gt;%html_text()%&gt;%as.character()final&lt;-data.frame(Name=Name[1:20],Abstract=Abstract[1:20],Point=Point[1:20],Value=Value[1:20])&#125;final&lt;-rbind(final,fun(m))&#125; 1234final$Name&lt;-sub("\n","",final$Name)final$Name&lt;-sub("/","",final$Name)final$Name&lt;-sub(" ","",final$Name)final&lt;-final[1:1961,] 一共爬取了1961条有效电影记录（不知道这个数量是否能够涵盖16年所有公开上映的国产电影数量，其中可能混杂一些影视剧和娱乐节目）。 数据清洗：以下通过则这匹配提取了各部电影的上映具体日期：12m&lt;-regexpr("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;",final$Abstract,perl=TRUE)final$Date&lt;-substring(final$Abstract,m,m+attr(m,"match.length")-1) 提取出评价人数数据12m1&lt;-regexpr("\\d+",final$Value,perl=TRUE)final$Value&lt;-substring(final$Value,m1,m1+attr(m1,"match.length")-1) 清除掉电影剧情及演员介绍信息中的无关信息：12345final$Abstract&lt;-gsub("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;","",final$Abstract)final$Abstract&lt;-gsub("(\\(中国大陆\\)|\\(美国\\)|\\(台湾\\)|\\(香港\\)|\\(荷兰\\))","",final$Abstract)final$Abstract&lt;-gsub("((\\d&#123;4&#125;-\\d&#123;2&#125;)|(\\d+分钟)|\\(.*?电影节\\)|\\(公映版\\)|汉语普通话)","",final$Abstract)final$Abstract&lt;-gsub("\\/","",final$Abstract)final$Abstract&lt;-gsub("(中国大陆|香港|法国|美国)","",final$Abstract) 预览数据集：1DT::datatable(final) 以下过程将电影的详情介绍信息（包含类型、剧情及演员相关信息）做了分词处理，以便后续进行词云可视化： 12345678910newdata&lt;-paste(final$Abstract,collapse=" ")temp1 &lt;- str_split(newdata,' ')temp1&lt;-temp1[[1]]temp1&lt;-gsub("\\.&#123;3&#125;","",temp1)temp1&lt;-gsub("[a-zA-Z]&#123;2,&#125;","",temp1)temp1&lt;-grep("\\S",temp1,value=T)count1&lt;-count(temp1)count1$x&lt;-as.character(count1$x)mydata&lt;-filter(count1,nchar(x)&gt;=2,freq&gt;=37,x!="()") 数据可视化过程：加载词云包，可视化电影类型及高频出境电影明星的词频可视化： 12library(wordcloud2)wordcloud2(mydata, size = 2, fontFamily = "微软雅黑",minRotation = -pi/6, maxRotation = -pi/6,rotateRatio = 1) 所有电影类型中，排在前五位的是：剧情片、爱情片、喜剧片、动作片、纪录片。纪录片的上映率这么高吗，感觉有点难以置信。 1234567891011#提取并清洗电影演员及明星的出镜率词频数据：temp2&lt;-gsub("[\\((][\\s\\S]*[\\))]","",temp1)temp2&lt;-gsub("\\d+","",temp1)temp2&lt;-grep("\\S",temp2,value=T)count2&lt;-count(temp2)count2&lt;-count2[-c(1:107),]count2$l&lt;-count2$x %in% mydata$x mydata2&lt;-filter(count2,l==FALSE)mydata2&lt;-mydata2[-c(5,8,9,10),]mydata2&lt;-mydata2[,1:2] 电影参演明星及演员可视化词云wordcloud2(mydata2, size =.3,fontFamily = “微软雅黑”,color = “random-light”, backgroundColor = “grey”,shape = ‘star’) 排在前十位的电影明星分别是：范爷、黄晓明、周迅、黄渤、刘桦、邓超、佟大为、李晨、曾志伟、杨幂。 前三十的电影明星如下: 12mydata2&lt;-filter(mydata2,x!="音乐",x!="日本",x!="日语")mydata3&lt;-mydata2[order(-mydata2$freq),][1:30,] 1234567891011121314151617181920212223windowsFonts(myFont = windowsFont("微软雅黑")) ggplot(mydata3,aes(reorder(x,freq),freq))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+theme_wsj()+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(freq+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影最频繁出境明星")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 以上是通过对各部电影的详情描述进行分词所获得的电影类型及明星出镜率分析，接下来我们回到最初的数据集，对各部电影的评分评价分数以及上映年份进行更为详细的可视化分析。（为啥冯导可以与范爷并驾齐驱，可能是因为导演的电影比较多，这里爬的时候没有区分出来） 国产电影上映年份、季度、月份、周度 123456library(lubridate)final$Date&lt;-as.Date(final$Date) final$Year&lt;-year(final$Date)final$Month&lt;-month(final$Date)final$Week&lt;-week(final$Date)final$Quarter&lt;-quarter(final$Date) 以上通过超级好用的时间处理函数lubridate，整理出了所有影片上映的日期的年份、月份、季度、周等时间信息，接下来我们用这四个时间维度分别对电影的评分数据、评论数据进行精细化分析。 123456789101112131415161718datayear&lt;-data.frame(with(final,table(Year)),stringsAsFactors =FALSE)datayear$Year&lt;-as.numeric(as.character(datayear$Year))ggplot(datayear,aes(Year,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+xlim(2000,2017)+ggtitle("国产电影上映年份频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 因为抓取的电影上映年份以16年居多，所以16年是个高峰不足为奇，17年刚过去一周多，数量自然少一些。 1234567891011121314151617dataquarter&lt;-data.frame(with(final,table(Quarter)),stringsAsFactors =FALSE)dataquarter$Quarter&lt;-as.numeric(as.character(dataquarter$Quarter))ggplot(dataquarter,aes(Quarter,Freq))+geom_bar(stat="identity",fill="steelblue")+ggtitle("国产电影上映季度频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 从季度上来看，3、4季度上映上映最为频繁，可能是暑期档接着和贺岁档，时间段比较特殊。 123456789101112131415161718datamonth&lt;-data.frame(with(final,table(Month)),stringsAsFactors =FALSE)datamonth$Month&lt;-as.numeric(as.character(datamonth$Month))ggplot(datamonth,aes(Month,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+scale_x_continuous(breaks=seq(0,12,1))+ggtitle("国产电影上映月份频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 从月度数据上来看，也验证了季度数据的趋势，其中第三季度的高峰在9月（算是暑期的尾巴吧），第四季度高峰在12月（年末岁尾的最电影最火了）。 12345678910111213141516171819dataweek&lt;-data.frame(with(final,table(Week)),stringsAsFactors =FALSE)dataweek$Week&lt;-as.numeric(as.character(dataweek$Week))ggplot(na.omit(dataweek),aes(Week,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+scale_x_continuous(breaks=seq(0,52,1))+ggtitle("国产电影上映周分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 周度数据也非常有趣，第7周、29周、36、37周、45周和51周出现了几个特高点，基本都超过40部/月的量级，也是与月度上映数据吻合。 接下来分析一下评分最高和最低的十部国产影片： 123456789101112131415161718192021datapointtop&lt;-final[order(-final$Point),][1:15,]ggplot(datapointtop,aes(reorder(Name,Point),Point))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Point+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影评分最高TOP15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 这次真的有点惊讶了，数据显示（仅限所抓取的数据，未覆盖全，并不代表真实情况），评分最高的一部国产剧是老农民，评分高达9.7，从名字上来看挺挺朴实的一部剧，不过我好想没有看过，有空要补脑一下。 评分最高的电影有一个趋势，选材和主题都偏现实和文化类，我觉得这是一个好的现象，能体现电影写实性和文化传承的效果，虽然这样的剧本和影片，可能很多小伙伴不愿意付费去看。 123456789101112131415161718192021datapointbot&lt;-final[order(final$Point),][1:15,]ggplot(datapointbot,aes(reorder(Name,Point),Point))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Point+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影评分最低BOT")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 评分最低的一部是心理罪，仅为2.1，而且评分最低的几部好像也不是大家耳熟能详的名字，好吧突然看到了16年的央视春晚，我能说我已经不看春晚好多年了吗！（实在不好意思，本来是想抓电影的，不知道为啥央视春晚要出来捣乱，肯定是走错片场了~） 以各部电影评价人数多少作为该作品关注度指标，我们可以统计最受关注的电影和最不受关注的电影榜单。 1234567891011121314151617181920212223final$Value&lt;-as.numeric(final$Value)dataValuetop15&lt;-final[order(-final$Value),][1:15,]ggplot(dataValuetop15,aes(reorder(Name,Value),Value))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Value+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影关注度最高TOP15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 关注度最高的一步电影是《让子弹飞》，好吧竟然是好你年前的一步老电影，获评570641。前十名中我看到了《少年派的奇幻漂流》、《大话西游之大圣娶亲》、《人在囧途之泰囧》、《老炮》、《美人鱼》等。虽然热度很高，都是评分并非遥遥领先，基本都在7~8分之间。 12345678910111213141516171819202122dataValuebot15&lt;-final[order(final$Value),][1:15,]ggplot(dataValuebot15,aes(reorder(Name,Value),Value))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Value+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影关注度最低BOT15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 最后是几部评论最少的电影，好吧几乎都没咋听过这几部影片的名字，但是好奇怪，虽然关注度不高，但是评分都还是马马虎虎的。是不是可以说国产电影的评分和关注度并非严格相关吧。 声明：限于技术手段和个人水平，以上所抓取数据，进涵盖豆瓣电影库中的一部分，而且其中还混杂诸多娱乐节目、连续剧以及纪录片等，所统计分析结果并不准确，仅作为爬虫和数据可视化练习使用，请勿做为商业决策依据！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>国产电影</tag>
        <tag>rvest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言爬虫可视化——用数据来聊聊2017年首周各大城市空气质量]]></title>
    <url>%2F2017%2F05%2F31%2FR%E8%AF%AD%E8%A8%80%E7%88%AC%E8%99%AB%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E7%94%A8%E6%95%B0%E6%8D%AE%E6%9D%A5%E8%81%8A%E8%81%8A2017%E5%B9%B4%E9%A6%96%E5%91%A8%E5%90%84%E5%A4%A7%E5%9F%8E%E5%B8%82%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[最近学了些revst包的基础知识，勉强能爬到一些有用的数据，刚好趁着周末，捂着脸跟大家分享。 这一篇使用revst包爬取了中国环保部环境监测中心公布367个主要城市的日度AQI指数信息（2017年1~7日），由于个别城市数据有缺失，可视化过程可能会遗漏部分城市信息。 以下是本篇需要加载的环境包：12345678910library(rvest)library(stringr)library(dplyr)library(ggplot2)library(plyr)library(maptools)library(ggmap)library(Hmisc)library(leafletCN)library(ggthemes) 数据爬取过程：使用revst包爬取了2017年1日至7日的367各主要城市AQI指数数据： 123456789101112131415161718url&lt;-"http://datacenter.mep.gov.cn/report/air_daily/air_dairy.jsp?city=&amp;startdate=2017-01-01&amp;enddate=2017-01-07&amp;page="final &lt;- data.frame()for (m in 1:86)&#123;fun&lt;-function(m)&#123;url&lt;-paste(url,m,sep='')web&lt;-read_html(url,encoding="UTF-8")Num&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(1)") %&gt;% html_text()City&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)") %&gt;% html_text()Date&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(3)") %&gt;% html_text()AQI&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(4)") %&gt;% html_text()Level&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(5)") %&gt;% html_text()Mainpo&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(6)") %&gt;% html_text()final&lt;-data.frame(Num=Num[6:35],City=City[6:35],Date=Date[4:33],AQI=AQI[4:33],Level=Level[3:32],Mainpo=Mainpo[2:31],stringsAsFactors =FALSE)&#125;final&lt;-rbind(final,fun(m))&#125; 数据预处理：12345678910final&lt;-final[1:2569,]final$AQI&lt;-as.numeric(final$AQI)final$Level&lt;-factor(final$Level,levels=c("重度污染","严重污染","轻度污染","中度污染","良","优"),order=TRUE)address&lt;-unique(final$City)add&lt;-get_geo_position(address)final1&lt;-merge(final,add, by.x = "City", by.y = "city",all.x=TRUE)final1$day&lt;-substr(final1$Date,10,10)names(final1)final1&lt;-final1[,c("City","Num","Date","day","AQI","Level","Mainpo","lon","lat")]newdata1&lt;-final1[,c("City","lon","lat","day","AQI","Level","Mainpo")] 地图素材导入：1234567891011121314china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")x &lt;- china_map@data xs &lt;- data.frame(id=row.names(x),x) china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1, xs, type = "full") mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata, type="full")首先查看下所选取的367个主要城市在全国的分布情况：ggplot()+ geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+ geom_point(data=newdata1,aes(x=lon,y=lat),colour="red")+ coord_map("polyconic") + theme_nothing() 用气泡图展示主要城市AQI指数相对高低（气泡图大小及颜色深浅均表示AQI指数强弱） （以下数据基于2017年1日~7日367个城市的平均AQI指数数据） 1234567891011121314newdata2&lt;-newdata1[,c("City","day","AQI")];newdata2$day&lt;-as.factor(newdata2$day)newdata2&lt;-tapply(newdata2$AQI,list(newdata2$City),mean,na.rm=TRUE)newdata2&lt;-as.data.frame(newdata2)newdata2$Address&lt;-rownames(newdata2)names(newdata2)&lt;-c("AQIM","Address");newdata2&lt;-newdata2[,c("Address","AQIM")]newdata2&lt;-na.omit(newdata2)mynewdata&lt;-merge(newdata2,add, by.x = "Address", by.y = "city",all.x=TRUE)ggplot()+ geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+ geom_point(data=mynewdata,aes(x=lon,y=lat,size=AQIM,fill=AQIM),shape=21,colour="black")+ scale_size_area(max_size=5)+ scale_fill_gradient(low="white",high="#D73434")+ coord_map("polyconic") + theme_nothing() ###使用中心辐射热度图及散点图叠加 在宏观上洞察全国各省各地区的空气质量级别及集中分布趋势： 1234567ggplot()+geom_polygon(data=china_map,aes(x=long,y=lat,group=group),fill="#005A32",col="white")+geom_polygon(data=mynewdata,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .5, color = NA)+coord_map("polyconic") +geom_point(data=mynewdata,aes(x=lon,y=lat),col="red",size=1)+scale_fill_gradient2( low = "white",mid="yellow", high = "red")+theme_nothing() 使用热力地图查看整体城市空气质量的地域分布特征：1geojsonMap(mynewdata,"city",popup = paste0(mynewdata$Address,":",dat$AQIM),palette = "Reds", legendTitle = "AQI Index") AQI指数最高的10个城市：12345678910111213141516171819202122mynewdata3&lt;-newdata2[order(-newdata2$AQIM),][1:10,]ggplot(mynewdata3,aes(reorder(Address,AQIM),AQIM))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+theme_wsj()+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(AQIM+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=5)+guides(fill=guide_legend(title=NULL))+ggtitle("十大污染最严重城市")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), ) 因为所收集的数据中，行政区划名称与现有地图素材有出入，鉴于城市较多，匹配比较麻烦，暂时没有制作基于空气质量水平的离散填充地图，但是方法之前已经多有介绍，感兴趣的小伙伴儿可以借此自己练习。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>空气质量可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——中心放射状路径图]]></title>
    <url>%2F2017%2F05%2F31%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E6%94%BE%E5%B0%84%E7%8A%B6%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[最近一直在研究ggplot剩余还没有涉略过的图表类型，试图挖掘出一些新的图表形式，就像是该包的作者所暗示的那样，ggplot2只是给你搭建了一个图层语法环境，至于具体能创造出何种图形，全凭自己的想象力。 慢慢的我发现还有一类geom_segment对象自己一直没有尝试过，于是满心欢喜的尝试了一下，果然还是有收获的，我发现通过这个segment图层，可以批量的创建放射状线条图，也就是路径图，这解决了我一直以来的难题，今天顺便分享给大家。 加载包：1234library(ggplot2)library(ggmap)library(plyr)library(maptools) 加载中国省份行政地图：123china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")x &lt;- china_map@data xs &lt;- data.frame(id=row.names(x),x) 转换为数据框并合并城市数据：12345china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1, xs, type = "full") mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata, type="full")province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") 拆分兰州数据：1234newdata&lt;-subset(province_city,city=="兰州")newdata1&lt;-subset(province_city,city!="兰州")sourcex&lt;-rep(newdata$jd,33)sourcey&lt;-rep(newdata$wd,33) 制作以兰州为中心的点对点作图数据：（可以类比之前REmap路径图数据源） 1234567tagetx&lt;-newdata1$jdtagety&lt;-newdata1$wddataA&lt;-data.frame(sourcex,sourcey,tagetx,tagety)dataB&lt;-newdata1[,1:2]dataC&lt;-cbind(dataB,dataA)dataC$point&lt;-round(runif(33,10,50)) 图形可视化过程利用geom_segment（）图层制作放射路径图： 123456ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+coord_map("polyconic") + geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 这里再稍微的扩展一下，其实以上你看到的放射状线条是兰州与其他城市之间的直线，之所以变的有弧度，只是因为加了地图投影的缘故，这里我可以取消投影参数，看下效果。 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 这里取消投影参数之后，线条变成了点间直线，但是默认的不带投影的地图看起来与我们认知中的中国地图形状有些不一样，好像被压扁了一样。 其实这里还有一个图层函数也可以做出来这种放射状线条，geom_curve（）,图层，不过它本身就是有弧度的曲线，曲率可以通过参数进行微调。 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 曲率调整：12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"),curvature = 0.8)+ #用于调整曲率，范围在-1~1之间。theme_nothing() 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"),curvature =-0.5)+theme_nothing() 当然，通过图形叠加，我们还可以重复多次这样的放射状线条图。 以下以北京为例：12345678910newdataA&lt;-subset(province_city,city=="北京")newdataB&lt;-subset(province_city,city!="北京")soux&lt;-rep(newdataA$jd,33)souy&lt;-rep(newdataA$wd,33)tagx&lt;-newdataB$jdtagy&lt;-newdataB$wddataD&lt;-data.frame(soux,souy,tagx,tagy)dataE&lt;-newdataB[,1:2]dataF&lt;-cbind(dataD,dataE)dataF$point&lt;-round(runif(33,10,50)) 两个中心的路径图（兰州、北京） 1234567ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+coord_map("polyconic") + geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+geom_segment(data=dataF,aes(x=soux,y=souy,xend=tagx,yend=tagy,colour="blue"))+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+theme_nothing() 当然，根据实际需要，你也可以将图层叠加N次，从而制作出与业务需求一致的多中心放射状路径图，这里只给出思路和大致步骤，感兴趣的小伙伴可以自己尝试。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>路径图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot绘制中心密度辐射图]]></title>
    <url>%2F2017%2F05%2F30%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E7%BB%98%E5%88%B6%E4%B8%AD%E5%BF%83%E5%AF%86%E5%BA%A6%E8%BE%90%E5%B0%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天这篇算是之前ggplot2图表系列的增补。 因为在ggplot2中一直没有看到好的关于密度辐射图（或者称它为热力辐射图，就是那种PowerMap中可以通过颜色色度探查区域指标分布密度的图表类型）的合适解决方案，最近在看github官网上ggmap的介绍帖，看到作者在ggmap函数中嵌套了geom_polygon图层并并使用fill=..level..参数和stat=”density_2d”来来制作类似的热度辐射图。 我就突发奇想，如果不是通过ggmap而是通过ggplot函数是否也可以呢，果然也是可以出效果的，先将方法介绍如下： 加载包：首先需要加载如下包：1234library(ggplot2) library(plyr) library(maptools) library(ggmap) 导入数据集：接下来导入两个数据集： 其中一个是中国省级边界轮廓图，早期关注过数据小魔方的用户大概都知道，我曾经共享过一个名为rstudy的文件包（我在刘万祥老师的公众号里发现的，现在应该也还可以获取），如果手上没有数据可以添加魔方学院的QQ群，在群共享里查找R语言资料。（共享文件比较多，可能需要找一阵子） 另一个是之前在讲解REmap热度辐射图时用过的城市价值指标数据集，推送后会共享在魔方学院的QQ群里。 导入数据集： 123china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp") #地图数据 china_map1 &lt;- fortify(china_map) #转换为数据框data&lt;- read.csv(file="D:\\R\\map\\MoveChart\\cityvaluetop10.csv",header=T) #城市指标数据 因为这里使用地图仅仅是作为底图用作定位信息，可以说是陪衬，所以无需对地图和城市指标进行合并。 图表的正式生成过程：画底图：12p&lt;-ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="#005A32",col="white");p 添加热度图层12p&lt;-p+geom_polygon(data=data,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .3, color = NA)+coord_map("polyconic");p 调整热度图层1(p&lt;-p+scale_fill_gradient2( low = "white",mid="yellow", high = "red")） 清楚冗余元素1(p&lt;-p+theme_nothing()) 可以给以上热图添加散点辅助观测1(p&lt;-p+geom_point(data=data,aes(x=lon,y=lat),col="white")) 当然，你也可以给三点指定城市的指标数据使其变成气泡图1(p&lt;-p+geom_point(data=data,aes(x=lon,y=lat,size=prob),col="white")+scale_size_area(max_size=6)) 记得清除掉第5步，即从第四步开始 至于实际的数据标签，指标名称和区域名称，酌情添加，但是针对地图类图表，数据展示到位即可，不建议添加太多标签，影响美观性。 针对本图表类型，核心参数是第二个geom_polygon()中的fill = ..level..和stat=”density_2d”统计变换，使得多边形图转换成为二维水平密度图，但是至今我还没有搞懂里面的算法是什么样的，只能大概模仿出来，至于怎么用，看大家自由发挥了，效果跟真正的热力辐射图还是有些差别，但是勉强能用。 总结下，用到的所有代码如下：12345678ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="#005A32",col="white")+geom_polygon(data=data,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .3, color = NA)+coord_map("polyconic") +geom_point(data=data,aes(x=lon,y=lat,size=prob),col="white")+scale_size_area(max_size=6)+scale_fill_gradient2( low = "white",mid="yellow", high = "red")+theme_nothing() #这一句清空主题的代码是ggmap包中的，必须加载才能用 感兴趣的小伙伴儿可以移步去github官网上搜索ggmap官方介绍，里面使用ggmap调用谷歌地图做的热度图，效果很棒。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>热力地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用ggplot2制作静态数据可视化报告!]]></title>
    <url>%2F2017%2F05%2F30%2F%E7%94%A8ggplot2%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[对于可视化呈现来说，一个图表呈现的数据信息是有限的，更多时候，我们需要呈现的是多角度多维度的数据信息。 这时候，就需要用在同一个版面上容纳多副相关的图表形成一个版面的可视化报告，今天是网易数独的一个数据报告，使用ggplot还原了（其中用到的国旗出现了点儿小bug，至今没有解决，有知情的的大神还望赐教！） 加载包：12345678library("tidyverse")library("scales")library("countrycode")library("ggimage")library("grid")library("Rmisc")library("showtext")library("Cairo") 以下是原图： 很明显这个版面是由上下两幅图表组成的，那个使用R来做也是同样的思路，制作两幅 单独的图然后将二者合并。 图形可视化过程以下是模仿过程的代码： 图一（上半部分圆环图）1234name&lt;-c("司法界","商人","外交领域","军人","记者","经济学家","医学界","学术界","工程师")label&lt;-factor(name,levels=name,order=T)percent&lt;-c(0.196,0.166,0.126,0.107,0.083,0.083,0.082,0.078,0.072)mydata&lt;-data.frame(label,percent) 12mydata$anti_percent&lt;-1-mydata$percentmydata1&lt;-gather(mydata,index,Percent,-label) 1234conservation_status &lt;-paste0(name,"\n",percent(percent))names(conservation_status)&lt;-nameglobal_labeller &lt;-labeller(.defalut=label_value,label=conservation_status)font.add("myfont","msyhl.ttc") 123456789101112131415p1&lt;-ggplot()+geom_col(data=mydata1,aes(x=1,y=Percent,fill=index),width=.2)+scale_fill_manual(values=c("percent"="#00A0E9","anti_percent"="#EAEBEB"),guide=FALSE)+xlim(0.6,1.1)+coord_polar(theta="y")+facet_grid(.~label,labeller=global_labeller)+theme_minimal()+theme( line=element_blank(), axis.text=element_blank(), title=element_blank(), panel.spacing=unit(0,"cm"), strip.text=element_text(family="myfont",size=25,lineheight=1.2), plot.margin=unit(c(.5,3,0,2),'lines') );p1 1234567setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")CairoPNG(file="infography1.png",width=1600,height=480)showtext.begin()grid.newpage()p1showtext.end()dev.off() 图二：（堆积条形图）1234567name2&lt;-c("学术界","商人","公务员","外交领域","经济学家","工程师","司法界","医学界","军人","教育工作者","其他")巴西&lt;-c(1,1.7,0,0.5,1.4,0.3,2.2,2.25,0.3,1.4)中国&lt;-c(0.15,0,3.2,0.5,0.35,6.3,0.75,0.2,1.1,1.1)埃及&lt;-c(3.15,0.5,0.3,1.7,1.9,1.9,3.5,0.4,0.9,0)印度&lt;-c(0.6,2.1,0.35,0.4,1.9,1,4.2,0.5,0,0)韩国&lt;-c(2,1.6,2.1,1.7,1.75,0,1.2,0,3.2,0)美国&lt;-c(0,2.6,0.2,0.1,0,0,8.6,0.4,1,1.1) 1234567891011121314151617colorpalette&lt;-c("#5B8DA2","#155E7B","#E49D85","#1C98CB","#6CC5E8","#22918B","#6DB3A8","#211E1F","#E35840","#76261C","#798A94")mydata2&lt;-data.frame(巴西,中国,埃及,印度,韩国,美国)mydata2&lt;-data.frame(t(mydata2))mydata2[,11]&lt;-16-apply(mydata2,1,sum)names(mydata2)&lt;-name2mydata2&lt;-mydata2/16mydata2$country&lt;-rownames(mydata2)coname&lt;-c("Brazil","China","Egypt","India","Korea","United States of America")code=countrycode(coname, "country.name", "iso2c")mydata2$code&lt;-coderownames(mydata2)&lt;-NULLmydata2&lt;-cbind(mydata2[,12:13],mydata2[,1:11])mydata3&lt;-gather(mydata2,cato,percent,-1:-2)mydata3$cato&lt;-factor(mydata3$cato,levels=rev(name2),order=T) 123456789101112131415161718192021p2&lt;-ggplot(data=mydata3,aes(x=country,y=percent,fill=cato))+geom_bar(stat="identity",width=0.8)+expand_limits(y =-.1) +scale_x_discrete(limits=rev(c("巴西","中国","埃及","印度","韩国","美国")))+scale_fill_manual(values=rev(colorpalette),breaks=rev(levels(mydata3$cato)))+geom_flag(y=-.08,aes(image=code),size=.1) + guides(fill=guide_legend(keywidth=3.5,keyheight=.2,nrow=1,title.hjust=.5,title.vjust=.5,title=NULL))+geom_text(aes(label=ifelse(mydata3$percent!=0,percent(mydata3$percent),"")),position=position_stack(vjust=0.5),family="myfont",size=6.5,col="white")+coord_flip()+theme_transparent()+theme(text=element_text(family="myfont",size=25,lineheight=1.2),legend.direction="horizontal",legend.key.size=unit(.5,'cm'),legend.position="top",line=element_blank(),panel.spacing=unit(1,"cm"),title=element_blank(),axis.text.x=element_blank(),plot.margin=unit(c(0,0,0,2),'lines'));p2 图层合并：1234567setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")CairoPNG(file="infography2.png",width=1600,height=720)showtext.begin()grid.newpage()p2showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
        <tag>版面设计</tag>
        <tag>图层控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百分比方块比较图]]></title>
    <url>%2F2017%2F05%2F29%2F%E7%99%BE%E5%88%86%E6%AF%94%E6%96%B9%E5%9D%97%E6%AF%94%E8%BE%83%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该图案例来自经济学人，国内看到刘老师在博客上用Excel仿制过，这里仍然使用ggplot2进行仿制。 加载包：12library(ggplot2)library(ggmap) 构造数据源：12345678910111213141516171819mydata&lt;-data.frame(X=c(3,7,11,15,19),A=c(2471,1893,1248,1078,556),B=c(1385,951,869,784,366),C=c(56,7,19,13,40))mydata$Axmin&lt;-mydata$X-sqrt(mydata$A)/30mydata$Axmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Aymin&lt;-0mydata$Aymax&lt;-sqrt(mydata$A)/15mydata$Bxmin&lt;-mydata$X+sqrt(mydata$A)/30-sqrt(mydata$B)/15mydata$Bxmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Bymin&lt;-0mydata$Bymax&lt;-sqrt(mydata$B)/15mydata$Cxmin&lt;-mydata$X+sqrt(mydata$A)/30-sqrt(mydata$C)/10mydata$Cxmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Cymin&lt;-0mydata$Cymax&lt;-sqrt(mydata$C)/10mydata$text&lt;-c("University of\n Pennsylvania","University of\n Notre Dame","Princeton\n University","Stanford\n University","California Institute\n of Technology")mydata$full&lt;-c("31663","16548","27189","34348","5225") 可视化图形过程：12345678910111213141516171819windowsFonts(myFont = windowsFont("arial"))ggplot(mydata)+geom_rect(aes(xmin=Axmin,xmax=Axmax,ymin=Aymin,ymax=Aymax),fill="#59AF8A")+geom_rect(aes(xmin=Bxmin,xmax=Bxmax,ymin=Bymin,ymax=Bymax),fill="#0074A3")+geom_rect(aes(xmin=Cxmin,xmax=Cxmax,ymin=Cymin,ymax=Cymax),fill="#C72733")+geom_linerange(aes(x=X+2,ymin=0,ymax=4.8),col="grey",linetype=2)+ylim(-.5,6)+labs(x="",y="")+geom_text(aes(x=X,y=4.5,label=text),size=4,fontface="bold",family="myFont")+geom_label(aes(x=X,y=3.7,label=full),fill="#EFE5CA",colour="black",fontface="bold",size=3.5,label.r=unit(0.15,"lines"),family="myFont")+geom_text(aes(x=Axmin,y=Aymax,label=A),hjust=-.2,vjust=1,size=3.5,col="white",family="myFont")+geom_text(aes(x=Bxmin,y=Bymax,label=B),hjust=-.2,vjust=1,size=3.5,col="white",family="myFont")+geom_text(aes(x=Cxmin,y=Cymax,label=C),hjust=-.2,vjust=1,size=3,col="white",family="myFont")+annotate("text",x=2.5,y=5.7,label="Class Struggle",col="black", size=6,family="myFont")+ annotate("text",x=8.85,y=5.2,label="A spot on a university or college's waitlist rarely translates into admission. A look at the numbers for several institutions", size=4,family="myFont")+ annotate("text",x=3.9,y=-.32,label="Source:The universities and 2011-2012 Common Data Set",col="black",size=3,family="myFont")+ annotate("text",x=19.8,y=-.32,label="The wall Street Jaunual",col="black",size=3,family="myFont")+ theme_nothing()+theme(panel.background=element_rect(fill="#F5F2E1")) 建议保存尺寸（1035*330） 更加紧促的方式：123456789101112131415161718mydata1&lt;-mydata[,5:8]names(mydata1)&lt;-c("xmin","xmax","ymin","ymax")mydata1$Group&lt;-"A"mydata2&lt;-mydata[,9:12]names(mydata2)&lt;-c("xmin","xmax","ymin","ymax")mydata2$Group&lt;-"B"mydata3&lt;-mydata[,13:16]names(mydata3)&lt;-c("xmin","xmax","ymin","ymax")mydata3$Group&lt;-"C"mynewdata&lt;-rbind(mydata1,mydata2,mydata3)mynewdata$Group&lt;-factor(mynewdata$Group,order=T)ggplot(mynewdata)+geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=Group))+scale_fill_manual(values=c("#59AF8A","#0074A3","#C72733")) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国人口金字塔动态图]]></title>
    <url>%2F2017%2F05%2F29%2F%E4%B8%AD%E5%9B%BD%E4%BA%BA%E5%8F%A3%E9%87%91%E5%AD%97%E5%A1%94%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[中国人口金字塔动态图 以下是一个之前在网络上引起巨大轰动的人口金字塔动态图： 没有找到原始数据，后来在UN的官网上找到了一个五年间隔的数据，顺便还原了下图表： 加载包：1234567library(ggplot2)library(animation)library(dplyr)library(tidyr)library(xlsx)library(ggthemes)setwd("E:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表/动态图表") 整理并导入人口结构数据：12345678female&lt;-read.xlsx("Population.xlsx",sheetName="Female",header=T,encoding='UTF-8',check.names = FALSE)male&lt;-read.xlsx("Population.xlsx",sheetName="Male",header=T,encoding='UTF-8',check.names = FALSE)female&lt;-female%&gt;%gather(Year,Poputation,-1)male&lt;-male%&gt;%gather(Year,Poputation,-1)female$Poputation&lt;-female$Poputation*-1male$sex&lt;-"male";female$sex&lt;-"female" 12345China_Population&lt;-rbind(male,female)%&gt;%mutate(abs_pop=abs(Poputation))China_Population$agegroup&lt;-factor(China_Population$agegroup,levels=c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39","40-44","45-49","50-54","55-59","60-64","65-69","70-74","75-79","80+") ,order=T)m&lt;-seq(1950,2015,by=5) 可视化动态图表：12345678910111213141516171819202122232425262728saveGIF(&#123; for (i in m) &#123; title &lt;- as.character(i) year_data &lt;- filter(China_Population,Year==i) g1&lt;-ggplot(year_data,aes(x =agegroup,y=Poputation,fill=sex,width=1)) + coord_fixed()+ coord_flip() + geom_bar(data=subset(year_data,sex=="female"),stat = "identity") + geom_bar(data=subset(year_data,sex=="male"), stat = "identity") + scale_y_continuous(breaks = seq(-70000,70000,length=9), labels = paste0(as.character(c(abs(seq(-70,70,length=9)))), "m"), limits = c(-75000, 75000)) + theme_economist(base_size = 14) + scale_fill_manual(values = c('#D40225', '#374F8F')) + labs(title=paste0("Population structure of China:", title), caption="Data Source:United Nations Department of Economic and Docial Affairs\nPopulation Division\nWorld Population Prospects,the 2015 Revision" ,y="Population",x="Age") + guides(fill=guide_legend(reverse = TRUE))+ theme( legend.position =c(0.8,0.9), legend.title = element_blank(), plot.title = element_text(size=20), plot.caption = element_text(size=12,hjust=0), ) print(g1) &#125;&#125;,movie.name='japan_pyramid.gif',interval=0.5,ani.width=700,ani.height=600) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>动态图表</tag>
        <tag>gif</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态世界地图]]></title>
    <url>%2F2017%2F05%2F28%2F%E5%8A%A8%E6%80%81%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[上帝视角——给世界一个特写~ 最近在研究使用R包制作动画图表，也就是类似GIF动图，感觉很有趣，也是动态图表呈现的一个非常独特的领域，刚刚研究出了些成果，今天这篇分享使用GIF动画+球型投影来制作呈现地球转动效果的动态GIF图表。 过程要使用谢益辉大神的动画包——animation，该包依赖可执行程序——ImageMagic，所以导入animation包之前要提前下载并安装该动画软件。 加载包：12345678910library(ggplot2)library(maps) library(plyr) library(grid)library(showtext)library(Cairo)library(xlsx)library(RColorBrewer)library(dplyr)library("animation") 可视化过程： 本次使用maps中的世界地图素材： 1world_map &lt;- map_data("world") 预览地图素材效果： 为了区分大洲，我将该地图中的国家按照地理位置进行了归类（七大洲） 1234567data&lt;-read.csv("D:/R/mapdata/Word_State.csv",stringsAsFactors = FALSE,check.names = FALSE) ggplot(data,aes(map_id=region))+geom_map(aes(fill=Address),map=world_map,col="white")+expand_limits(x=world_map$long,y=world_map$lat)+scale_y_continuous(breaks=(-2:2)*30) +scale_x_continuous(breaks=(-4:4)*45)+coord_map("ortho", orientation = c(30,110,0)) 呈现特定视角地球：筛选其中某一个州进行特定角度呈现： 123456789101112131415161718data1&lt;-data[data$Address=="North America",]ggplot()+geom_map(data=data,aes(map_id=region),map=world_map,col="white",fill="#A3A3A3")+geom_map(data=data1,aes(map_id=region,fill=Address),map=world_map,col=NA)+expand_limits(x=world_map$long,y=world_map$lat)+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+coord_map("ortho", orientation = c(0,-95,0))+guides(fill=FALSE) +theme( axis.ticks=element_blank(), axis.text=element_blank(), axis.title=element_blank(), panel.background=element_rect(fill="white",colour=NA), panel.grid.major = element_line(colour = "grey60",size=.25), panel.grid.minor = element_line(colour = "grey60",size=.25) ) 12345678world_map_data&lt;-merge(world_map,data,all.x=TRUE)midpos&lt;-function(x) mean(range(x,na.rm=TRUE))centres&lt;-ddply(world_map_data,.(Address),colwise(midpos,.(long,lat)))centres&lt;-centres[centres$Address!="Antarctica",]centres$angle&lt;-0centres$long[centres$Address=="Asia"]=100centres$long[centres$Address=="North America"]=-100centres$long[centres$Address=="Oceania"]=130 计算每个大洲的地区中心（个别中心偏离中心大陆太远，需要手动调整） 使用grid的版面控制系统进行多图排版：123456789101112131415161718192021222324252627282930313233setwd("E:/数据可视化/R/R语言学习笔记/可视化/Shiny/动态图表")world_map_data&lt;-arrange(world_map_data,group,order)CairoPNG(file="wordmap.png",width=1600,height=1200)showtext.begin()grid.newpage()pushViewport(viewport(layout=grid.layout(2,3)))vplayout&lt;-function(x,y)&#123;viewport(layout.pos.row =x,layout.pos.col=y)&#125;for(i in 1:nrow(centres))&#123;mydata&lt;-world_map_data[world_map_data$Address==centres$Address[i],]p&lt;-ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group),fill="grey95",colour="grey",size=.25)+geom_map(data=mydata,aes(map_id=region),map=world_map_data,colour="white",fill="#F8766D",size=.25)+coord_map("ortho",orientation=c(centres$lat[i],centres$long[i],0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+labs(title=centres$Address[i])+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),text=element_text(size=20),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),plot.title=element_text(size=20,family="myfont",hjust=.5),plot.margin = unit(c(ifelse(i&lt;=3,5,.5),1,ifelse(i&gt;=3,5,.5),1),"lines"))print(p,vp=vplayout(ifelse(i&lt;=3,1,2),ifelse(i&lt;=3,i,i-3)))&#125;grid.text(label="God's Perspective",x=.01,y=.98,gp=gpar(col="black",fontsize=35),draw=TRUE,just="left")grid.text(label="Data Source:DataMofang",x=.02,y=.02,gp=gpar(col="black",fontsize=20),draw=TRUE,just="left")showtext.end()dev.off() 使用animation包将361帧地图合并为GIF动画使用animation包将361帧地图合并为GIF动画（友情提示：机器性能太弱请不要随便玩火，容易爆内存~！！！） 1234567891011121314151617181920saveGIF(&#123;ani.options(interval=.15,convert=shQuote("D:/Program Files/ImageMagick-7.0.5-Q16/convert.exe"))for(i in 0:360)&#123;p&lt;-ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group,fill=Address),colour="grey",size=.25)+coord_map("ortho",orientation=c(0,i,0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+scale_fill_brewer(name="million($)",palette="Set2")+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank())print(p)&#125;&#125;,movie.name='Movingworld_map.gif',ani.width=1200,ani.height=1000) 因为原图有13M，微信公众平台限制图片大小为5m，所以大图能就没法奉上了，不过又做了一个压缩版的小图，效果如下： 12345678910111213141516171819202122draw = function(i)&#123; ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group,fill=Address),colour="grey",size=.25)+coord_map("ortho",orientation=c(0,i,0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+scale_fill_brewer(name="million($)",palette="Set2")+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank()) &#125; oopts=ani.options(ffmpeg = "D:/Program Files/ImageMagick-7.0.5-Q16/ffmpeg.exe") saveVideo(&#123; for(i in 1:36) print(draw(i)) ani.options(interval = 0.6,nmax=230)&#125;, video.name ="world_map_move.gif",other.opts="-b 4000k") 该案例涉及到的技术面比较广，需要使用循环、grid图形版面控制、地图投影、自编函数、颜色填充等，仅作为探索可视化道路上的一个小台阶，也许现在看起来有些高不可攀，但是当你真正深入的了解R语法以及函数编程和ggplot2之后，就没那么难理解了！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>gif</tag>
        <tag>动态地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[炫彩仪表盘图表]]></title>
    <url>%2F2017%2F05%2F28%2F%E7%82%AB%E5%BD%A9%E4%BB%AA%E8%A1%A8%E7%9B%98%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[该图表示利用ggplot2来模拟制作实际商务分析场景中应用的单值仪表盘。 这种单值仪表盘最初发源于汽车驾驶舱的控制系统，也广泛用于飞行器、机械驾驶舱内的导航控制系统，但用在商务分析与决策系统却是别有一番风味。 加载包：12345library(ggplot2)library("showtext")library(Cairo)library("Rmisc")library(grid) 生成辅助数据：1234font.add("myfont","msyh.ttc")bardata&lt;-seq(from=0,to=270,length=1000)rectdata&lt;-seq(from=0,to=270,by=27)%&gt;%c(360)setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170415") 12target&lt;-1/3assist&lt;-target*270 生成单个仪表盘：123456789101112131415161718192021CairoPNG(file="dashboard.png",width=800,height=540)showtext.begin()ggplot(data=NULL)+geom_rect(aes(xmin=rectdata[-12],xmax=rectdata[-1],ymin=5,ymax=10),fill="#F2F2F2",col="white")+geom_bar(aes(x=bardata,y=5,col=bardata),stat="identity",fill=NA,size=2)+geom_text(aes(x=rectdata[-12],y=-5,label=seq(0,100,by=10)),vjust=.5,hjust=.5,size=5,family="myfont",col="#0F1110")+geom_segment(aes(x=assist,y=-50,xend=assist,yend=-10),arrow =arrow(length=unit(0.4,"cm")),size=1.2,col="red")+geom_point(aes(x=assist,y=-50),shape=21,fill="white",col="black",size=7)+annotate("text",x=315,y=-30,label=percent(target),size=12,hjust=.5,vjust=.5,family="myfont",col=ifelse(target&lt;.5,"#F32626","#38E968"),fontface="plain")+ annotate("text",x=315,y=-15,label="指标1",size=15,hjust=.5,vjust=.5,family="myfont")+ ylim(-50,12)+coord_polar(theta="x",start=179.85)+scale_colour_gradient(low="#F32626",high="#38E968",guide=FALSE)+theme_minimal()+theme(text=element_blank(),line=element_blank(),rect=element_blank())showtext.end()dev.off() 123set.seed(123)target&lt;-runif(5,0,1)assist&lt;-270*target 生成仪表盘组合：123456789101112131415161718192021222324252627CairoPNG(file="bigdashboard.png",width=1500,height=675)showtext.begin()grid.newpage()pushViewport(viewport(layout=grid.layout(1,5)))vplayout&lt;-function(x,y)&#123;viewport(layout.pos.row =x,layout.pos.col=y)&#125;for(i in 1:5)&#123;p&lt;-ggplot(data=NULL)+geom_rect(aes(xmin=rectdata[-12],xmax=rectdata[-1],ymin=5,ymax=12),fill="#F2F2F2",col="white")+geom_bar(aes(x=bardata,y=5,col=bardata),stat="identity",fill=NA,size=2)+geom_text(aes(x=rectdata[-12],y=-5,label=seq(0,100,by=10)),vjust=.5,hjust=.5,size=3.5,family="myfont",col="#0F1110")+geom_segment(aes(x=assist[i],y=-50,xend=assist[i],yend=-10),arrow =arrow(length=unit(0.4,"cm")),size=1.2,col="red")+geom_point(aes(x=assist[i],y=-50),shape=21,fill="white",col="black",size=7)+annotate("text",x=315,y=-30,label=percent(target[i]),size=7.5,hjust=.5,vjust=.5,family="myfont",col=ifelse(target[i]&lt;.5,"#F32626","#38E968"),fontface="plain")+ annotate("text",x=315,y=-15,label=paste0("指标",i),size=8.5,hjust=.5,vjust=.5,family="myfont")+ ylim(-50,12)+coord_polar(theta="x",start=179.85)+scale_colour_gradient(low="#F32626",high="#38E968",guide=FALSE)+theme_minimal()+theme(text=element_blank(),line=element_blank(),rect=element_blank())print(p,vp=vplayout(1,i))&#125;showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>仪表盘</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>仪表盘</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[鱼眼百分比信息图]]></title>
    <url>%2F2017%2F05%2F27%2F%E9%B1%BC%E7%9C%BC%E7%99%BE%E5%88%86%E6%AF%94%E4%BF%A1%E6%81%AF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该图表案例来源于某财经杂志，我是从刘万祥老师那里看来的，之后又在知乎上发现有人发帖求做法。我就抱着试一试的心态，用ggplot2尝试着做，没想到真的让我给弄出来了。 这里分享给大家我的做法和思路： 加载包：123library(tidyverse)require(grid)library("Rmisc") 生成辅助数据：12345px1&lt;-seq(from=0,to=10,length=1000)py1&lt;-sqrt(5^2-(px1-5)^2)Project1x&lt;-c(px1,rev(px1))Project1y&lt;-c(py1,-py1) 圆环数据构造过程：这里全部都是同一个套路的数据 123456789101112131415161718192021Project1&lt;-data.frame(lon=Project1x,lat=Project1y)Project1$group&lt;-"ProjectA"Project1$order&lt;-1:nrow(Project1)Project2&lt;-data.frame(lon=Project1x+15,lat=Project1y)Project2$group&lt;-"ProjectB"Project2$order&lt;-1:nrow(Project2)Project3&lt;-data.frame(lon=Project1x+30,lat=Project1y)Project3$group&lt;-"ProjectC"Project3$order&lt;-1:nrow(Project3)Project4&lt;-data.frame(lon=Project1x+45,lat=Project1y)Project4$group&lt;-"ProjectD"Project4$order&lt;-1:nrow(Project4)Project5&lt;-data.frame(lon=Project1x+60,lat=Project1y)Project5$group&lt;-"ProjectE"Project5$order&lt;-1:nrow(Project5)Project&lt;-rbind(Project1,Project2,Project3,Project4,Project5) 1ggplot(Project)+geom_path(aes(lon,lat,group=group)) 多边形数据构造过程：123456789101112131415161718192021222324Proj1&lt;-Project1[,1:2]%&gt;%filter(lat&lt;=-4)Proj1[nrow(Proj1)+1,]&lt;-c(8,-4)Proj1$group&lt;-"ProjA"Proj1$order&lt;-1:nrow(Proj1)Proj2&lt;-Project2[,1:2]%&gt;%filter(lat&lt;=-3)Proj2[nrow(Proj2)+1,]&lt;-c(24,-3)Proj2$group&lt;-"ProjB"Proj2$order&lt;-1:nrow(Proj2)Proj3&lt;-Project3[,1:2]%&gt;%filter(lat&lt;=0)Proj3[nrow(Proj3)+1,]&lt;-c(40,0)Proj3$group&lt;-"ProjC"Proj3$order&lt;-1:nrow(Proj3)Proj4&lt;-Project4[,1:2]%&gt;%filter(lat&lt;=3)Proj4$group&lt;-"ProjD"Proj4$order&lt;-1:nrow(Proj4)Proj5&lt;-Project5[,1:2]%&gt;%filter(lat&lt;=4)Proj5$group&lt;-"ProjE"Proj5$order&lt;-1:nrow(Proj5)Projdata&lt;-rbind(Proj1,Proj2,Proj3,Proj4,Proj5) 可视化图形：12windowsFonts(myFont=windowsFont("msyh.ttc"))labeldata&lt;-data.frame(x=seq(from=5,to=65,length=5),y=c(-4,-3,0,3,4),label=sprintf("%2d%%",c(10,20,50,80,90))) 12345678910111213p1&lt;-ggplot()+geom_polygon(data=Projdata,aes(x=lon,y=lat,group=group),fill="#92D24F",col=NA)+geom_path(data=Project,aes(x=lon,y=lat,group=group),col="black",size=1.2)+geom_text(data=labeldata,aes(x=x,y=y+1,label=label),hjust=.5)+scale_x_continuous(breaks=labeldata$x,labels=paste0("Project",LETTERS[1:5]))+ylim(-5.5,6)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text.y=element_blank(),plot.margin = unit(c(.2,.2,1,.2), "cm")) 12345678910111213p2&lt;-ggplot()+geom_polygon(data=Projdata,aes(x=lon,y=lat,group=group),fill="#FFC000",col=NA)+geom_path(data=Project,aes(x=lon,y=lat,group=group),col="black",size=1.2)+geom_text(data=labeldata,aes(x=x,y=y+1,label=label),hjust=.5)+scale_x_continuous(breaks=labeldata$x,labels=paste0("Project",LETTERS[1:5]))+ylim(-5.5,6)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text.y=element_blank(),plot.margin = unit(c(.2,.2,1,.2), "cm")) 12345grid.newpage()pushViewport(viewport(layout=grid.layout(2,2)))vplayout &lt;- function(x,y)&#123;viewport(layout.pos.row = x, layout.pos.col = y)&#125;print(p1,vp=vplayout(1,1:2))print(p2,vp=vplayout(2,1:2)) 1234library(gridExtra)library("plyr")library("lattice")multiplot(p1,p2,layout=matrix(c(1,1,2,2),nrow=2,byrow=TRUE)) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京历史天气emoji表情包可视化]]></title>
    <url>%2F2017%2F05%2F27%2F%E5%8C%97%E4%BA%AC%E5%8E%86%E5%8F%B2%E5%A4%A9%E6%B0%94emoji%E8%A1%A8%E6%83%85%E5%8C%85%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[最近在网络上看到一个R圈大神开发的关于emoji表情包，可以将表情装入ggplot2的aes（）函数美学映射内。 感觉这是一个很好的创意，我学着它的路子，抓取了北京历史天气数据，用该不同表情还原了一年中的不同天气。 数据获取：1234567891011library(RCurl)library(XML)library(dplyr)library(stringr)library(tidyr)library(plyr)library(rvest)library(ggimage)library(Cairo)library(showtext)library(lubridate) 1234url&lt;-"http://lishi.tianqi.com/beijing/index.html"myheader &lt;-c("User-Agent"="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36")webpage&lt;-getURL(url,httpheader=myheader)mymonthlink&lt;-getHTMLLinks(url,externalOnly=TRUE)%&gt;%grep(".*?2016\\d&#123;2&#125;.html",.,value=T) 以下是最初想用的办法解决数据清洗问题，但是结果失败了，于是又转回传统的路子。 失败的探索：1234567891011#####page1&lt;-getURL(mymonthlink[2],.encoding="gbk")#rd&lt;-iconv(page1,"gbk","utf-8")#rdhtml&lt;-htmlParse(rd,encoding="UTF-8")#cesh&lt;-readHTMLList(rdhtml,trim=TRUE,elFun=xmlValue)%&gt;%grep("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;",.,value=T)#cesh&lt;-cesh%&gt;%sub("([a-z])(\\()(\\\)","",.)#cesh&lt;-cesh1%&gt;%str_split(',')%&gt;%plyr::ldply(.fun=NULL)#cesh$V1&lt;-cesh$V1%&gt;%sub("[a-z]\\(","",.)%&gt;%as.Date()#names(cesh)&lt;-c("date","high","low","state","wind","index")#####以上代码写了一半写不下去了，我有rvest为啥要用RCurl，肯定自己脑抽筋了！ 用rvest包解决了问题：123456789101112mynewdata&lt;-c()for (i in mymonthlink)&#123;mymonthdata&lt;-read_html(i,encoding="gbk")%&gt;%html_nodes("div.tqtongji2&gt;ul")%&gt;%html_text(trim=FALSE)%&gt;%str_trim(.,side="right")%&gt;%.[-1]mynewdata&lt;-c(mynewdata,mymonthdata)&#125;mynewdata1&lt;-mynewdatamynewdata&lt;-mynewdata1%&gt;%gsub("\t\t\t|\t|\r\n","",.)%&gt;%str_split(' ')%&gt;%plyr::ldply(.fun=NULL)%&gt;%.[,-2]names(mynewdata)&lt;-c("date","high","low","state","wind","index")mynewdata$date&lt;-as.Date(mynewdata$date)mynewdata$high&lt;-as.numeric(mynewdata$high)mynewdata$low&lt;-as.numeric(mynewdata$low) 数据清洗与预处理：123456#cleanning the dirty data. unique(mynewdata$state) happy&lt;-c("晴","阵雨~晴","多云转晴","多云~晴","雷阵雨~晴","阴~晴","霾~晴","浮尘~晴") depressed&lt;-c("霾","阴","多云","晴~多云","霾~多云","晴~霾","多云~霾","阵雨转多云","多云转阴","阴~多云","多云~阴","晴~阴","阵雨~多云","小雨~多云","小雨~阴","霾~雾","小雪~阴","阴~小雪","小雨~雨夹雪") angry&lt;-c("小雨","雨夹雪","小雪","雷阵雨","阵雨","中雨","小到中雨","雷阵雨~阴","多云~雷阵雨","阴~雷阵雨","霾~雷阵雨","多云~阵雨","晴~阵雨","阴~小雨","阵雨~小雨") Terrified&lt;-c("中到大雨","暴雨","雷阵雨~中到大雨") 12345678910#create a new factor[categorical] varibale.mynewdata$mode&lt;-NULLmynewdata$mood&lt;-ifelse(mynewdata$state%in% happy,"happy",ifelse(mynewdata$state%in% depressed,"depressed",ifelse(mynewdata$state%in% angry,"angry","Terrified"))) mynewdata &lt;- within(mynewdata,&#123; mood_code &lt;- NA mood_code[mood=="happy"]&lt;-"1f604" mood_code[mood=="depressed"]&lt;-"1f633" mood_code[mood=="angry"]&lt;-"1f62d" mood_code[mood=="Terrified"]&lt;-"1f621"&#125;) 12345678#tidy the time/date varibales.mynewdata$month&lt;-as.numeric(as.POSIXlt(mynewdata$date)$mon+1)mynewdata$monthf&lt;-factor(mynewdata$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) mynewdata$weekday&lt;-as.POSIXlt(mynewdata$date)$wdaymynewdata$weekdayf&lt;-factor(mynewdata$weekday,levels=rev(0:6),labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)mynewdata$week &lt;- as.numeric(format(mynewdata$date,"%W"))mynewdata&lt;-ddply(mynewdata,.(monthf),transform,monthweek=1+week-min(week))mynewdata$day&lt;-day(mynewdata$date) 可视化图形：123setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")write.table(mynewdata,"historyweather.csv",sep=",",row.names=FALSE)mynewdata&lt;-read.csv("historyweather.csv",stringsAsFactors = FALSE,check.names = FALSE) 123456789mytheme&lt;-theme( rect=element_blank(), axis.ticks=element_blank(), text=element_text(face="plain",lineheight=0.9,hjust=0.5,vjust=0.5,size=15), title=element_text(face="plain",lineheight=0.9,hjust=0,vjust=0.5,size=30), axis.title=element_blank(), strip.text=element_text(size = rel(0.8)), plot.margin = unit(c(5,2,5,2),"lines") ) 日历emoji表情天气可视化123456789101112CairoPNG("emoji1.png",1000,870)showtext.begin()ggplot(mynewdata,aes(weekdayf,monthweek,fill=high))+geom_tile(colour='white')+scale_fill_gradient(low=NA, high=NA,guide=FALSE)+ggtitle("The emoji-weather visualization of beijing in 2016")+scale_y_reverse(breaks=seq(from=6,to=0,by=-1))+ggimage::geom_emoji(aes(image=mood_code),size=.1)+facet_wrap(~monthf ,nrow=3)+mythemeshowtext.end()dev.off() 环形日历emoji表情天气可视化123456789mytheme2&lt;-theme( rect=element_blank(), axis.ticks=element_blank(), text=element_text(face="plain",lineheight=0.9,hjust=0.5,vjust=0.5,size=15), title=element_text(face="plain",lineheight=0.9,hjust=0,vjust=0.5,size=30), axis.title=element_blank(), strip.text=element_text(size = rel(0.8)), plot.margin = unit(c(1,1,1,1),"lines") ) 1234567891011121314CairoPNG("emoji2.png",1200,1200)showtext.begin()ggplot(mynewdata,aes(x=factor(day),y=monthf,fill=high))+geom_tile(colour='white')+expand_limits(y =c(-12,12))+scale_x_discrete(position=c("bottom"))+coord_polar(theta="x")+scale_fill_gradient(low=NA, high=NA,guide=FALSE)+ggimage::geom_emoji(aes(image=mood_code),size=.015)+geom_image(aes(x=0,y=-12),image ="weather.png", size =.15)+ggtitle("The emoji-weather visualization of beijing in 2016")+mytheme2showtext.end()dev.off() and this one is a small-background in the second photo which i search on the web. 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>emoji</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿ECO事件圆环图]]></title>
    <url>%2F2017%2F05%2F26%2F%E4%BB%BFECO%E4%BA%8B%E4%BB%B6%E5%9C%86%E7%8E%AF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该案例取自刘万祥老师的博客——EexclPro。最初使用Excel完成，相当复杂，我自己是没有那个水平了，所以本例使用R语言完成。 还原度相对来说比较高，但是该图实用性确实不很高，经济学人也只是偶尔亮出来装点门面而已。 加载包：123456789library("ggplot2")library("Cairo")library("ggmap")library("xlsx")library("lubridate")library("reshape2")library("showtext")library("grid")library("plyr") 案例图:经济学人版 刘老师版 关键步骤： 12setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170403")ECOdata&lt;-read.xlsx("ECOCircle.xlsx",sheetName="Sheet1",header=T,encoding="UTF-8",stringsAsFactors=FALSE) 123456f&lt;-c(99,91,84,77)for (i in 1:nrow(ECOdata))&#123;m&lt;-sum(ECOdata[i,3:6]==1)h&lt;-grep(1,ECOdata[i,3:6])ECOdata[i,h+2]&lt;-f[1:m]&#125; 创建时间轴：12newdate&lt;-seq(from=as.Date("2014-01-01"),to=as.Date("2014-12-31"),by="1 day")newmonth&lt;-month(newdate) 12345mydata&lt;-data.frame(newdate,newmonth);mydata$ID&lt;-1:nrow(mydata)mydata$Type&lt;-ifelse(mydata$newmonth%%2==0,"A","B")mydata$Scale&lt;-100a&lt;-seq(from=90,to=-90,length=181);b&lt;-seq(from=90,to=-90,length=184)mydata$Circle&lt;-c(a,b) 合并数据：12mynewdata&lt;-merge(mydata,ECOdata,by.x="newdate",by.y="date",all.x=T)mynewdataone&lt;-melt(na.omit(mynewdata), id.vars =names(mynewdata)[1:7],variable.name = "Class", value.name = "Fact") 12circlemonth&lt;-seq(15,345,length=12)circlebj&lt;-rep(c(-circlemonth[1:3],rev(circlemonth[1:3])),2) 1234mynewdataoneA&lt;-mynewdataone[mynewdataone$Fact!=0&amp;mynewdataone$ID&lt;180,]mynewdataoneA&lt;-mynewdataoneA[!duplicated(mynewdataoneA[,1]),]mynewdataoneB&lt;-mynewdataone[mynewdataone$Fact!=0&amp;mynewdataone$ID&gt;180,]mynewdataoneB&lt;-mynewdataoneB[!duplicated(mynewdataoneB[,1]),] 可视化图形：123456789101112131415161718192021222324252627282930313233343536font.add("myfont","msyhl.ttc")CairoPNG(file="ECOCircle.png",width=1000,height=1050)showtext.begin()ggplot()+geom_bar(data=mydata[mydata$Type=="A",],aes(x=ID,y=Scale),stat="identity",width=1,fill="#ECEDD1",col="#ECEDD1")+geom_bar(data=mydata[mydata$Type=="B",],aes(x=ID,y=Scale),stat="identity",width=1,fill="#DFE0B1",col="#DFE0B1")+geom_point(data=mynewdataone[mynewdataone$Fact!=0,],aes(x=ID,y=Fact,fill=Class),size=5,shape=21,col="white")+ylim(-90,130)+scale_fill_manual(limits=c("Legislative","Referendum","President","Primary"),values=c("#93A299","#CF543F","#B5AE53","#86825B"),labels=c("立法","公投","总统","初选"))+geom_text(data=mynewdataoneA,aes(x=ID,y=max(mynewdataoneA$Fact)+20,label=State,angle=Circle),family="sans",size=5,hjust=0)+geom_text(data=mynewdataoneB,aes(x=ID,y=max(mynewdataoneB$Fact)+20,label=State,angle=Circle),family="sans",size=5,hjust=1)+geom_text(data=NULL,aes(x=circlemonth,y=30,label=paste0(1:12,"月"),angle=circlebj),family="myfont",size=7,hjust=.5,vjust=.5)+guides(colour=guide_legend(title=NULL))+coord_polar(theta="x")+labs(title="2014年全球选举事件图",subtitle="这是一幅用心良苦的好图",caption="Source：Economics\nMake:EasyCharts",x="",y="",fill="")+theme(text=element_text(family="myfont"),axis.text=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.position=c(0.03,0.92),legend.background=element_blank(),legend.key=element_blank(),legend.key.size=unit(1.55,'cm'),legend.key.height=unit(1.2,'cm'),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50),plot.subtitle=element_text(size=35),plot.caption=element_text(size=25,hjust=0),plot.margin=unit(c(.5,.5,.5,.5),"lines"),)showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国经管类核心期刊地域分布数据可视化]]></title>
    <url>%2F2017%2F05%2F26%2F%E4%B8%AD%E5%9B%BD%E7%BB%8F%E7%AE%A1%E7%B1%BB%E6%A0%B8%E5%BF%83%E6%9C%9F%E5%88%8A%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[最近在看文献，看的有些烦躁了，想找点儿数据练练手，刚好看到百度百科有这个关于经管类核心期刊的汇总表，顺手就抓过来练习练习。 本来百度百度中核心期刊栏目的列表里，关于经济学72中核心期刊的详细地址不全，我申请了编辑字条，编完一直在审核，想想算了，根据百度百科的审核流程和效率，估计不知道要申到猴年马月了，自己搜了确实的地址信息。 以下数数据的爬取、清洗和可视化过程： 数据抓取：加载包：12345678910library(rvest)library(stringr)library(dplyr)library(ggplot2)library(plyr)library(rjson)library(Cairo)library(Cairo)library(showtext)library(maptools) 表格爬取（这里用revst来爬，效率特别高） 12url&lt;-"http://baike.baidu.com/link?url=VRCRtZ-GR4Lv483tBm2d6IQ3mOjTlcc1z80EBBzFwCGAlDT16NvxH_yqshJdSD95_AEEu_Hzg4uE3ok3bDIohkkl9sTwpE9cVJcRP7RpAmVBIeEmwZ4gdXNetbA8lvmU"info&lt;-read_html(url,encoding="UTF-8")%&gt;%html_nodes("table")%&gt;%html_table(header=TRUE,fill=TRUE) 数据清洗：表格的提取过程：12economic&lt;-info[[1]][,-1];names(economic)&lt;-c("Name","Address");economic$Class&lt;-"C"mangement&lt;-info[[2]][,-1];names(mangement)&lt;-c("Name","Address");mangement$Class&lt;-"M" 打开数据编辑器，自己把缺失的地址补全1fix(economic) 剔除掉地址中的哪些邮箱类信息（可能会干扰经纬度抓取的准确性）1234myfulldata&lt;-rbind(economic,mangement)myfulldata$Address&lt;-sub("\\（\\d.+\\）","",myfulldata$Address)myfulldata$Address&lt;-sub("\\(\\d.+\\)","",myfulldata$Address)myfulldata$Address&lt;-sub("\\d.+\\信箱","",myfulldata$Address) 抓取经纬度数据使用过百度地图的API匹配经纬度（各位小伙伴儿高抬贵手，自己去申请个API把，不要老拿我的API玩耍，这个有限额，用完了就不能用了） 123456789101112131415baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"address&lt;-myfulldata$Addressfor(location in address)&#123;url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="")url_string &lt;- URLencode(url) json&lt;- readLines(url_string, warn=F) geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng) baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,longitude=baidu_lng,latitude=baidu_lat,stringsAsFactors=FALSE) 合并经纬度数据：123mynewfulldata&lt;-merge(myfulldata,result,by.x="Address",by.y="address",all.x=T)mynewfulldata&lt;-unique(mynewfulldata)mynewfulldata&lt;-mynewfulldata[,c(2,1,4,5,3)];names(mynewfulldata)[3:4]&lt;-c("lon","lat") 地域可视化：导入地图数据：12china_map &lt;- readShapePoly("D:/R/rstudy/CHN_adm/bou2_4p.shp") china_map1 &lt;- fortify(china_map) 接下来我们通过几张图表来展示社科经管类核心期刊的地域分布、城市分布情况。 经管类总体数量分布：提取出所有的地址中地级市数量： 12345678910111213diyufenbujing&lt;-myfulldata$Addressdiyufenbu&lt;-sub("中国","",diyufenbujing)part1&lt;-grep("市",diyufenbu,value=T)part1&lt;-sub("(安徽|四川省|湖南省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbu,value=T,invert =T)part2&lt;-sub("四川","",part2)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 所有核心期刊的城市分布情况 1234567891011121314151617181920CairoPNG(file="hexinqikanall.png",width=800,height=600)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="经管类核心期刊数量城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=1.2,colour="white",size=8)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 经济学核心期刊城市分布：123456789101112diyufenbujingji&lt;-myfulldata[which(myfulldata$Class=="C"),]$Addressdiyufenbujingji&lt;-sub("中国","",diyufenbujingji)part1&lt;-grep("市",diyufenbujingji,value=T)part1&lt;-sub("(河南省|湖南省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbujingji,value=T,invert =T)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 123456789101112131415161718192021setwd("F:/微信公众号/公众号——数据小魔方/2017年3月/20170319")CairoPNG(file="jingjixue1.png",width=900,height=620)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="经济学核心期刊城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=1,colour="white",size=7)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 管理学核心期刊城市分布：123456789101112diyufenbujinggl&lt;-myfulldata[which(myfulldata$Class=="M"),]$Addressdiyufenbujinggl&lt;-sub("中国","",diyufenbujinggl)part1&lt;-grep("市",diyufenbujinggl,value=T)part1&lt;-sub("(安徽省|四川省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbujinggl,value=T,invert =T)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue2&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 1234567891011121314151617181920CairoPNG(file="jingjixue2.png",width=800,height=600)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue2,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="管理学核心期刊数量城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=2,colour="white",size=10)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 下面我们通过几张数据地图来观察一下这些期刊在地图空间分布上的趋势。 经济学类核心期刊地域分布123456789101112131415161718192021222324mynewfulldata1&lt;-filter(mynewfulldata,Class=="C")CairoPNG(file="hexinqikanC.png",width=1200,height=640)font.add("myfont","msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_polygon(data=mynewfulldata,aes(x=lon,y=lat,fill = ..level..),stat="density_2d",alpha=.8,color=NA)+geom_point(data=mynewfulldata,aes(x=lon,y=lat),shape=21,size=3,fill="orange",col="white")+ scale_fill_gradient2(low="white",mid="yellow", high = "red")+ coord_map("polyconic")+ guides(fill=FALSE)+ labs(title="经济学核心期刊地域分布密度图",caption="数据来源：百度百科")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 管理学核心期刊地域分布12345678910111213141516171819202122232425mynewfulldata2&lt;-filter(mynewfulldata,Class=="M")CairoPNG(file="hexinqikanM.png",width=1200,height=640)font.add("myfont","msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_polygon(data=mynewfulldata2,aes(x=lon,y=lat,fill = ..level..),stat="density_2d",alpha=.8,color=NA)+geom_point(data=mynewfulldata2,aes(x=lon,y=lat),shape=21,size=3,fill="#0C8DC4",col="white")+ scale_fill_gradient2(low="white",mid="yellow", high = "red")+ coord_map("polyconic")+ guides(fill=FALSE)+ labs(title="管理学核心期刊地域分布密度图",caption="数据来源：百度百科")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 经济学和管理学核心期刊地域分布对比图。123456789101112131415161718192021222324CairoPNG(file="jingguanphoto.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_point(data=mynewfulldata,aes(x=lon,y=lat),shape=21,size=8,fill="transparent",col="#014D64")+ geom_point(data=mynewfulldata2,aes(x=lon,y=lat),shape=21,size=3,fill="#C72E29",col="transparent",alpha=.6)+ coord_map("polyconic") + labs(title="中国社科类经管核心期刊地域分布图",caption="数据来源：百度百科")+ annotate("text", x=63.4, y=45, label="○ C: 经济学", color= "#014D64", size=6.5) + annotate("text", x=65, y=42, label=" ● M: 管理学", color= "#C72E29", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.caption=element_text(family="myfont",size=18,hjust=0), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.6), )showtext.end()dev.off() 不知道大家看了以上核心期刊的地域分布滞后，内心作何感想呢，本来想写几句短评到的，但是相信通过以上可视化形式的呈现，大家都已经明白我想说什么了！ 再者自己是个学渣，这个话题不适合我~—~，有啥感想，都可以写在底部评论里，让我看到你们的声音！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习僧招聘网招聘信息爬虫数据可视化]]></title>
    <url>%2F2017%2F05%2F25%2F%E5%AE%9E%E4%B9%A0%E5%83%A7%E6%8B%9B%E8%81%98%E7%BD%91%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[这一篇是在最近开始接触RSelenium以来，第一次尝试使用该工具操控浏览器获取网页数据，确实方便不少。第一次操作能够这么顺利确实令我非常诧异，仅以此篇纪念我的学习经历！ 我本来对实习僧网站是没什么好感的，因为之前自己在实习僧上投的实习简历几乎全部都石沉大海了（一个文科生偏要去投数据分析岗不碰壁才怪~_~）！ 然鹅看到最近知乎爬虫圈儿里的两大趋势：爬美图；爬招聘网站。 后来大致了解下了，几乎各类大型的招聘文章都被别人爬过了，自己再去写免不了模仿之嫌，而且大神们都是用Python去爬的（Python我刚学会装包和导数据），自己也学不来。现在只能选一个还没怎么被盯上的招聘网站，没错就它了——实习僧。 实习僧 说老实话，实习僧的网站做的还是不错的，看着结构挺简单，可是我用比较主流的Rvest和RCurl都失败了（主要自己技术太渣了，抓包又抓不好）。最后只能勉强用RSelenium爬完了全部所需内容。（用代码驱动浏览器的好处就是不用怎么考虑时延和伪装包头了，但是要遍历成百上千页网址真的很耗时，爬完这个数据用了大约40多分钟）。 以下是爬虫部分： 加载包及配置环境：1234567891011121314151617library(rvest)library(stringr)library(plyr)library(dplyr)library(Rwebdriver)library(dplyr)library(Rwordseg)library(wordcloud2)library(treemap)library(showtext)library(Cairo)library(ggplot2)library(scales)library(grid)library(RColorBrewer)library(ggimage)library(geojsonio) 本文主要用的Rwebdriver包来驱动Chrome浏览器，使用该包需要提前配置好桌面环境： 下载selenium启动服务器； 下载Chrome的chromedriver插件并放入Chrome主目录（添加系统环境变量） 下载Rwebdriver包 启动服务PowerShell启动12cd "D:/Rwebdriver-master"java -jar selenium-server-standalone-3.3.1.jar Rstudio启动：12start_session(root="http://localhost:4444/wd/hub/",browser ="chrome")options(stringsAsFactors=FALSE,warn=FALSE) 爬虫主程序：网页遍历123遍历实习僧的招聘信息网页baseurl&lt;-"http://www.shixiseng.com/interns?k=&amp;t=zh&amp;c=%E5%85%A8%E5%9B%BD&amp;p="pageurl&lt;-paste0(baseurl,1:500) 爬虫主体代码部分：123456789101112131415homepage=internship=companyweb=company=Position=address=salary=period=duration=NULLfun&lt;-function(url)&#123;post.url(url=url)baseinfo&lt;-read_html(url,encoding="utf-8")homepage &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.names&gt;a")%&gt;% html_attr("href")internship&lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.names&gt;a")%&gt;%html_text()companyweb&lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part&gt;a")%&gt;%html_attr("href")company &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part&gt;a")%&gt;%html_text()Position &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part")%&gt;%html_text()address &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.addr&gt;span")%&gt;%html_text()salary &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(2)")%&gt;%html_text()period &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(5)")%&gt;%html_text()duration &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(8)")%&gt;%html_text()interninfo&lt;-data.frame(homepage,internship,companyweb,company,Position,address,salary,period,duration)&#125; 爬虫执行程序：1234567final&lt;-data.frame()for (i in pageurl)&#123;final&lt;-rbind(final,fun(i))&#125;quit_session()DT::datatable(final) 保存本地：1write.table (final,"D:/R/File/shixiseng.csv",sep=",",row.names=FALSE) 数据清洗接下来做数据清洗：12345678910111213141516171819202122mydata&lt;-read.csv("D:/R/File/shixiseng.csv",stringsAsFactors=FALSE,check.names=FALSE) mydata&lt;-mydata[-5001,]#补全实习发布单位的招聘信息主页：mydata$homepage&lt;-str_c("http://www.shixiseng.com",mydata$homepage,sep="")#补全实习发布单位的公司信息主页：mydata$companyweb&lt;-str_c("http://www.shixiseng.com",mydata$companyweb,sep="")mydata$work&lt;-str_split(mydata$Position[1:10], " - ", simplify=TRUE)[,2]#清除salary中的空格和斜杠mydata$salary&lt;-str_trim(mydata$salary,side="both")mydata$salary&lt;-str_extract(mydata$salary,"\\d+\\-\\d+")#拆分实习工资的高低区间mydata$salary_low&lt;-str_split(mydata$salary, "-", simplify=TRUE)[,1]mydata$salary_high&lt;-str_split(mydata$salary, "-", simplify=TRUE)[,2]#清除period中的汉字和特殊字符mydata$period&lt;-str_extract(mydata$period,"\\d+")#清除duration中的汉字和特殊字符mydata$duration&lt;-str_extract(mydata$duration,"\\d+")mydata &lt;- tbl_df(mydata)mydata&lt;-select(mydata,-Position)#因为address中所含的地址可能有存在多个，影响我们后续的可视化分析，这里为了方便起见，一律使用第一个地址。mydata$address_unique&lt;-str_split(mydata$address, ",", simplify=TRUE)[,1]至此，数据清洗工作告一段落，接下来我们要进入分析与可视化阶段 12345678910111213names(mydata)"homepage"-------公司实习职位简介"internship"-----公司招聘性质"companyweb"-----公司主页"company"--------公司名称"address"--------所在地"address_unique"-所在地（唯一值，只取默认第一个地址）"salary"---------实习工资区间"salary_low"-----实习工资（最低值）"salary_high"----实习工资（最高值）"period"---------到岗天数（每周）"duration"-------实习周期（按月算）"work"-----------具体职位 我们最终获取的清洗后数据如上所示。假如本次项目需求（虚拟）要求我们获取以下几个问题： 实习僧的实习招聘主页岗位主要是什么性质的？ 哪些公司最缺实习僧？ 实习岗位具体分布的地域和城市？ 哪些城市对实习僧的需要最为强烈？ 实习工资大致什么水平，与城市和地域是否有关系？ 实习岗位一般都要求每周到岗多少天？ 实习周期一般需要多长时间？ 哪些职位需求最为频繁，职位需要量与城市之间的大致是如何分布的？ 带着这些个问题，让我们尽情的畅游在可视化的世界里吧…… 数据可视化阶段实习僧的实习招聘主页主要是什么性质的？12length(unique(mydata$internship))3357 绝望了，一共爬了5000条实习职位信息，做了去重处理，显示仍有3357条，建议实习僧的产品运营团队考虑下要不要标准化一下这个职位性质，内门怎么可以创造这么多独特的职位~_~ 对于这个问题，真的难倒我了，因为所爬数据中的职位性质没有统一的预设标准，所以我只能用文本分词的形式来进行提取了，先分词，然后统计高频词，最后按照词频来进行模糊分析啦（可我我对文本挖掘一窍不通啊~_~） 123top100&lt;-table(mydata$internship)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;% arrange(desc(Freq))%&gt;%.[1:100,]treemap(top100, index=c("Var1"), vSize="Freq",title='实习僧职位性质分布图',palette='RdBu',fontsize.title=18,fontsize.labels=12,fontface.labels="plain",fontfamily.title="mono",fontfamily.labels="mono") 从实习职位分布图上来看，人力资源实习生职位需求最为强烈，其次是运营、财务、新媒体，这些类型的职位多为现代新兴服务业，更为符合大学生这一群体的口味和兴趣。 123456myrevieww&lt;-mydata$internshipthewords &lt;- segmentCN(myrevieww,nature=T)%&gt;%unlist()thewords &lt;- gsub("[a-z]|\\.", "", thewords)thewords&lt;-thewords[nchar(thewords)&gt;1]reviewdata&lt;-table(thewords)%&gt;%as.data.frame(stringsAsFactors = FALSE)%&gt;% arrange(desc(Freq))%&gt;%filter(thewords!="实习生")wordcloud&lt;-wordcloud2(reviewdata[1:1000,],color="random-light",minSize=.6,size=1,backgroundColor="dark",minRotation=-pi/6,maxRotation=-pi/6,fontFamily ="微软雅黑");wordcloud 但是将职位性质分词整理成关键词后，似乎结果有所不同。 哪些公司最缺实习僧？这里我们来统计所爬职位信息中公司发布职位的频率，发布最多的则作为评价公司对实习生需求的标准。123myjob&lt;-table(mydata$company)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))#看看前十名都是那些公司：myjob15&lt;-arrange(myjob[1:15,],desc(Freq)) 1234567891011121314151617181920212223242526CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/circle-rose.png",width=1580,height=950)showtext.begin()ggplot(data=myjob15,aes(x=reorder(Var1,-Freq),y=Freq,fill=Freq))+geom_linerange(aes(ymin=0,ymax=42),linetype=5,size=.2,colour="#858585")+geom_image(aes(x=0,y=-40),image="D:/R/Image/image1.jpg", size =.2)+geom_text(aes(y=45,label=paste0(Var1,"\n",Freq)),vjust=1,size=5)+geom_bar(stat="identity",width=1,col="white")+geom_hline(yintercept =54,color="black",size=.5)+geom_point(aes(y=48,size=Freq),shape=21,fill="#ED7D31",,alpha=0.6,col="orange")+labs(title="Top 15 of Company",caption="Data Source:shixiseng")+coord_polar(theta="x")+ylim(-40,60)+scale_size_area(max_size=20)+guides(fill=FALSE,size=guide_legend(reverse=TRUE,title=NULL))+theme_minimal()+theme(axis.title=element_blank(),axis.text=element_blank(),panel.grid=element_blank(),legend.text=element_text(family="myfont",size=12),legend.title=element_text(family="myfont",size=15,hjust=1),plot.title=element_text(family="myfont",size=35),plot.caption=element_text(family="myfont",size=18,hjust=0,lineheight=1.2))showtext.end()dev.off() 1write.table (myjob[1:100,],"D:/R/File/shixiseng_job.csv",sep=",",row.names=FALSE) 前一百个实习生需求最旺盛企业： 实习岗位具体分布的地域和城市？先做一个地域分布图：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051add&lt;-table(mydata$address_unique)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))%&gt;%filter(nchar(Var1)==2)#城市经纬度查询：library(rjson)library(RCurl)library(REmap)library(baidumap)address&lt;-add$Var1baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"for(location in address)&#123; url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="") url_string &lt;- URLencode(url) msg.load &lt;- tryCatch(&#123; json &lt;-readLines(url_string,warn=F,encoding="UTF-8") msg.load &lt;- "TRUE" &#125;,error=function(e) &#123; "error" &#125;) if(msg.load=='error')&#123; Sys.sleep(runif(1,3,10)) msg.load &lt;- tryCatch(&#123; connect &lt;- readLines(url_string,warn=F,encoding = "UTF-8") msg.load &lt;- "TRUE" &#125;, error = function(e)&#123; "error" &#125; ) &#125;geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) if(msg.load=='error')&#123; lng&lt;-'error1' lat&lt;-'error1' &#125;else&#123; lng&lt;-geo$result$location$lng lat&lt;-geo$result$location$lat if(length(lng) == 0)&#123; lng &lt;- "error2" lat &lt;- "error2" &#125; &#125;lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng)baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,long=baidu_lng,lat=baidu_lat,stringsAsFactors=FALSE)pointdata&lt;-left_join(add,result,by=c("Var1"="address"))#成功获取目标城市经纬度信息： 接下来来制作分布图： 12345678910111213141516171819202122232425geojson &lt;-readOGR("D:/R/mapdata/State/china.geojson","OGRGeoJSON",stringsAsFactors=FALSE)Encoding(geojson$name)&lt;-"UTF-8"china_Mapdata&lt;-geojson@datachina_MapdataPloygon&lt;-fortify(geojson)CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/shixiseng_jobcity.png",width=1200,height=640)showtext.begin()ggplot()+ geom_polygon(data=china_MapdataPloygon,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_point(data=pointdata,aes(x=long,y=lat,size=Freq),shape=21,fill="#C72E29",col="#014D64",alpha=0.6)+ scale_size_area(max_size=15,guide=guide_legend(reverse=TRUE,title=NULL))+ coord_map("polyconic") + labs(title="实习僧职位需求城市分布图",caption="数据来源：实习僧官网")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.caption=element_text(family="myfont",size=18,hjust=0), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.6), )showtext.end()dev.off() 哪些城市对实习僧的需要最为强烈？从第三个问题及其分析结果上我们已经看出了整体形势，北上广深依然是需求最为旺盛的地区，这也符合城市的实际经济发展情况及我们的预期。 12345678910111213141516171819CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/jingjixue2.png",width=800,height=600)showtext.begin()ggplot(pointdata[1:20,],aes(reorder(Var1,Freq),Freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="实习僧职位需求城市分布",caption="数据来源：实习僧官网")+geom_text(aes(y=Freq+25,label=Freq),hjust=2,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 实习工资大致什么水平，与城市和地域是否有关系？1234567891011121314151617181920212223242526myjob_salary&lt;-mydata[,c("address_unique","salary_low","salary_high")] myjob_salary$salary_low&lt;-as.numeric(myjob_salary$salary_low)myjob_salary$salary_high&lt;-as.numeric(myjob_salary$salary_high)myjob_salary&lt;-na.omit(myjob_salary)%&gt;%arrange(salary_high)%&gt;%filter(salary_high&gt;=20&amp;salary_high&lt;=500)myjob_salary$id&lt;-seq_len(nrow(myjob_salary))myjob_salary$meansalary&lt;-(myjob_salary$salary_low+myjob_salary$salary_high)/2CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/shixiseng_jobsaleryarea.png",width=1200,height=800)showtext.begin()ggplot(myjob_salary,aes(id))+geom_ribbon(aes(ymin=salary_low,ymax=salary_high),fill = "grey70")+labs(title="实习僧职位工资区间分布",caption="数据来源：实习僧官网")+geom_line(aes(y=meansalary))+theme_minimal()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=30,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=20), axis.title=element_blank(), axis.text.y=element_text(size=15), axis.text.x=element_blank() )showtext.end()dev.off() 1234567myjob_salary$address_unique&lt;-substr(myjob_salary$address_unique,1,2)myjobcitysalary&lt;-aggregate(meansalary~address_unique,data=myjob_salary,FUN=mean)treemap(na.omit(myjobcitysalary), index=c("address_unique"),vSize="meansalary",title='实习僧职位薪酬地域分布图',palette='RdBu',fontsize.title=18,fontsize.labels=12,fontface.labels="plain",fontfamily.title="mono",fontfamily.labels="mono") 按照全部参与计算聚合的平均工资来看，北上广深反而没有什么吸引力了排名普遍不高，我猜想是因为一线城市的低工资职位数量过多，压低了平均值。 接下来我们按照100，150的临界点进行工资高低的划分。 1234567891011121314151617181920salary100&lt;-myjob_salary%&gt;%filter(meansalary&lt;=100)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary100&lt;-na.omit(salary100)%&gt;%arrange(desc(Freq));names(salary100)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary100.png",width=1200,height=900)showtext.begin()ggplot(salary100[salary100$num&gt;=5,],aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪低于100）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 1234567891011121314151617181920salary200&lt;-myjob_salary%&gt;%filter(meansalary&gt;=200)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary200&lt;-na.omit(salary200)%&gt;%arrange(desc(Freq));names(salary200)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary200.png",width=1200,height=900)showtext.begin()ggplot(salary200,aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪高于200）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 123456789101112131415161718192021salary100_200&lt;-myjob_salary%&gt;%filter(meansalary&gt;100 &amp; meansalary&lt;200)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary100_200&lt;-na.omit(salary100_200)%&gt;%arrange(desc(Freq));names(salary100_200)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary100-200.png",width=1600,height=900)showtext.begin()ggplot(salary100_200,aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪处于100-200之间）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 分析到这里，趋势已经很明显了，因为北上广深等一线城市的职位实在是太多了，无论是高新职位还是低薪实习岗位都能排在全国各城市的前列，所以出现日均工资很普通的现象。相对而言，日薪在200以上的高薪职位更能代表各大城市对日常实习生需求的强烈程度，因为在这一阶段，北上广深的优势非常明显，遥遥领先与其他二线城市，而针对日薪高于200的实习职位统计结果可以看出来，北上技压群雄（不愧是帝都和魔都），深圳和广州处于第二线，200以上的高新实习职位遇北上相比，相差比较大，仅占前两者约1/3~1/5。而杭州、南京、武汉、合肥则稳稳处于第三梯队。 实习岗位一般都要求每周到岗多少天？123456789101112131415myperiod&lt;-mydata$periodCairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/internperiod.png",width=1000,height=750)showtext.begin()ggplot(data=NULL,aes(myperiod)) +geom_histogram(stat="count",show.legend=FALSE,binwidth=1,fill="#F86977",col=NA) +labs(title="实习职位要求每周工作天数",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 从分布上看，一周五天居多，这样是正常的工作日现象。3天、4天也是用人单位补缴能接受的周工作天数。 实习周期一般需要多长时间？1234567891011121314151617myduration&lt;-mydata$durationmydurationhz&lt;-table(myduration)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/internduration.png",width=1000,height=750)showtext.begin()ggplot(data=mydurationhz,aes(reorder(myduration,-Freq),Freq)) +geom_bar(stat="identity",show.legend=FALSE,width=1,fill="#065573",col=NA) +geom_text(aes(y=Freq+20,label=Freq),hjust=.5,colour="#C72E29",size=5)+labs(title="实习职位要求工作时间周期",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 哪些职位需求最为旺盛？ 下面开始分析最后一个问题，也是我认为最有价值，最值得探究的问题，最后一个待分析指标是实习职位，这个指标跟我们最初分析的那个岗位性质略有不同，该变量相对比较规范（职位类别有确定的预设范围）。 我们新建一个分析数据，用职位、工资区间的中间值，地区三个变量进行后续分析：1234mydata$salary_high&lt;-as.numeric(mydata$salary_high)mydata$salary_low&lt;-as.numeric(mydata$salary_low)mydata$salary_mean&lt;-(mydata$salary_low+mydata$salary_high)/2myworkdata&lt;-mydata[,c("address_unique","work","salary_mean")] 首先分析下岗位的集中分布情况：1234567891011121314151617myworkcount&lt;-table(myworkdata[,2])%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/interndworkcount.png",width=1000,height=750)showtext.begin()ggplot(data=myworkcount,aes(reorder(Var1,-Freq),Freq)) +geom_bar(stat="identity",show.legend=FALSE,width=.75,fill="#5D8DA6",col=NA) +geom_text(aes(y=Freq+50,label=Freq),hjust=.5,colour="#C72E29",size=5)+labs(title="实习职位类别分布",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 各个岗位工资分布：12345678910111213141516myworkmean&lt;-aggregate(salary_mean~work,data=myworkdata,FUN=mean)CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/interndworkmean.png",width=1000,height=750)showtext.begin()ggplot(data=myworkmean,aes(reorder(work,-salary_mean),salary_mean)) +geom_bar(stat="identity",show.legend=FALSE,width=.75,fill="#5D8DA6",col=NA) +geom_text(aes(y=salary_mean+5,label=round(salary_mean,1)),hjust=.5,colour="#C72E29",size=10)+labs(title="实习职位类别平均工资",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=25,family="myfont"), plot.caption=element_text(hjust=0,family="myfont",size=20), axis.line=element_line(colour="grey80"), axis.text=element_text(size=18,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 从工资均数上来看，七大类职位差距不大，说明仅就实习岗位工资而言，结合爬取的总体样本，不考虑地域差异，实习工资差异不很明显。也许是因为实习岗位中真正有含金量的并不多，换句话说，企业的高价值岗位，对于工作经验、技能的要求相对较高，而实习生则在这方面都不具备优势。（如果是社招或者小校招岗位信息的话，可能工资均值的差异会大一些）。 最后，让我们用一个桑基图来完结本次针对实习僧网站的爬虫分析： 1write.table (myworkdata,"D:/R/File/shixiseng_workdata.csv",sep=",",row.names=FALSE) 桑基流向图的趋势灰常明显，北上两市在所有类别职位（7大类）上均居前列，各职位类别中，市场和运营职位需求最为强烈，北京和上海在对市场和运营职位的需求容量机会平分秋色。广州和深圳仍然略于北上，但是与其他二线城市相比较，优势仍然很明显。（也许是因为实习僧做为主打校园实习岗位信息咨询平台，针对的主流群体基本以在校大学生为主，而北上广深的高等教育资源分布差异明显，在高校数量方面，北上的要沾光很多，广州与深圳的高校资源相对比较匮乏，在以上分析的各项指标中都占尽劣势）。 爬虫和代码分析，算起来整整花了将近12个小时，虽然分析的不是很精准、客观，但是过程还是很有收获的，期待下一次做的更好！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>爬虫</tag>
        <tag>PowerBI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[山东省公共财政预算数据可视化]]></title>
    <url>%2F2017%2F05%2F24%2F%E5%B1%B1%E4%B8%9C%E7%9C%81%E5%85%AC%E5%85%B1%E8%B4%A2%E6%94%BF%E9%A2%84%E7%AE%97%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[自带学习R语言以来，从来没用把这些技能用在自己的专业方向上，说好的学以致用呢~ 最近看到的一篇微信公众号推文，内容是关于山东省各县（细化到137个县级行政区）2016年的GDP规模、公共预算收入规模及其增速指标，数据质量还不错，是山东省发改委公布的。 http://mp.weixin.qq.com/s/Sk4fIh3-ykcNK8uP0gZryw 感觉自己终于离专业方向近了一些（本人学财政的），数据就在眼前，这次机会一定要抓住了。 数据虽然质量不错，但是苦于手头没有最新的山东省县级地图素材（之前练习用的SHP素材都是很古老的素材，使用市级范围没啥问题，但是县级行政单位变更太快了，根本没法用）。所以这篇文章写作过程特别艰难~ 我用了半个上午爬取并整理数据，却用了两天时间寻找地图素材、最终找到了山东省17个地级市的json素材（还不会合并json数据），找到了个在线json转shp的平台，用17个json文件拼接成一个 完整的山东省地图，然后导出shp数据，这才搞定了县级地图工作。（想想也是太执着了~） 本篇文章主要主要还是演示地图可视化为主，其中包含基础的数据抓取、数据清洗、数据聚合、变量结构和ggplot图层语法，最终得到7福高质量的数据地图。 加载包以下是本文需要用到的包： 1234567891011121314151617library(XML)library(RCurl)library(stringr)library(dplyr)library(plyr)library(ggplot2) library(maptools) library(Cairo) library(RColorBrewer) library(xlsx)library(rjson)library(rgdal)library(data.table)library(tidyr)library(grid)library(showtext)library(sqldf) 数据抓取数据抓取过程1234567891011url&lt;-"http://mp.weixin.qq.com/s/Sk4fIh3-ykcNK8uP0gZryw"Name&lt;- getURL(url,.encoding="utf-8")%&gt;%htmlParse(encoding="UTF-8")%&gt;%getNodeSet("//strong/span") title&lt;-grep("按",laply(Name,xmlValue,trim=T),value=T);titletbls&lt;-readHTMLTable(url,header=TRUE,trim=TRUE)names(tbls)&lt;-title;names(tbls)sapply(tbls,nrow)[1] "按公共财政预算收入规模：" "按公共财政预算收入增长幅度："[3] "按GDP规模：" "按GDP增长幅度：" [5] "按人均GDP：" 以下数据网页中五张表格的提取过程： 1234567891011121314151617181920212223242526BudgetScale&lt;-tbls$`按公共财政预算收入规模：`[-1];names(BudgetScale)&lt;-c("Country","BudgetScale")BudgetScale$Country&lt;-as.character(BudgetScale$Country)BudgetScale$BudgetScale&lt;-as.numeric(as.character(BudgetScale$BudgetScale))BudgetGrowth&lt;-tbls$`按公共财政预算收入增长幅度：`[-1];names(BudgetGrowth)&lt;-c("Country","BudgetGrowth")BudgetGrowth$Country&lt;-as.character(BudgetGrowth$Country)BudgetGrowth$BudgetGrowth&lt;-as.numeric(as.character(BudgetGrowth$BudgetGrowth))GDPScale&lt;-tbls$`按GDP规模：`[-1];names(GDPScale)&lt;-c("Country","GDPScale")GDPScale$Country&lt;-as.character(GDPScale$Country)GDPScale$GDPScale&lt;-as.numeric(as.character(GDPScale$GDPScale))GDPGrowth&lt;-tbls$`按GDP增长幅度：`[-1];names(GDPGrowth)&lt;-c("Country","GDPGrowth")GDPGrowth$Country&lt;-as.character(GDPGrowth$Country)GDPGrowth$GDPGrowth&lt;-as.numeric(as.character(GDPGrowth$GDPGrowth))PerGDPGrowth&lt;-tbls$`按人均GDP：`[-1];names(PerGDPGrowth)&lt;-c("Country","PerGDPGrowth")PerGDPGrowth$Country&lt;-as.character(PerGDPGrowth$Country)PerGDPGrowth$PerGDPGrowth&lt;-as.numeric(as.character(PerGDPGrowth$PerGDPGrowth))BudgetScale&lt;-arrange(BudgetScale,Country)BudgetGrowth&lt;-arrange(BudgetGrowth,Country)GDPScale&lt;-arrange(GDPScale,Country)GDPGrowth&lt;-arrange(GDPGrowth,Country)PerGDPGrowth&lt;-arrange(PerGDPGrowth,Country) 本来137个县级行政区的名称应该是一致的，但是网页中公布的数据名称不一致，所以没法合并，需要自己集合最新的行政区划名称手动修改，费老大劲！ 先将五张表格的数据写入一个工作薄中，然后手动修改: 12345write.xlsx(BudgetScale,"D:/R/File/shddata.xlsx",sheetName="BudgetScale",append=FALSE,row.names=FALSE)write.xlsx(BudgetGrowth,"D:/R/File/shddata.xlsx",sheetName="BudgetGrowth",append=TRUE,row.names=FALSE)write.xlsx(GDPScale,"D:/R/File/shddata.xlsx",sheetName="GDPScale",append=TRUE,row.names=FALSE)write.xlsx(GDPGrowth,"D:/R/File/shddata.xlsx",sheetName="GDPGrowth",append=TRUE,row.names=FALSE)write.xlsx(PerGDPGrowth,"D:/R/File/shddata.xlsx",sheetName="PerGDPGrowth",append=TRUE,row.names=FALSE) 因为以上五个表格所用到的行政区划名称不完全相同，需要手动各县级行政区划对应的隶属地级市名称才能进行列合并。 以下是我从网络上找到并整理的山东省17地级市，137县级（包含县级市）行政单位的代号，名称，经纬度信息。 12345678setwd("D:/R/mapdata/Country/shandong")shandong_city&lt;-read.xlsx("City.xlsx",sheetName="City",header=T,encoding='UTF-8',stringsAsFactors=FALSE)shandong_district&lt;-read.xlsx("City.xlsx",sheetName="District",header=T,encoding='UTF-8',stringsAsFactors=FALSE)shandong_district&lt;-unite(shandong_district,address,City,Name,sep="")shandong_district&lt;-transform(shandong_district,Adress=paste0("山东省",shandong_district$address))[,-1][,c(4,1,2,3)]names(shandong_district)[1]&lt;-"address" 通过以上shandong_district表中的城市、县级市名称字段合理规范以上五张表中的县级行政单位名称，总最终合并至表6——shandongdata注意五张表在同一个工作薄中。 经纬度地址解析：解析经纬度地址：这里调用百度地图的API解析县级市的经纬度地址：（大家最好自己去注册百度地图开发者，然后申请免费秘钥） 123456789101112131415baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"address&lt;-shandong_district$addressfor(location in address)&#123;url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="")url_string &lt;- URLencode(url) json&lt;- readLines(url_string, warn=F) geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng) baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,longitude=baidu_lng,latitude=baidu_lat,stringsAsFactors=FALSE) 将县级市数据与经纬度数据合并： 123456shandong_district_data&lt;-merge(shandong_district,result,by="address")[,-c(3,4)]names(shandong_district_data)[3:4]&lt;-c("lon","lat")shandong_district_data$address&lt;-as.character(shandong_district_data$address)shandong_zhibiao_data&lt;-read.xlsx("shddata.xlsx",sheetName="Shandongdata",header=T,encoding='UTF-8',stringsAsFactors=FALSE)names(shandong_zhibiao_data)[2]&lt;-"address"shandong_district_data&lt;-merge(shandong_district_data,shandong_zhibiao_data,by="address") 以上得到了山东省所有县级行政单位的点坐标信息。 导入背景地图素材数据读图背景素材导入： 素材一：山东省县级地图素材： 123456mymap&lt;-readOGR(".","map",encoding = "UTF-8",verbose=FALSE)myShape &lt;- fortify(mymap) x &lt;- mymap@datanames(x)[3]&lt;-"Code" xs &lt;- data.frame(x,ID=seq(0:139)-1)[,c(3,8)]shandong_district_map_data&lt;-merge(myShape,xs,by.x="id",by.y="ID",type="full")[,-c(5,6)] 很遗憾，我们从以上素材中所提取的城市名称数据，可能涉及到编码的问题，中文全部成为了乱码，这样我们前期整理的山东省GDP及公共财政相关数据的中名称便无法与该地图进行匹配，好在行政区代码还在，这样我们就可以从之前找到行政区划代码和名称信息进行匹配。 将县级行政区地图与县级市进行匹配，获得信息完整的县级地图数据。 12shandong_district_map_data&lt;-merge(shandong_district_map_data,shandong_district_data[,-c(3,4)],by="Code",all.x=TRUE)shandong_district_map_data&lt;-shandong_district_map_data[order(shandong_district_map_data$order),] 素材2：山东省市级地图素材： 12345678CHN_adm2 &lt;- readOGR("D:/R/rstudy/CHN_adm/CHN_adm2.shp") CHN_adm2_1 &lt;- fortify(CHN_adm2) CHN_adm2_1$id&lt;-as.numeric(CHN_adm2_1$id)shx &lt;- CHN_adm2@data shxs &lt;- data.frame(shx,id=seq(0:344)-1) china_map_data &lt;- join(CHN_adm2_1,shxs,type="full") shandong_city_map_data&lt;-subset(china_map_data,NAME_1==c("Shandong"))[,c(1,2,7,14)]mydata&lt;-read.csv("D:/R/rstudy/State/huanbohai.csv",header=T)[,-3] 12#匹配市级行政单位信息：shandong_city_map_data &lt;-join(shandong_city_map_data,mydata,by="NAME_2",type="left") 接下来整合指标信息与地图作图数据：山东省市级地图作图数据： 因为我们之前获取的指标数据是按照县级行政区划整理的，这里需要使用聚合函数，整理成市级的。因为增长比率数据汇总聚合后意义不大，即便是平均值也不是很有意义，所以这里只用市级的公共预算支出和GDP数据。 12345678shandongdata&lt;-data.table(shandong_zhibiao_data)shandongnewdata&lt;-shandongdata[,.(SUM_BudgetScale=sum(BudgetScale),SUM_GDPScale=sum(GDPScale)),by=City]shandong_city_map_data&lt;-merge(shandong_city_map_data,shandongnewdata,by.x="city",by.y="City") shandong_fill_map_data&lt;-shandongnewdatashandong_fill_map_data$city&lt;-paste0(shandong_fill_map_data$City,"市")shandong_fill_map_data&lt;-shandong_fill_map_data[,c(1,4,2,3)]shandong_fill_map_data&lt;-merge(shandong_fill_map_data[,-1],shandong_city,by.x="city",by.y="City")shandong_fill_map_data&lt;-shandong_fill_map_data[,c(1,4,5,6,2,3)] 现在所有的数据已经整理完毕，我们一共得到了四张有用的数据集： 市级地图数据——shandong_city_map_data（含城市指标） 县级地图数据——shandong_district_map_data（含17个地级市指标及经纬度） 市级指标数据——shandong_fill_map_data（含城市经纬度及两个指标：GDP规模和公众预算规模） 县级指标数据——shandong_district_data（含137个行政县指标及经纬度和五个指标数据，GDP规模、GDP增速，人均GDP增速，预算规模、预算增速）。 因为地级市数据限制，只有两个指标（GDP规模和预算规模），所以，最多只能制作两张地图。县级行政区数据比较齐全，这里计划的呈现的维度是GDP规模与GDP增速，GDP规模与人均GDP增速，GDP增速与人均GDP增速。预算规模和预算增速。合计一共四张图。 接下来我们进入地图制作环节：市级地图：（这两将包含两幅地图：GDP规模、公共预算收入规模） 为了更加明显的呈现出各个地级市的GDP和预算规模，这里我准备将两个指标的连续数值型变量切割成有序分段因子变量。 首先浏览下各市GDP的极差分布： 12&gt; range(shandong_city_map_data$SUM_GDPScale)[1] 703 9901 所以这里范围使用0~10000，均分为5组； 1shandong_city_map_data$FA_SUM_GDPScale&lt;-cut(shandong_city_map_data$SUM_GDPScale, breaks=c(0,1500,3000,4500,6000,10000),labels=c('0~1500','1500~3000','3000~4500','4500~6000','6000~10000'),order=TRUE) 123456789101112131415161718192021222324252627CairoPNG(file="GDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+geom_polygon(data=shandong_city_map_data,aes(x=long,y=lat,group=group,fill=FA_SUM_GDPScale),col="white",size=.2)+scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各地级市2016年GDP规模分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=shandong_fill_map_data,aes(x=long,y=lat,label=city),family="myfont",fontface="plain",size=6)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 浏览下各市公共预算规模的极差分布： 12&gt; range(shandong_city_map_data$SUM_BudgetScale)[1] 47.2 1003.3 使用直方图大致了解下最终的预算规模数据分布； 1ggplot(shandong_city_map_data,aes(SUM_BudgetScale))+geom_histogram() 所以这里范围使用0~1200，不等分为5组； 1234567891011121314151617181920212223242526272829shandong_city_map_data$FA_SUM_BudgetScale&lt;-cut(shandong_city_map_data$SUM_BudgetScale, breaks=c(0,150,300,450,600,1005),labels=c('0~150','150~300','300~450','450~600','600~ '),order=TRUE) CairoPNG(file="BudgetScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+geom_polygon(data=shandong_city_map_data,aes(x=long,y=lat,group=group,fill=FA_SUM_BudgetScale),col="white",size=.2)+scale_fill_brewer(palette="OrRd")+ coord_map("polyconic") + labs(title="山东省各地级市2016年公共预算收入规模分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=shandong_fill_map_data,aes(x=long,y=lat,label=city),family="myfont",fontface="plain",size=6)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上是地级市数据可视化两个维度的全部代码，通过2016GDP规模以公共预算支出的规模对比可以发现，山东省地区间经济发展水平差异还是很大的，其中青岛在两个指标上都遥遥领先，也是全国为数不多的地级市发展好于省会的城市之一。 县级地图，以下过程将会输出五福图形，展示山东省县级行政区在GDP和预算规模的绝对量、增长率等各维度信息。分别包含GDP规模与增速、GDP规模与人均GDP增速、预算规模与预算增速、GDP规模与预算规模、GDP增速与预算增速对比。 为了与上面过程保持一致，这里的绝对量还是要换算成分段因子变量，这样比较适合通过分段颜色来更好的呈现山东省各县的相关数据信息。 首先还是简略查看下GDP的极差分布： 12345range(shandong_district_map_data$GDPScale)[1] 67 2766shandong_district__dataggplot(shandong_district_map_data,aes(GDPScale))+geom_histogram() 可以看出来，县级地区GDP的分布比较诡异，出现了一个特别的值，其他县市都集中在1200以下。 123sqldf("SELECT address,Max(GDPScale) AS GDPmax FROM shandong_district_data") address GDPmax1 山东省青岛市黄岛区 2766 果然青岛市各县GDP黄岛区占了大头儿。如果数据分布不是很规律的话，平均分组可能 导致有些组没数据，有些组特别集中的情况。 这里尝试着对各县GDP进行分组，期待能够分组合理的利用可视化呈现的分组。 12345678shandong_district_map_data$FA_GDPScale&lt;-cut(shandong_district_map_data$GDPScale, breaks=c(0,300,600,900,1200,3000),labels=c('0~300','300~600','600~900','900~1200','1200~3000'),order=TRUE) summary(shandong_district_map_data$FA_GDPScale) 0~300 300~600 600~900 900~1200 1200~3000 2930 2549 1064 539 85 text&lt;-arrange(shandong_district_data,desc(GDPScale))%&gt;%select(Country,lon,lat,GDPScale)text&lt;-text[1:10,] 山东省各行政县（包含县级市）2016年GDP规模&amp;增速分布 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictGDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_GDPScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPGrowth),shape=21,fill="#FB832D",col="#ED7D31",alpha=.6)+ #ED7D31E02939scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 山东省各行政县（包含县级市）2016年GDP规模&amp;人均GDP增速分布 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictPerGDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_GDPScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=PerGDPGrowth),shape=21,fill="#098154",col="#ED7D31",alpha=.6)+ #ED7D31E02939scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="OrRd")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;人均GDP增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.05,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 除了GDP之外，还有另一个规模性指标——预算规模，接下来，我们针对预算规模来分析。 查看各县预算规模的极差分布状况。 12345678910111213summary(shandong_district_map_data$BudgetScale) Min. 1st Qu. Median Mean 3rd Qu. Max. NA's 1.30 14.00 22.90 34.26 46.00 212.40 346 shandong_district_map_data$FA_BudgetScale&lt;-cut(shandong_district_map_data$BudgetScale, breaks=c(0,40,80,120,160,240),labels=c('0~50','50~100','100~150','150~200','200~250'),order=TRUE) &gt; summary(shandong_district_map_data$FA_BudgetScale) 0~50 50~100 100~150 150~200 200~250 NA's 4999 1544 521 53 50 346 text1&lt;-arrange(shandong_district_data,desc(BudgetScale))%&gt;%select(Country,lon,lat,BudgetScale)text1&lt;-text1[1:10,] 山东省各行政县（包含县级市）2016年公共预算收入规模&amp;增速分布 123&gt; summary(shandong_district_data$BudgetGrowth) Min. 1st Qu. Median Mean 3rd Qu. Max. -15.600 6.500 9.500 9.085 11.400 31.300 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictBudgetScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_BudgetScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=abs(BudgetGrowth)),shape=21,fill=ifelse(shandong_district_data$BudgetGrowth&gt;0,"#FB832D","#014D64"),col="#ED7D31",alpha=.6)+ #气泡图颜色根据正负值分开填充scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年公共预算收入规模&amp;增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text1,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上三个维度分别展示了山东省各县GDP规模与增速指标、GDP规模与人均GDP增速指标、财政公共预算收入与增速指标的分布情况。 接下来我们在呈现各县GDP相对于公共预算收入规模的分布情况。 123456789101112131415161718192021222324252627CairoPNG(file="DistrictGDP&amp;Budget.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPScale,fill=BudgetScale),shape=21,col="grey60",alpha=.8)+ scale_size(range=c(1,12),guide=FALSE)+ scale_fill_gradient2(low="#014D64",mid="grey",high="#C72E29",midpoint=range(na.omit(shandong_district_map_data$BudgetScale))/2,guide=FALSE)+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;公共预算收入分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ annotate("text", x=114.8, y=38.3, label="● 高（预算）", color= "#C72E29", size=6) + annotate("text", x=114.8, y=38, label="● 低（预算）", color= "#014D64", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 下面是关于人均GDP增速与各县公共预算收入增速之间的关系： 123456789101112131415161718192021222324252627CairoPNG(file="DistrictPerGDPGrowth&amp;BudgetGrodth.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPScale),shape=21,fill="transparent",col="#014D64")+ geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=BudgetScale),shape=21,fill="#C72E29",col="transparent",alpha=.6)+ scale_size(range=c(1,12),guide=FALSE)+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP增速&amp;公共预算收入增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ annotate("text", x=114.8, y=38.3, label="○ GDP（增速）", color= "#014D64", size=6) + annotate("text", x=114.8, y=38, label="● 预算（预算）", color= "#C72E29", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上过程确实有些烧脑，大篇幅的代码，可以就是代码驱动的可视化，让数据呈现更为直观，数据可视化本就服务于数据呈现，无助于数据呈现的可视化相当于数据灾难。 本篇算是学习R以来比较完善的一篇以实战为目的的案例练习，虽然写的有些杂乱，但是过程还是学习了很东西，补了很多平时遗忘的漏洞。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emoji表情可视化北京历史天气]]></title>
    <url>%2F2017%2F05%2F23%2Femoji%E8%A1%A8%E6%83%85%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%97%E4%BA%AC%E5%8E%86%E5%8F%B2%E5%A4%A9%E6%B0%94%2F</url>
    <content type="text"><![CDATA[数据抓取：加载包1234567891011121314library(RCurl)library(XML)library(dplyr)library(ggplot2)library(stringr)library(rvest)library(lubridate)library("DT")library(openair)library(ggplot2)library(scales)library(showtext)library(grid)library(Cairo) 用更加优雅的方式加载包：1234567all.pcg&lt;-c("RCurl","XML","dplyr","ggplot2","stringr","rvest","lubridate","DT","scales","showtext","grid","Cairo") req.pcg &lt;- function(pcg)&#123; new &lt;- pcg[!(pcg %in% installed.packages()[, "Package"])] if (length(new)) install.packages(new, dependencies = T) sapply(req.pcg, require, ch = T) &#125; req.pcg(all.pcg) 构建历史天气数据网页链接：1234year&lt;-2014:2016month&lt;-sprintf("%02d",1:12)url&lt;- paste("https://www.aqistudy.cn/historydata/daydata.php?city=北京&amp;month=",expand.grid(year,month)$Var1,expand.grid(year,month)$Var2,sep="") 以上过程构造了北京市2014~2016年三整年的历史空气质量数据： 测试单段代码： 12345678910111213先写完一个看下具体情况:tbls&lt;-read_html(url[1],encoding="utf-8")%&gt;%html_table(.,header=TRUE,trim=TRUE);tbls&lt;-tbls[[1]]构建循环下载函数：mytable&lt;-data.frame()for (i in url)&#123;Sys.sleep(sample(1:5,1))fun&lt;-function(m)&#123;table&lt;-read_html(m,encoding="utf-8")%&gt;%html_table(.,header=TRUE,trim=TRUE)table&lt;-table[[1]]&#125;mytable&lt;-rbind(mytable,fun(i))&#125; 数据清洗与处理：预览一下以上数据结构：1234567dim(mytable)[1] 1096 11attributes(mytable)$names [1] "日期" "AQI" "范围" "质量等级" "PM2.5" "PM10" "SO2" [8] "CO" "NO2" "O3" "排名" 使用DT表格预览数据集：datatable(mytable) 1mytable&lt;-read.csv("beijingtianqi.csv",stringsAsFactors=FALSE,check.names=FALSE) 1234567891011121314#查看数据结构和变量属性是否符合分析需要：str(mytable)'data.frame': 1096 obs. of 11 variables: $ 日期 : chr "2014-01-01" "2014-01-02" "2014-01-03" "2014-01-04" ... $ AQI : int 87 119 81 151 121 181 144 29 44 86 ... $ 范围 : chr "76~99" "80~218" "38~202" "87~229" ... $ 质量等级: chr "良" "轻度污染" "良" "中度污染" ... $ PM2.5 : num 45 111.4 46.5 114.4 90.5 ... $ PM10 : num 111.3 168.5 97.7 147 117.5 ... $ SO2 : num 27.7 69.3 29 40 35.9 46.3 34.4 13 19.3 53.2 ... $ CO : num 1.5 3.43 1.31 2.82 2.31 ... $ NO2 : num 61.9 93.1 52 75.4 67 68.2 59.8 21.1 34.5 70.5 ... $ O3 : int 64 17 65 10 57 11 55 59 65 28 ... $ 排名 : int 32 66 41 112 67 104 85 9 25 58 ... 定义日期变量格式： 1234567891011mytable$日期&lt;-as.Date(mytable$日期)names(mytable)[c(1,3,4,11)]&lt;-c("date","Range","Level","Order")mytable$Year&lt;-year(mytable$date)breaks&lt;-c(0,50,100,150,200,300,500)label&lt;-c("excellent","good","Mild pollution","moderate pollution","heavy pollution ","serious pollution")filter(mytable,Year==2014)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2014)filter(mytable,Year==2015)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2015)filter(mytable,Year==2016)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2016) 可视化阶段接下来让我们疯狂一把，将北京三年的空气质量指标AQI用一幅图形尽数呈现。 数据整体与备份：12345mydata1&lt;-mytablewrite.table (mytable,"beijingtianqi.csv",sep=",",row.names=FALSE)mydata11&lt;-mydata1[c("date","AQI","Year")]myasst&lt;-mydata11[mydata11$date %in% as.Date(c("2014-01-01","2015-01-01","2016-01-01")),]mydata11&lt;-rbind(mydata11,myasst) 因为作图需要，2016年是闰年，2月有29天，14、15年均为28天，会导致最终数据不等长，影响之后的图表制作过程，这里暂且将其去除。1234567mydata11&lt;-arrange(mydata11,Year,date)mydata11&lt;-mydata11[mydata11$date!="2016-02-29",]mydata11$Month&lt;-month(mydata11$date)mydata11$Monthdata&lt;--5mydata11$Monthjo&lt;-ifelse(mydata11$Month%%2==0,"A","B")circlemonth&lt;-seq(0,180,length=17)circlebj&lt;-rep(c(-circlemonth[1:3],rev(circlemonth[1:3])),2) 12345678910111213141516mydata11$ID&lt;-rep(seq(from=0,to=365),3)mydata11$Year&lt;-factor(mydata11$Year,order=T)mydata11$Asst&lt;-5mydata11$Asst[mydata11$Year==2015]&lt;-10mydata11$Asst[mydata11$Year==2016]&lt;-15mydata11A&lt;-mydata11[mydata11$Year==2014&amp;mydata11$Monthjo=="A",]mydata11B&lt;-mydata11[mydata11$Year==2014&amp;mydata11$Monthjo=="B",]mydata11$Quarter&lt;-quarter(mydata11$date)mydata11$Quarterdata&lt;-20mydata11C&lt;-mydata11%&gt;%filter(mydata11$Year==2014)%&gt;%filter(Quarter %in% c(1,3)) mydata11D&lt;-mydata11%&gt;%filter(mydata11$Year==2014)%&gt;%filter(Quarter %in% c(2,4)) circlequarter&lt;-seq(45,315,length=4)circleqd&lt;-rep(c(-circlequarter[1],circlequarter[1]),2)mydata11$FADD&lt;-cut(mydata11$AQI,breaks=c(0,50,100,150,200,300,500),labels=c("0~50","51~100","101~150","151~200","201~300","301~500"),order=T) 瓦片图可视化历史天气1234567891011121314151617181920212223242526272829#作图方法1：（简便方法，但效果不太好调整）CairoPNG(file="ECOCirclejj.png",width=1488,height=996)showtext.begin()ggplot(data=mydata11)+geom_tile(aes(ID,Year,fill=FADD))+coord_polar(theta="x")+expand_limits(ylim=c(-4,4))+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",x="",y="",fill="")+theme(axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1, legend.position=c(1,0.95),legend.justification=c(1,1),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"))showtext.end()dev.off() 光栅图可视化历史天气1234567891011121314151617181920212223242526272829#这里使用geom_raster()图层进行映射（不支持极坐标转换）breaks&lt;-aggregate(ID~Month,data=mydata11[mydata11$Year==2014,],FUN=median)CairoPNG(file="ECOCirclejjj.png",width=1200,height=600)showtext.begin()ggplot(data=mydata11)+geom_raster(aes(ID,Year,fill=FADD))+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+scale_x_continuous(breaks=breaks[,2],labels=paste0(1:12,"月"))+labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",fill="")+theme(text=element_text(family="myfont"),axis.text=element_text(size=20),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1,legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"))showtext.end()dev.off() 构造多重柱形图模拟北京历史天气可视化123456789101112131415161718192021222324252627282930313233343536373839404142#作图方法2：（虽然代码多但是调整相对自由）setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170404")font.add("myfont","msyhl.ttc")CairoPNG(file="ECOCircle.png",width=1488,height=996)showtext.begin()ggplot()+geom_bar(data=mydata11A,aes(x=ID,y=Monthdata),stat="identity",width=1,fill="#ECEDD1",col="#ECEDD1")+geom_bar(data=mydata11B,aes(x=ID,y=Monthdata),stat="identity",width=1,fill="#DFE0B1",col="#DFE0B1")+geom_bar(data=mydata11C,aes(x=ID,y=Quarterdata),stat="identity",width=1,fill="#BDBDBD",col="#BDBDBD")+geom_bar(data=mydata11D,aes(x=ID,y=Quarterdata),stat="identity",width=1,fill="#D4D2D3",col="#D4D2D3")+geom_bar(data=mydata11[mydata11$Year==2016,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+geom_bar(data=mydata11[mydata11$Year==2015,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+geom_bar(data=mydata11[mydata11$Year==2014,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+coord_polar(theta="x")+ylim(-20,20)+guides(colour=guide_legend(reverse=TRUE))+geom_text(data=NULL,aes(x=circlemonth,y=-2.5,label=paste0(1:12,"月"),angle=circlebj),family="myfont",size=7,hjust=0.5,vjust=.5)+geom_text(data=NULL,aes(x=circlequarter,y=17.5,label=paste0(c("一","二","三","四"),"季度"),angle=circleqd),family="myfont",size=7,hjust=0.5,vjust=.5)+annotate("text",x=0,y=-15,label="北京",size=25,hjust=.5,vjust=1,family="myfont") + labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",x="",y="",fill="")+theme(text=element_text(family="myfont"),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1, legend.position=c(1,0),legend.justification=c(1,0),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"),)showtext.end()dev.off() 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国字体地图]]></title>
    <url>%2F2017%2F05%2F22%2F%E4%B8%AD%E5%9B%BD%E5%AD%97%E4%BD%93%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[数据获取加载包12345678library(rvest) library(dplyr) library(stringr) library(showtext) library(Cairo) library(RColorBrewer) library(ggplot2) library(grid) 由于本文用到了一款中国行政区划的字体地图——EyesAsia，每一个行政区都是以一个字母代替的，所以需要获取该地图字体对应的索引表。该字体的开源项目主页为：EyesAsia与此对应的，还有一款也很fashion的字体地图（StateFace），是美帝的行政区划字体地图。项目主页在这里:stateface 一共43个编号，以下是提取过程，因为是一个table，所以可以直接使用rvest非常便捷的表格抓取工具。 抓取数据12345678url&lt;-"https://github.com/haoyuns/EyesAsia"table&lt;-read_html(url,encoding="utf-8")%&gt;%html_table()%&gt;%.[[2]]table1&lt;-table[table$lowercase!="",]table2&lt;-table[table$lowercase=="",]%&gt;%.[,2:3]table11&lt;-table1[,1:2]%&gt;%rename(case=lowercase)table12&lt;-table1[,3:4]%&gt;%rename(case=UPPERCASE)table13&lt;-table2%&gt;%rename(case=Content,Content=UPPERCASE)tabledata&lt;-rbind(table11,table12,table13) 筛选出中国的34个省级行政区12345678910tabledata$Cname&lt;-str_extract(tabledata$Content,"[\\u4e00-\\u9fa5]+")tabledata$Ename&lt;-str_extract(tabledata$Content,"[^\\u4e00-\\u9fa5]+")%&gt;%str_trim(side=c("right"))tabledata&lt;-tabledata[,-2]setwd("D:/R/File")write.table(tabledata,"EyesAsia.csv",sep=",",row.names=FALSE)word&lt;-c("日本","蒙古","朝鲜","韩国","青海湖","鄱阳湖","洞庭湖","太湖","洪泽湖")mymapdata&lt;-tabledatamymapdata$m&lt;-mymapdata$Cname %in% wordmymapdata&lt;-mymapdata%&gt;%filter(m==FALSE)%&gt;%.[,1:3]write.table(mymapdata,"EyesAsia.csv",sep=",",row.names=FALSE) 作图主要过程分为三部分：步骤一：外围字体圆环图：12345678#导入数据：#生成一个虚拟指标，并分割为有序分段因子变量。mymapdata&lt;-read.csv("EyesAsia.csv",stringsAsFactors=FALSE,check.names=FALSE)mymapdata&lt;-transform(mymapdata,scale=5,peform=runif(34,20,50))mymapdata$scale&lt;-as.numeric(mymapdata$scale)mymapdata$group&lt;-cut(mymapdata$peform,breaks=c(20,26,32,38,44,50),levels=,labels=c("20~26","26~32","32~38","38~44","44~50"),order=TRUE)mymapdata&lt;-arrange(mymapdata,desc(peform));mymapdata$order=1:nrow(mymapdata)mymapdata$order&lt;-as.numeric(mymapdata$order) 作图函数： 123456789101112131415CairoPNG("chineserador.png",900,900)showtext.begin()ggplot(mymapdata,aes(order,scale,label=case))+ylim(-6,6)+coord_polar(theta="x",start=0)+geom_text(aes(colour=group),family="myfont",size=20)+scale_colour_brewer(palette="Greens",guide=FALSE)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text=element_blank(),)showtext.end()dev.off() 制作中心中国地图其实针对中国省级地图素材而言，大部分shp格式的地图都是可以放心使用的，但是为了练习自己对于json数据的操控能力（毕竟是非常流行的web端数据存储格式），这里我硬生生的抽取了json格式的中国地图数据，所以以下代码看着有些不适，请大家谨慎观看！ 载入包： 12345library(plyr) library(maptools) library(scales) library(jsonlite)library(jsonview) 导入json格式中国地图： 123setwd("D:/R/mapdata/State/")china_data&lt;-fromJSON("china.json")json_tree_view(china_data) 最新发现的可以自动化解析并渲染json树结构的包，它不仅可以渲染json数据，也可以渲染xml、html格式的树结构： 抽取行政区里列表信息： 12345china_city_data&lt;-china_data$features$properties[,c(1,3)]names(china_city_data)[2]&lt;-"region"china_city_data$ID&lt;-1:nrow(china_city_data)china_city_data$size&lt;-runif(34,900,1150)china_city_data$group&lt;-cut(china_city_data$size,breaks=c(900,950,1000,1050,1100,1150),labels=c("900~950","951~1000","1001~1050","1051~1100","1101~1150"),order=TRUE) 抽取行政区划边界经纬度多边形数据：（最艰难的部分） 1china_map_data&lt;-china_data$features$geometry$coordinates 还时上次讲到的困难，中国某些省份辖区内有独立于主区域的分离区域（比如河北的廊坊，以及山东、及南部沿海多岛屿的省份）。 今天这个json素材要比上次提取的那个安徽省的素材更加复杂，具体步骤也不详细讲解了，看不太懂就直接略过吧，反正代码写的也比较烂，基本写不出那种可以通用的代码！ 1234567891011num&lt;-c();id&lt;-c()for( i in 1:length(china_map_data))&#123;citymapdata&lt;-china_map_data[[i]]num[i]&lt;-length(citymapdata)id&lt;-1:ia&lt;-data.frame(id,num)&#125;a[a$num&lt;=2,] id num12 12 214 14 2 12dim(china_map_data[[14]][[1]])=c(length(china_map_data[[14]][[1]])/2,2)dim(china_map_data[[14]][[2]])=c(length(china_map_data[[14]][[2]])/2,2) 12345678910111213141516171819202122mapdata1&lt;-data.frame()mapdata2&lt;-data.frame()for( i in 1:length(china_map_data))&#123; citymapdata&lt;-china_map_data[[i]] if (length(citymapdata)&lt;=2)&#123; for(m in 1:length(citymapdata))&#123; citymapdata1&lt;-data.frame(citymapdata[[m]])%&gt;%dplyr::rename(long=X1,lat=X2) citymapdata1$ID&lt;-i citymapdata1$group&lt;-as.numeric(paste0(i,".",m,1)) citymapdata1$order&lt;-1:nrow(citymapdata1) mapdata1&lt;-rbind(mapdata1,citymapdata1,citymapdata2) &#125; &#125;else&#123; dim(citymapdata)=c(length(citymapdata)/2,2) citymapdata2&lt;-data.frame(citymapdata)%&gt;%dplyr::rename(long=X1,lat=X2) citymapdata2$ID&lt;-i citymapdata2$group&lt;-as.numeric(paste0(i,".",1)) citymapdata2$order&lt;-1:nrow(citymapdata2) mapdata2&lt;-rbind(mapdata2,citymapdata2) &#125; mydatanew&lt;-rbind(mapdata1,mapdata2)&#125; 至此经纬度的边界点信息也有了，接下来就可可以映射地图了： 1mydatanew&lt;-dplyr::arrange(mydatanew,ID,order) 合并经纬度边界点信息和行政区划信息。 1mydatanew_map_data&lt;-merge(mydatanew,china_city_data[,c(2,3,4)]) 预览地图素材是否可用： 123456789ggplot(mydatanew_map_data,aes(long,lat,group=group))+geom_polygon(col="white",fill="grey")+coord_map("polyconic")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank() ) 预览效果图： 拼接两幅地图。第一款字体时最初提到的地图字体（需要事先下载哦）；第二款就是微软雅黑喽，渲染省份标签用的。 12font.add("myfont","EyesAsia-Regular.otf")font.add("myyh","msyhl.ttc") 为了更加舒适的看圆环上的省份标签，这里给标签添加角度偏移量。 123circle&lt;-seq(0,95,length=9)circleALL&lt;-rep(c(-circle,rev(circle[2:9])),2)mymapdata$circle&lt;-circleALL 鉴于ggplot极坐标下的首尾不衔接的缺陷，这里再查补一个缺失值。 1234mymapdata&lt;-arrange(mymapdata,order)mapx&lt;-mymapdata[mymapdata$order==34,]mapx$order&lt;-35;mapx$Cname=NA;mapx$case=NAmymapdata1&lt;-rbind(mymapdata,mapx) 所有的步骤都弄完之后，接下来将两幅图表存为对象。 123456789101112p1&lt;-ggplot(mymapdata1,aes(x=order,y=scale))+ylim(-6,7.5)+coord_polar(theta="x",start=0)+geom_text(aes(colour=group,label=case),family="myfont",size=15)+geom_text(aes(y=scale+2,angle=circle,label=Cname),family="myyh",size=6,vjust=0.5,hjust=.5)+scale_colour_brewer(palette="Greens",guide=FALSE)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text=element_blank(),) 图表效果大致是这样的： 12345678910111213p2&lt;-ggplot(china_city_data,aes(map_id=region,fill=group))+geom_map(map=mydatanew_map_data,colour="white")+expand_limits(x=mydatanew_map_data$long,y=mydatanew_map_data$lat)+scale_fill_brewer(palette="YlOrRd",guide=FALSE)+coord_map("polyconic")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.background=element_rect(I(0),linetype=0) ) 图表效果大致是这样的： 拼接： 12345678CairoPNG("chineserador.png",1000,1000)showtext.begin()vs &lt;- viewport(width=0.95,height=0.95,x=0.5,y=0.5) print(p1,vp=vs) vs &lt;- viewport(width=0.75,height=0.8,x=0.5,y=0.5) print(p2,vp=vs) showtext.end()dev.off() 以下是最终的结果： OK了，做完收工~ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang） qq交流群：[魔方学院]298236508 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
        <tag>R语言</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
</search>
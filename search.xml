<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[R预设配色系统及自定义色板]]></title>
    <url>%2F2017%2F06%2F11%2FR%E9%A2%84%E8%AE%BE%E9%85%8D%E8%89%B2%E7%B3%BB%E7%BB%9F%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E8%89%B2%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[关于配色的话题，已经聊过很多次了，但是就像是之前说过的，对于图形可视化而言，配色决定着作品的“颜值”,谈再多次都不嫌多。 今天是R语言配色系统综合篇的上篇（当然是有下篇啦，下篇将会教你如何优雅的提取各种高大上配色主题，作为己用。经过几天的研究，小魔方已经发现了如果将各种高质量配色包中的主题色板通过函数的形式在高级绘图系统和低级绘图系统之间相互共享）。 今天的内容主要包含两部分： R预置色彩系统的色板 R语言自定义颜色调用 其实在R语言的色彩系统中，有两大类颜色系统，一类是预设的调色盘，通过调色盘，你可以获取任意数量的色彩组合。 R预置色彩系统的色板R语言的预设调色板一共有五个： rainbow heat.colors terrain.colors topo.colors cm.colors 这五个调色板就像是一个大染缸一样，排列着无数的色彩组合。取色也很简单，就是使用预设色盘名称+色彩数据即可： 1234rainbow(10) [1] "#FF0000FF" "#FF9900FF" "#CCFF00FF" "#33FF00FF" "#00FF66FF" "#00FFFFFF" [7] "#0066FFFF" "#3300FFFF" "#CC00FFFF" "#FF0099FF" 以上既是通过名称+数量的方式获取的一组10个颜色，同样我们可以通过scales包中show_col函数查看具体的颜色效果： 12library(scales)show_col(rainbow(10),labels=T)#labels控制是否显示HEX格式的色值信息. 接下来我用一个版面矩阵将五个色盘颜色全部显示出来： 12345678par(mfrow=c(1,5),mar=c(0.5,0.5,2,0.5),xaxs="i",yaxs="i")n&lt;-1000barplot(rep(1,times=n),col=rainbow(n),border=rainbow(n),horiz=T,axes=F,main="Rainbow Color")barplot(rep(1,times=n),col=heat.colors(n),border=heat.colors(n),horiz=T,axes=F,main="Heat.Colors")barplot(rep(1,times=n),col=terrain.colors(n),border=terrain.colors(n),horiz=T,axes=F,main="Terrain.Colors")barplot(rep(1,times=n),col=topo.colors(n),border=topo.colors(n),horiz=T,axes=F,main="Topo.Colors")barplot(rep(1,times=n),col=cm.colors(n),border=cm.colors(n),horiz=T,axes=F,main="Cm.Colors")dev.off()#关闭上次的绘图面板 运行以上代码之后，你会看到绘图面板上出现的五个色板色彩过渡效果，第一个rainbow是运用最为频繁的的色板，也是我们所熟知的彩虹七色，其余四个是截取rainbow色斑的某一段暖色系、冷色系或者单色做的渐变过渡。 五种颜色调用方法非常简单，名称+数量就可以。而且你也可以通过文本函数将不同色盘中截取的颜色相互混合使用。 123456par(mfrow=c(2,1),mar=c(0.5,0.5,2,0.5),xaxs="i",yaxs="i")a&lt;-heat.colors(10)b&lt;-topo.colors(10)barplot(rep(1,times=10),col=b,border=b,main="Topo.Colors10",axes=F)barplot(rep(1,times=10),col=a,border=a,main="Heat.Colors10",axes=F)dev.off() 12c&lt;-c(a[c(1,3,5,7,9)],b[c(2,4,6,8,10)])barplot(rep(1,times=10),col=c,border=c,axes=F,main="topo&amp;heat 10");box() 以上通过将两个色板提取出来的颜色进行组合，创造出了新的色彩组合。 R语言自定义颜色调用接下来介绍R语言的第二大色彩系统，自定义颜色。 R语言系统中内置了657中带有自定义名称的颜色（就是我们平时所熟知的blue、red、grey等）。 通过colors()函数可以查看这657种颜色的色值及名称类别信息： 1234head(colors(),10) [1] "white" "aliceblue" "antiquewhite" "antiquewhite1" [5] "antiquewhite2" "antiquewhite3" "antiquewhite4" "aquamarine" [9] "aquamarine1" "aquamarine2" 12library(plyr)count(cl) count函数列出了所有657中颜色名称。 使用show_col函数可以查看所有657中颜色的图形显示效果 show_col(cl,labels=F)#因为颜色数量太多，使用labels=F参数略去颜色色值信息。 使用colorRampPalette函数可以自由调用任何一种自定义颜色。 12colorRamp(colors, bias = 1, space = c("rgb", "Lab"), interpolate = c("linear", "spline"))colorRampPalette(colors, ...) color函数的介绍如上，具体的参数解释可以通过？colorRampPalette查看他的官方文档，这里我们直接取色。1234567891011par(mfrow=c(1,4),mar=c(0.5,0.5,2,0.5),xaxs="i", yaxs="i")n &lt;- 1000mycolors &lt;- colorRampPalette(c("red", "green"))(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c("blue", "yellow", "orange"))(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c( "white", "gold", "yellow", "brown"), bias=1.2)(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)mycolors &lt;- colorRampPalette(c("red","gold", "yellow", "grey","orange"), bias=1.2)(n)barplot(rep(1,times=n),col=mycolors,border=mycolors,horiz=T,axes=FALSE)dev.off() 除了这两大色彩系统系统之外，R语言也支持直接以色值（HEX）形式输入的颜色，只需使用c()函数生成色值组成的字符向量，R语言就可自动识别。 还有一些特殊用途的grey函数，hsv函数等等可以通过设定灰度或者色调、饱和度、亮度等等方式获取颜色使用，这些由于过于繁琐，这里就略去了，甘感兴趣的小盆友可以自己探索。 当然，这里还没有讲解到那些已经做得很成熟的主题配色包，比如ggthemes（专为ggplot2开发的主题包）、RColorbrewer（里面存放着大量高质量的配色方案）、以及ggtech（是一个科技主题的配色包，主要供ggplot函数调用）。 通过scales包中的brewer.col，我们可以提取出以上各包的配色主题，来用于我们的可视化图表中，不光是ggplot绘图系统，即便是在基础绘图系统（base::plot）中也是可以调用这些色彩方案的，好了这里先放个彩蛋，下期再见！ 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>图表配色</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>配色</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——极坐标变换与衍生图表类型]]></title>
    <url>%2F2017%2F06%2F11%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%9E%81%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%A1%8D%E7%94%9F%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[今天这篇内容会比较杂乱一点，因为会讲到ggplot函数中的一大类通过极坐标支持才能呈现出来的图表效果。 ggplot作图背后的图表哲学，没有给予饼图（以及衍生出的圆环图、玫瑰图等放射状图表类型）存在的空间（主要是该包的开发者个人的审美观，比较反感次坐标轴以及功能类型雷同的重复性图层函数，所以它宁可开发出分面图层原理也不愿意增加次坐标轴，不愿意为原本柱形图可以表达的图表形式再单独开发一种功能雷同的饼图函数）。 但是巧的是，在常见的三种坐标形式中，极坐标转换可以非常轻松的将常见的柱形图（条形图）、堆积柱形图通过只一句极坐标函数就神奇的转化为饼图、玫瑰图、圆环图等（不知道是有意为之还是偶然的巧合）。 饼图的实现原理：饼图需要借助柱形图结合极坐标进行转化： 12ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar() 当使用一个因子变量作为横轴，使用分类变量进行填充时，该柱形图变成了单条堆积柱形图。 接下来我们通过以上函数添加极坐标（注意极坐标的设定是如何影响最终的图表形式的） 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar(theta = "y") 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar(theta = "x") 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar()+coord_polar() 从做出的图表以及极坐标函数内的参数我们可以看出来，当参数指定为x时，最终柱形图的x轴会被指定为极坐标的x轴（圆周），而柱形图的y轴则会成为极坐标的y轴（半径）。当指定为y轴时，柱形图的y轴为成为极坐标的x轴（圆周），柱形图的x轴会成为极坐标的y轴（半径）。 同时极坐标状态下，饼图的半径是由柱形图（条形图）宽度决定的，以上图表中圆心有个空白，如果我们将柱形图柱形图宽度定义为1,则会成为正圆。 123ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar(width=1)+coord_polar(theta = "y") 极坐标系下图表元素控制：图中其他的元素控制方式与往常的柱形图做法一样： 去掉极坐标轴的轴刻度标签，去掉两个轴标题、更换配色： 123456789101112ggplot(diamonds,aes(x=factor(1),fill=cut))+geom_bar(width=1)+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank() )+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL)) 当有多个序列时：12ggplot(diamonds,aes(cut))+geom_bar(width=1) 通过极坐标转换可以实现圆环图、圆条图效果： 12345678ggplot(diamonds,aes(cut))+geom_bar(width=1,fill="steelblue",colour="white")+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.x = element_blank(), axis.title = element_blank()) 改变极坐标轴参数设置，可以模拟南丁格尔玫瑰图效果： 12345678910ggplot(diamonds,aes(cut))+geom_bar(width=0.95,fill="#3182BD")+coord_polar(theta = "x",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.y = element_blank(), axis.ticks= element_blank(), axis.title = element_blank())+ylim(c(-3000,22500)) 极坐标系下多序列图表：当然如果你使用的原始柱形图数据中添加了分类序列（也就是堆积柱形图），按照上面的方式可以制作更加复杂的圆环图、堆叠玫瑰图 12345678910ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "y",start=0)+theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text.x = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL)) 12345678910ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "x",start=0)+theme( axis.text.y = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL))+ylim(c(-2000,12000))+theme_bw() 尝试着用分面来解决多序列问题：1234567891011ggplot(diamonds,aes(x=color,fill=cut))+geom_bar(width=0.95,colour="white")+coord_polar(theta = "x",start=0)+theme( axis.text.y = element_blank(), axis.title = element_blank())+scale_fill_brewer(palette="Blues")+guides(fill=guide_legend(reverse=TRUE,title=NULL))+ylim(c(-2000,6000))+theme_bw()+facet_grid(.~cut) 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>极坐标</tag>
        <tag>饼图</tag>
        <tag>圆环图</tag>
        <tag>玫瑰图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言图表美化——巧用分面表达优化图表布局，做出堪比杂志级视觉体验的商务图表]]></title>
    <url>%2F2017%2F06%2F10%2FR%E8%AF%AD%E8%A8%80%E5%9B%BE%E8%A1%A8%E7%BE%8E%E5%8C%96%E2%80%94%E2%80%94%E5%B7%A7%E7%94%A8%E5%88%86%E9%9D%A2%E8%A1%A8%E8%BE%BE%E4%BC%98%E5%8C%96%E5%9B%BE%E8%A1%A8%E5%B8%83%E5%B1%80%EF%BC%8C%E5%81%9A%E5%87%BA%E5%A0%AA%E6%AF%94%E6%9D%82%E5%BF%97%E7%BA%A7%E8%A7%86%E8%A7%89%E4%BD%93%E9%AA%8C%E7%9A%84%E5%95%86%E5%8A%A1%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[图表的优化布局在Excel中一直都是个大难题，难在Excel软件固有的限制。 特别是在制作多序列多分类图表的时候，放在一个图中显得序列过于拥挤，影响视觉效果，做出分面表达又耗时费力，需要掌握诸多技巧，（版式设计呀、单元格锚定呀等等、照相机呀什么的）是在是有心无力。 但是像R语言这样依靠图形语法来控制的作图形式，却不存在这样的问题。 今天跟大家分享如何在R语言中巧用分面表达来优化多系列多分类图表的版式布局！ 其实这一篇在不久前曾经发过的，当时还处于摸索阶段，写的很粗糙，今天重发一遍，所有的代码和图表都是优化过的，不仔细观察，还真看不出来，仔细对比一下就能发现了！ 我是分割线~ 当数据序列比较多的时候，特别是超过四个以后，还用堆积柱形图（条形图）、或者簇状柱形图的话，图表必然会因为系列太多而受到挤压或者变形，整体就会不协调、不美观。 还有ggplot不支持次坐标轴功能，它的作图思维基本源于塔夫脱的可视化理念，而且作者个人的审美也比较抵触次坐标轴，但是他留给大家解决多序列图表的方案是——图形分面 以下仅以常用的柱形图、条形图为例进行讲解（所有的图形对象几乎都支持分面） 构造作图数据集：123456data&lt;-data.frame(Name = c("苹果","谷歌","脸书","亚马逊","腾讯"),Conpany = c("Apple","Google","Facebook","Amozon","Tencent"),Sale2013 = c(5000,3500,2300,2100,3100),Sale2014 = c(5050,3800,2900,2500,3300),Sale2015 = c(5050,3800,2900,2500,3300),Sale2016 = c(5050,3800,2900,2500,3300)) 数据重塑（宽转长）：1mydata&lt;-melt(mydata,id.vars="Conpany",variable.name="Year",value.name="Sale") 作图函数：默认输出图表：12ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge") 默认图表的配色确实挺难看的，这里我使用华尔街日报、经济学人的主题、及配色模板进行适度美化。 华尔街日报：1234567ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank()) 经济学人1234567ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank()) 以上是我们使用传统的方法通过将颜色映射到不同类别的年度收入变量上，达到了区分效果，可是这样终究不是办法，五个序列实在是有点多，已经让然有点儿眼花缭乱了，如果有8个序列、10个序列呢，那又该怎么办呢~ 下面跟大家分享其中一种比较有效的解决办法——通过分面表达解决多序列图表呈现问题 横排分面：柱形分面（横排）：12345678ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank(),legend.position='none')+facet_grid(.~Year) 123456789101112ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+facet_grid(.~Year)+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.x=element_text(size=7.5) ) 条形分面（横排）：123456789101112131415161718192021ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+facet_grid(.~Year)+coord_flip()+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=10), axis.text.x=element_text(size=7.5), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.5,'cm'), axis.line.y=element_line(), axis.line.x=element_blank(), panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank() ) 12345678910111213141516171819202122ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+facet_grid(.~Year)+coord_flip()+scale_fill_economist()+theme(axis.ticks.length=unit(0.5,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=10), axis.text.x=element_text(size=7.5), axis.line.x=element_blank(), axis.line.y=element_line(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.5,'cm'), panel.grid.major.x=element_line(linetype="solid",colour="white",size=1.1), panel.grid.major.y=element_blank() ) 竖排分面：柱形分面（竖排）： 左12345678910111213141516171819202122232425p1&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.3,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme(axis.title = element_blank(),legend.position='none')+facet_grid(Year~.)右p2&lt;-ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_economist(base_size=14)+facet_grid(Year~.)+scale_fill_economist()+theme(axis.ticks.length=unit(0.3,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', axis.text.y=element_text(size=7.5), axis.text.x=element_text(size=7.5,face="bold"), strip.text=element_text(size=10) ) 使用multiplot函数进行版面合并：123require(grid)library("Rmisc")multiplot(p1,p2,cols=2) 条形分面（竖排）：123456789101112131415161718192021ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+theme_wsj()+facet_grid(Year~.)+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), ) 12345678910111213141516171819202122ggplot(mydata,aes(Conpany,Sale,fill=Year))+geom_bar(stat="identity",position="dodge")+facet_grid(Year~.)+coord_flip()+theme_economist(base_size=14)+scale_fill_economist()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype=1,colour="white",size=1.1), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.2,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), strip.text=element_text(size=10), axis.text.y=element_text(size=10) ) 关于簇状、分面图表数据标签问题：簇状图数据标签处理： 12345678910111213ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position =position_dodge(0.9),fontface="bold", vjust =1,colour="white",size=2)+theme( axis.title = element_blank(), axis.ticks.length=unit(0.3,'cm'), axis.text.x=element_text(size=10), axis.text.y=element_text(size=10), ) 横向分面柱图数据标签问题：12345678910111213141516ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+facet_grid(.~Year)+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position =position_dodge(0.9),fontface="bold", vjust =1,colour="white",size=2)+theme( axis.title = element_blank(), legend.position='none', axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_line(), axis.text.x=element_text(size=5), axis.text.y=element_text(size=7.5) ) 横向分面条形图数据标签问题： 1234567891011121314151617181920ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+coord_flip()+facet_grid(.~Year)+theme_wsj()+scale_fill_wsj("rgby", "")+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position = position_dodge(0.9),hjust=1.2,vjust=0.5,colour="white",size=4)+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8), axis.text.y=element_text(size=10) ) 竖向分面柱形图数据标签问题： 竖向分面条形图数据标签问题： 1234567891011121314151617181920ggplot(mydata,aes(Conpany,Sale,fill=Year,label =Sale))+geom_bar(stat="identity",position="dodge")+theme_wsj()+scale_fill_wsj("rgby", "")+facet_grid(Year~.)+coord_flip()+guides(fill=guide_legend(title=NULL))+ggtitle("The Financial Performance of Five Giant")+geom_text(aes(y = Sale + 0.05), position = position_dodge(0.9),hjust=1.1,colour="white",size=3.5)+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.25,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.y=element_text(size=10), axis.text.x=element_text(size=10) ) 以上是本人在学习ggplot函数过程中的一些练习案例，当然要是仔细琢磨，里面的瑕疵还不少，改进空间还有很多，以后有机会慢慢跟大家补充，过几天再跟大家继续分享关于ggplot更加精深的用法技巧！ 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leaflet在线地图进阶宝典——高级交互特性]]></title>
    <url>%2F2017%2F06%2F09%2Fleaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E4%BA%A4%E4%BA%92%E7%89%B9%E6%80%A7(%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C)%2F</url>
    <content type="text"><![CDATA[本文针对leaflet的高级交互特性进行展开，主要涉及到leaflet中等值线地图的鼠标悬浮效果及点击效果的动态呈现。这也是leaflet的天然HTML属性所具有的强大优势。 在制作高质量在线数据地图的项目中，leaflet结合扩展的HTML性能，可以呈现非常人性化的动态效果，如能结合css、shiny等装饰器和交互框架，几乎可以胜任常见的动态交互网站的制作。 加载包：12345library("sp")library("leaflet")options(stringsAsFactors = FALSE,check.names = FALSE)#锁定目录：setwd("D:/R/mapdata/State") 导入美国地图素材（含数据） 1states&lt;-geojsonio::geojson_read("us-states.geojson", what = "sp") ###案例1：一个简单的开始：（引用mapbox地图）123456m &lt;- leaflet(states) %&gt;% setView(-96, 37.8, 4) %&gt;% #设置呈现的视觉中心 addProviderTiles("MapBox", options = providerTileOptions( id = "mapbox.light", #添加地图图层 accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))m %&gt;% addPolygons() #地图呈现 案例2：分箱及设置色盘：12bins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)pal &lt;- colorBin("YlOrRd", domain = states$density, bins = bins) 1234567m %&gt;% addPolygons( fillColor = ~pal(density), #显式声明颜色映射变量 weight = 2, #线宽 opacity = 1, #透明度 color = "white", #颜色 dashArray = "3", fillOpacity = 0.7) #填充透明度 12345678910111213m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( #设置高亮属性 weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE)) 设置鼠标点击事件：1labels &lt;- sprintf("&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g people / mi&lt;sup&gt;2&lt;/sup&gt;",states$name,states$density) %&gt;% lapply(htmltools::HTML) #转化为HTML格式标签 1234567891011121314151617181920m &lt;-m %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE ), label = labels, labelOptions = labelOptions( #标签选项设置（参数类别HTML属性） style=list("font-weight"="normal",padding="3px 8px"), textsize="15px", direction="auto") );m 增加图例：12m %&gt;% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL, position = "bottomright") 以下是该案例的完整代码：From http://leafletjs.com/examples/choropleth/us-states.js（数据源，js格式记得保存为geojson格式） 123456789101112131415161718192021222324252627282930313233bins &lt;- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)pal &lt;- colorBin("YlOrRd", domain = states$density, bins = bins)labels &lt;- sprintf( "&lt;strong&gt;%s&lt;/strong&gt;&lt;br/&gt;%g people / mi&lt;sup&gt;2&lt;/sup&gt;", states$name, states$density) %&gt;% lapply(htmltools::HTML)leaflet(states) %&gt;% setView(-96, 37.8, 4) %&gt;% addProviderTiles("MapBox", options = providerTileOptions( id = "mapbox.light", accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN'))) %&gt;% addPolygons( fillColor = ~pal(density), weight = 2, opacity = 1, color = "white", dashArray = "3", fillOpacity = 0.7, highlight = highlightOptions( weight = 5, color = "#666", dashArray = "", fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions( style = list("font-weight" = "normal", padding = "3px 8px"), textsize = "15px", direction = "auto")) %&gt;% addLegend(pal = pal, values = ~density, opacity = 0.7, title = NULL, position = "bottomright") 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmapH(中心热度图)]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmapH-%E4%B8%AD%E5%BF%83%E7%83%AD%E5%BA%A6%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天是REmap系列的最后一篇——REmapH函数。 这个函数的特色是可以做中心辐射的热力图，这种热力图在气象、人口密度、海拔测绘领域有诸多运用，当然也可以上当用在商务场合——特别是跟地理信息有关的数据呈现方面。 加载包：12library("baidumap")library("REmap") 语法简介：123456789?remapHremapH(data, maptype = 'china', theme = get_theme("Dark"), blurSize = 30, color = c('blue', 'cyan', 'lime', 'yellow', 'red'), minAlpha = 0.05, opacity = 1, ...) data为要传入的数据，数据为三列，第一列为lon(经度)，第二列为lat(维度)，第三列为prob(密度/概率)； maptype为要绘制的地图类型，可选有：”china”，”world”或中国各省份名字； theme为绘制的地图主题类型，可由get_theme函数传入； blurSize为热力效果的泛化范围，可调整热力点中心的扩散程度； color为热力的渐变颜色； minAlpha为热力点的展示阈值，对应data中的prob列，作图时各点密度会对比minAlpha，以凸显不同密度所展示的不同热力分布； opacity为透明度，调整热力图的透明度。 12345678910get_theme(theme = "Dark", lineColor = "Random", backgroundColor = "#1b1b1b", titleColor = "#fff", borderColor = "rgba(100,149,237,1)", regionColor = "#1b1b1b", labelShow = T, pointShow = F, pointColor = "gold" ) theme为主题，设置该参数后无需设置get_theme里其他参数，可选有”Dark”、”Sky”、”blue”和”none”四种 lineColoe为线条颜色，对应为map图里面迁徙线条的颜色 backgroundColor为图片的背景色，支持16进制颜色输入，也支持rgb()函数和rgba() titleColor为标题的颜色，设置同上 borderColor为地图中各省、市边界颜色 regionColor为地图中各区域颜色，各省份和市 labelShow为是否展示各省、市名字，设置为True时展示 pointShow为是否展示各省会城市所在点，设置为True时展示 pointColor设置上述点的颜色 接下来首先通过两个案例进行讲解： 案例1：1options(remap.js.web=T) 这里有一个包含经纬度信息及对应密度的数据集，通过该数据集我们可以看到看到REmapH函数制作热力图的大致效果：1data&lt;- read.csv(file="D:\\R\\map\\MoveChart\\cityvaluetop10.csv",header=T) 数据结构如下：12345678910111213head(data) lon lat prob1 114.3948 23.40800 0.852 115.3948 24.40800 0.853 114.3948 23.40800 0.854 113.3948 23.40800 0.855 114.7307 27.69586 0.806 110.5066 28.69586 0.80'data.frame': 48 obs. of 3 variables: $ lon : num 114 115 114 113 115 ... $ lat : num 23.4 24.4 23.4 23.4 27.7 ... $ prob: num 0.85 0.85 0.85 0.85 0.8 0.8 0.8 0.8 0.75 0.75 ... 123456789map_out&lt;-remapH(data, maptype = 'china', theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out) 接下来制作辽宁省省域热力图数据集： 案例2：首先使用mapNames函数获取辽宁省市级行政单位：1234city_ln&lt;-mapNames("liaoning") [1] "大连市" "朝阳市" "丹东市" "铁岭市" "沈阳市" "抚顺市" "葫芦岛市" "阜新市" "锦州市" [10] "鞍山市" "本溪市" "营口市" "辽阳市" "盘锦市" 获取各市级行政单位经纬度信息：123456789101112131415161718city_list&lt;-get_geo_position(city_ln)&gt; city_list lon lat city1 121.6214 38.91934 大连市2 120.4573 41.57949 朝阳市3 124.3626 40.00569 丹东市4 123.8488 42.29257 铁岭市5 123.4390 41.81134 沈阳市6 123.9636 41.88608 抚顺市7 120.8434 40.71736 葫芦岛市8 121.6765 42.02798 阜新市9 121.1336 41.10087 锦州市10 123.0010 41.11412 鞍山市11 123.7735 41.29985 本溪市12 122.2415 40.67256 营口市13 123.2437 41.27445 辽阳市14 122.0773 41.12594 盘锦市 生成一列密度数据：12point&lt;-round(runif(14,min=0.3,max=0.95),2) [1] 0.89 0.82 0.91 0.87 0.90 0.90 0.85 0.89 0.87 0.94 0.90 0.85 0.88 0.88 合成数据框格式的热力图作图数据：1234567891011121314151617newdata&lt;-data.frame(city_list[,1:2],point) lon lat point1 121.6214 38.91934 0.892 120.4573 41.57949 0.823 124.3626 40.00569 0.914 123.8488 42.29257 0.875 123.4390 41.81134 0.906 123.9636 41.88608 0.907 120.8434 40.71736 0.858 121.6765 42.02798 0.899 121.1336 41.10087 0.8710 123.0010 41.11412 0.9411 123.7735 41.29985 0.9012 122.2415 40.67256 0.8513 123.2437 41.27445 0.8814 122.0773 41.12594 0.88 作图函数：123456789map_out1&lt;-remapH(newdata, maptype = "辽宁", theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out1) 因为以上数据集中使用的各市中心城市的密度数据，所以整体密度太过分散，看不出渐变效果，当然密度图的数据记录是不受数量限制的，在有较多数据点呈现密集分布的地方，可以看到非常明显的颜色热度渐变效果。 这里我通过添加一列分类数据，将以上密度图数据进行改造： 123newdata$perA&lt;-rep("A",14)newdata$perB&lt;-rep("B",14)newdata$perC&lt;-rep("C",14) 使用Reshape2包对数据进行一维转化：123456789101112131415161718192021222324252627282930313233343536373839404142434445mydata &lt;- melt(newdata, id.vars=c("lon","lat","point")) lon lat point variable value1 121.6214 38.91934 0.85 perA A2 120.4573 41.57949 0.81 perA A3 124.3626 40.00569 0.91 perA A4 123.8488 42.29257 0.90 perA A5 123.4390 41.81134 0.91 perA A6 123.9636 41.88608 0.93 perA A7 120.8434 40.71736 0.91 perA A8 121.6765 42.02798 0.87 perA A9 121.1336 41.10087 0.89 perA A10 123.0010 41.11412 0.82 perA A11 123.7735 41.29985 0.88 perA A12 122.2415 40.67256 0.95 perA A13 123.2437 41.27445 0.90 perA A14 122.0773 41.12594 0.84 perA A15 121.6214 38.91934 0.85 perB B16 120.4573 41.57949 0.81 perB B17 124.3626 40.00569 0.91 perB B18 123.8488 42.29257 0.90 perB B19 123.4390 41.81134 0.91 perB B20 123.9636 41.88608 0.93 perB B21 120.8434 40.71736 0.91 perB B22 121.6765 42.02798 0.87 perB B23 121.1336 41.10087 0.89 perB B24 123.0010 41.11412 0.82 perB B25 123.7735 41.29985 0.88 perB B26 122.2415 40.67256 0.95 perB B27 123.2437 41.27445 0.90 perB B28 122.0773 41.12594 0.84 perB B29 121.6214 38.91934 0.85 perC C30 120.4573 41.57949 0.81 perC C31 124.3626 40.00569 0.91 perC C32 123.8488 42.29257 0.90 perC C33 123.4390 41.81134 0.91 perC C34 123.9636 41.88608 0.93 perC C35 120.8434 40.71736 0.91 perC C36 121.6765 42.02798 0.87 perC C37 121.1336 41.10087 0.89 perC C38 123.0010 41.11412 0.82 perC C39 123.7735 41.29985 0.88 perC C40 122.2415 40.67256 0.95 perC C41 123.2437 41.27445 0.90 perC C42 122.0773 41.12594 0.84 perC C 从新运行图表函数：123456789map_out2&lt;-remapH(newdata[,1:3], maptype = "辽宁", theme =get_theme(theme = "Dark"), blurSize = 70, color = "red", minAlpha = 10, opacity = 1, )plot(map_out2) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>REmap</tag>
        <tag>热力密度地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmapC(填充地图)]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmapC-%E5%A1%AB%E5%85%85%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天跟大家介绍REmap函数家族中的第三个函数——REmapC。 REmapC函数允许我们同时在一张地图上制作填充图和点图、线图。 加载包：12library(REmap)library(baidumap) 语法简介：1234567891011121314?remapCremapC(data, maptype = 'china', markLineData = NULL, markPointData = NULL, color = c('#1e90ff','#f0ffff'), theme = get_theme("Bright"), title = "", subtitle = "", markLineTheme = markLineControl(), markPointTheme = markPointControl(), geoData = NA, mindata = NA, maxdata = NA) 四个主要参数说明： 参数一：data为需要的原始数据框格式数据，共2列，第一列为省份或者城市名称，第二列为对应的数值，数值大小将决定地图颜色深浅。 参数二：maptype为地图类型设置，可选world、china或者中国省份名称 参数三：color为热力图渐变颜色，默认为2个颜色，第一个为终止色，第二个为初始色。如果只有一个颜色，系统会自动以白色补充为初始铯色。 参数四：mindata与maxdata可以设置颜色极端点对应数据的上下限（默认是使用data中的数据最大值最小值作为两端极值）。 一、全国热力图首先利用mapnames函数提取全国各省份名称：1234province &lt;- mapNames("china") #全国省份value &lt;- rnorm(34,100,30) #随机生成分省值mydata &lt;- data.frame(province,value) #合成数据框作图数据remapC(mydata,color=c("yellow","red"),title="全国分省热地图",subtitle="我是副标题") #制作热力图 默认的颜色标度是从最小值到最大值。以上函数中省略了markLineData，markPointData 两个参数，所以并未显示点线图。 1234ad_ln &lt;- mapNames("liaoning") [1] "大连市" "朝阳市" "丹东市" "铁岭市" "沈阳市" "抚顺市" "葫芦岛市" "阜新市" "锦州市" [10] "鞍山市" "本溪市" "营口市" "辽阳市" "盘锦市" 123456789101112131415161718value_ln&lt;-rnorm(14,100,30)data_ln &lt;-data.frame(ad_ln,value_ln) ad_ln value_ln1 大连市 79.676302 朝阳市 41.931983 丹东市 173.315864 铁岭市 106.019905 沈阳市 119.402566 抚顺市 79.548207 葫芦岛市 155.629938 阜新市 122.995999 锦州市 94.1739510 鞍山市 82.1894411 本溪市 98.7097212 营口市 115.5995713 辽阳市 104.8919914 盘锦市 92.92975 画图：12345678map_out &lt;- remapC(data_ln, maptype = "liaoning", color=c("green"), title="辽宁省热力地图", theme = get_theme("Sky"), maxdata=180 ) plot(map_out) 接下来做一个案例：每年春运，广东省人口会大批回流原住地，形成壮观的春运人流大军，我们模拟出广东省回流各省的人口数，使用填色地图表示人流规模，使用动态流向线表示回流最大的前10个省份。 因为没有实际的数据，这里我用函数模拟数据（非真实数据）： 12345678province &lt;- mapNames("china") #全国省份value &lt;- round(rnorm(34,1000,30),0) #随机生成分省值mydata &lt;- data.frame(province,value) #合并数据labelper&lt;-mydata[order(mydata[,"value"],decreasing=T),][1:10,]origin&lt;-rep("广州",length(labelper))destination&lt;-labelper$provinceline_data&lt;-data.frame(origin,destination) 画图：1234567891011121314151617181920map_out1 &lt;- remapC(mydata, maptype = "china", title="人口迁徙地图", theme = get_theme("Drak"), color=c("#CD0000","#FFEC8B"), markLineData=line_data, markLineTheme=markLineControl( color="white", lineWidth=2, lineType="dashed" ), markPointData=line_data[2], markPointTheme=markPointControl( symbolSize=13, effect=T, effectType="scale", color="white" ) ) plot(map_out1) 因为假设广东是人口迁出地，给广东填色是没有任何意义的，所以mydata数据中需要忽略 广东的数据123456789101112131415161718192021mydata1 &lt;- mydata[-12,]map_out2 &lt;- remapC(mydata1, maptype = "china", title="人口迁徙地图", theme = get_theme("Drak"), color=c("#CD0000","#FFEC8B"), markLineData=line_data, markLineTheme=markLineControl( color="white", lineWidth=2, lineType="dashed" ), markPointData=line_data[2], markPointTheme=markPointControl( symbolSize=13, effect=T, effectType="scale", color="white" ) ) plot(map_out2) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>填充地图</tag>
        <tag>REmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——案例综合运用]]></title>
    <url>%2F2017%2F06%2F08%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%A1%88%E4%BE%8B%E7%BB%BC%E5%90%88%E8%BF%90%E7%94%A8%2F</url>
    <content type="text"><![CDATA[今天跟大家介绍一个REmap包的新函数——REmapB。 它是REmap包中诸多组函数中的一位，功能上要强大于之前介绍的REmap函数，不仅可以完成REmap函数的所有图表效果，而且可以做出前者没有的地图效果。 语法简介：以下是该函数的详细语法及参数：1234567891011?remapBremapB(center = c(104.114129,37.550339), zoom = 5, color = "Bright", title = "", subtitle = "", markLineData = NA, markPointData = NA, markLineTheme = markLineControl(), markPointTheme = markPointControl(), geoData = NA) 参数说明： 参数一：center为地图中心，经纬度格式； 参数二：zoom为缩放设置，默认为5，代表全国地图，增大至10可放大至地市 参数三：color为地图颜色，可选有”Bright”, “Blue”, “light”, “dark”, “redalert”, “googlelite”, “grassgreen”, “midnight”, “pink”, “darkgreen”, “bluish”, “grayscale”, “hardedge” 参数四：title为地图主标题 参数五：subtitle为地图副标题 参数六：markLineData为绘制线条需要的数据，包括起点和终点两列 参数七：markPointDate为绘制点需要的数据，仅终点一列 参数八：markLineTheme为线条主题设置，通过markLineControl( )函数设置 参数九：markPointTheme为点主题设置，通过markPointControl( )函数设置 参数十：geoData为点、线绘制的地理位置数据存储，可以只是输入经纬度数据，也可通过get_geo_position(‘地点’)获取 其中以上参数中，markLineTheme和markLineTheme内含有诸多属性设置，类似REmap中的theme设置：12345678markLineTheme = markLineControl(symbol = NA,#控制线型symbolSize = c(0,4), #线条粗度变动范围smooth = T, #启用线条平滑度设置smoothness =0.2, #线条平滑度effect = T, #线条动效lineWidth = 2, #线宽lineType = ‘dotted’, #线条类别color =‘Random’) #线条颜色 参数说明： 参数一：symbol为标记样式，具体指线条两端的标记的形状，两个值分别为起点和终点，经过实际使用symbol参数不可修改 参数二：symbolSize为线条两端标记大小，对应symbol参数的两个值，实际上第一个值没用，因为开始标记为none 参数三：smooth为逻辑参数，设置线条是否平滑 参数四：smoothness为平滑度，smooth参数设置为T时有效，体现线条的弧度，减小到0时为直线 参数五：effect为逻辑参数，是否显示动态效果 参数六：lineWidth为线条粗细 参数七：lineType为线条类型，可选有solid（实线）、dotted（点线）、dashed（虚线） 参数八：color为线条颜色 根据以上参数名称，可以大致了解每一个参数的含义：12345markPointTheme = markPointControl(symbol = "heart", #点形状symbolSize = "Random", #点大小effect = T, #动效启用effectType = "scale", #动效类型color = "Random") #颜色 参数说明： 参数一：symbol为点样式，可选项none、circle、rectangle、triangle、diamond、emptyCirle、emptyRectangle、emptyTriangle、emptyDiamond、heart、droplet、pin、arrow、star 参数二：symbolSize为点大小 参数三：effect为逻辑参数，是否显示动态效果 参数四：effectType为动态效果样式，可选scale（放大）和bounce（跳动） 参数五：color为点颜色 解读：effect参数在点太多时，动态效果会失效，这时建议设置为FALSE。在remapB( )函数中通过另外一个参数markPointData也可以设置点颜色，优先级高于color参数。 案例应用：接下来我们可以根据以上参数说明制作一个一对多的流向图：123destination&lt;- c("shanghai","guangzhou","济南","dalian","xian","chengdu","changchun","taiyuan","nanyang","zhengzhou") #终点origin&lt;- rep("nanyang",length(destination)) #起点map_data&lt;- data.frame(origin,destination) #合成数据框格式的作图数据 12345678910map_out&lt;-remapB(zoom=5, #参数5绘制省级国家地图 color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme=markLineControl(), markPointTheme=markPointControl() )plot(map_out) ####通过设置markLineTheme、markPointTheme两个主题内部的详细风格参数，你可以对线条以及数据点的气泡进行个性化设置。1234567891011121314151617181920212223map_out1&lt;-remapB(zoom=5, color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme = markLineControl( symbol = NA, symbolSize = c(0,4), smooth = T, smoothness =0.2, effect = T, lineWidth = 2, lineType ="dotted", color ="white"), markPointTheme = markPointControl( symbol = "heart", symbolSize = "Random", effect = T, effectType = "scale", color = "white") )plot(map_out1) 如果只想要绘制流向线而不需要终点的点的话，直接给markPointData赋值为NA就可以了。 只要将我们的数据结构重新整理，就可以制作出路径地图：12345678910111213141516171819202122232425262728newdata&lt;- c("shanghai","guangzhou","chengdu","xian","taiyuan","济南","shanghai") origin&lt;-c(newdata[-7])destination&lt;-c(newdata[-1])map_data&lt;- data.frame(origin,destination)map_out2&lt;-remapB(zoom=5, color="dark", title="我是主标题", subtitle="我是副标题", markLineData=map_data, markPointData=destination, markLineTheme = markLineControl( symbol = NA, symbolSize = c(0,4), smooth = T, smoothness =0.2, effect = T, lineWidth = 2, lineType ="dotted", color ="white"), markPointTheme = markPointControl( symbol = "heart", symbolSize = "Random", effect = T, effectType = "scale", color = "white") )plot(map_out2) 最后一个案例使用REmapB函数制作目标分布图：首先搜索大连地区的大学： 加载百度地图包：123456789101112library("baidumap")#查找大连的所有大学dl_college &lt;- getPlace("大学","大连")Get 125 records, 7 page. Getting 0 th page Getting 1 th page Getting 2 th page Getting 3 th page Getting 4 th page Getting 5 th page Getting 6 th page Done! 1234567891011121314151617#预览数据：head(dl_college) name address lat lon1 大连工业大学 轻工苑1号 38.97890 121.53322 大连理工大学 辽宁省大连市甘井子区凌工路2号 38.88868 121.53623 大连海事大学 辽宁省大连市凌海路1号 38.87753 121.53874 大连交通大学（沙河口校区） 沙河口区黄河路794号交通大学小吃一条街内(近西南路) 38.91790 121.57705 大连外国语大学(旅顺校区) 中国辽宁省大连市旅顺南路西段6号 38.81853 121.31546 大连大学 学府大街10号 39.10660 121.8282 telephone1 (0411)863236932 &lt;NA&gt;3 &lt;NA&gt;4 (0411)841063135 (0411)861111576 (0411)87402114 12345678str(dl_college)'data.frame': 125 obs. of 5 variables: $ name : chr "大连工业大学" "大连理工大学" "大连海事大学" "大连交通大学（沙河口校区）" ... $ address : chr "轻工苑1号" "辽宁省大连市甘井子区凌工路2号" "辽宁省大连市凌海路1号" "沙河口区黄河路794号交通大学小吃一条街内(近西南路)" ... $ lat : num 39 38.9 38.9 38.9 38.8 ... $ lon : num 122 122 122 122 121 ... $ telephone: chr "(0411)86323693" NA NA "(0411)84106313" ... 一共抓取了大连地区的125个带有大学的机构经纬度地址： 构造作图数据：123456789newdata1&lt;-dl_college[,c(3,4,1)]head(newdata1) name lat lon1 大连工业大学 38.97890 121.53322 大连理工大学 38.88868 121.53623 大连海事大学 38.87753 121.53874 大连交通大学（沙河口校区） 38.91790 121.57705 大连外国语大学(旅顺校区) 38.81853 121.31546 大连大学 39.10660 121.8282 1234567891011121314newdata2&lt;-newdata1[,c(2,1,3)]map_out3 &lt;- remapB(center = c(121.62139,38.91934), zoom = 14, color = "Blue", title = "大连高校分布图", markPointData =newdata2[3], markPointTheme = markPointControl( symbol = "pin", symbolSize = 3, effect = T, color = "yellow"), geoData =newdata2 )plot(map_out3) 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out3) #保存的同时自动调用浏览器窗口 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>REmap</tag>
        <tag>在线地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmap(路径图)]]></title>
    <url>%2F2017%2F06%2F07%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmap-%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天紧接昨天的内容，跟大家分享如何使用REmap函数制作路径图。 路径图所需要的数据结构非常简单，两列数据，左侧是起点，右侧是终点，并且每一行的终点是下一行的起点，这样最终才可以制作出连接在一起的路径图。 首先我们来构造所需的数据： 构造数据：起点数据：1origin&lt;- c("beijing","shijiazhuang","zhengzhou","hefei","nanjing","济南","dalian") 终点数据：1destination&lt;- c(origin[-1],origin[1]) #将起点数据首尾互换，并构造终点数据 将终点数据、起点数据合并为数据框格式的作图数据：1map_data&lt;- data.frame(origin,destination) 绘图过程：绘图：123456map_out1&lt;- remap(mapdata=map_data, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out1) #在web上展示图形 上面的例子中，为了使得路径图首尾相连，终点数据是起点数据调换首尾行而得到的。 那么如果不要求路径图首尾相连的话可以设置如下结构： 12345678map_data1&lt;-map_data[-7,]map_out2&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out2) #在web上展示图形 这种路径图的形式非常适合用于表达带有很多中间节点的动态路线。 当然如果你也可以将数据源设置成两条毫不相干的路线： 12data1&lt;-c("西安","zhengzhou","shijiazhuang","beijing","shenyang","changhcun","哈尔滨") data2&lt;-c("nanyang","wuhan","changsha","南昌","guangzhou","南宁","贵阳") 123origin&lt;-c(data1[1:6],data2[1:6])destination&lt;-c(data1[2:7],data2[2:7])map_data1&lt;- data.frame(origin,destination) 123456map_out3&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='Dark') )plot(map_out3) 随机生成的线条和气泡颜色看着挺别扭，我们可以将其修改为自定义颜色： 123456789map_out4&lt;- remap(mapdata=map_data1, title ="我是主标题", subtitle ="我是副标题", theme =get_theme(theme='none', lineColor = "white", backgroundColor="black" ) )plot(map_out4) 你可以用这种方法，结合自己的数据来表达多个地域之间的流动方向：比如一打一路、长征、贸易路线、铁路路线图等都非常适合这种表达。 gif效果： 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out5) #保存的同时自动调用浏览器窗口 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>REmap</tag>
        <tag>在线地图</tag>
        <tag>路径图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——REmap动态地图]]></title>
    <url>%2F2017%2F06%2F07%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94REmap%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天开始，要跟着大家学习一个新的可视化R包——REmap包。 说起来，这个包要归功于百度的可视化开源项目——echarts,它是国内为数不多的高水平开源可视化js库，在业界地位首屈一指。 经过大神的努力，我们终于可以在R语言中以简洁的REmap函数形式，来调用Echarts核心功能，而不用亲自去学js代码，就可以创建动态地图可视化作品。 如果有小伙伴儿熟悉百度的大数据可视化项目——百度迁徙地图，以及交通通勤图，以及后来的一带一路可视化路线图，肯定对那些动态地图上流动的线条和路径有很深的印象。 下面我们开始简单介绍REmap的主要功能： REmap包中涵盖有一组函数，我所知道并用过的有REmap、REmapB、REmapC、REmapH。 每一个函数都对应着几种炫酷的动态效果类型： 今天我们先介绍REmap函数并利用该函数制作简单的流向图： 安装及加载：123install.packages("devtools")devtools::install_github("lchiffon/REmap") #开发者/包名library(REmap) #加载 语法介绍：REmap函数的作图理念与ggplot其实还是有雷同的，它也是将数据信息和美学信息分开表达，数据信息包含在数据表中，而美化修饰参数都包含在theme内。123remap(mapdata, title = " ", subtitle = "", theme = get_theme("Dark")) 这是一个典型的REmap函数的结构，mapdata是我们所要展示的数据框格式数据集，里面包含了两列数据：起点位置、终点信息。 title用于设置主标题、subtitle用于设置副标题。而theme用于设定整个图形的主题风格，该主题是一个封装的函数变量，里面包含诸多参数信息（各种点线面的颜色、度量等信息）。 下面是一个典型的REmap主题内的参数示例：123456789get_theme(theme = "Dark", lineColor = "Random", backgroundColor = "#1b1b1b", titleColor = "fff", borderColor = "rgba(100,149,237,1)", regionColor = "#1b1b1b", labelShow = T, pointShow = F, pointColor = "gold") 参数说明： 参数一：theme为总体配色，默认选项有“Dark”、“Bright”、“Sky”、“none” 参数二：lineColor为线条颜色，默认是随机， 也可自行设置，如’red’ 参数三：backgroundColor为地图外背景颜色 参数四：titleColor为标题颜色 参数五：borderColor为地图中地域边缘颜色，不同省份、城市的边缘 参数六：regionColor为地域颜色，即地图显示的颜色 参数七：labelShow为逻辑参数，是否显示地域名称，默认为T，即显示，只用于remapC函数 参数八：pointShow为逻辑参数，是否显示地域所在点，默认为F，不显示，只用于remapC函数 参数九：pointColor为pointShow中点的颜色，只用于remapC函数 REmap可以非常轻松的获取城市地点的经纬度数据： 以大连为例：12get_city_coord("大连")[1] 121.62139 38.91934 如果想要获取一组城市的经纬度信息，可以直接赋值给城市向量：123456789city_list &lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou")get_geo_position(city_list) lon lat city1 116.4136 39.91101 beijing2 117.2059 39.09091 tianjin3 123.4390 41.81134 shenyang4 121.6214 38.91934 dalian5 113.6313 34.75349 zhengzhou 而且据说这两个函数大部分时候对拼音与汉字，甚至拼音的大小写都不敏感，所以避免了很多麻烦。 生成模拟数据集：创建起始点：12destination&lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou") #终点origin&lt;- rep("dalian",length(destination)) #起点 合成数据框格式的起终点数据1map_data&lt;- data.frame(origin,destination) 数据预览：1234567head(map_data) origin destination1 dalian beijing2 dalian tianjin3 dalian shenyang4 dalian dalian5 dalian zhengzhou 作图函数：1234map_out&lt;-remap(mapdata=map_data, #流向地图的数据源（依次为起点、重点两列） title="我是标题", #设置主标题 subtitle="我是副标题", #设置副标题 theme =get_theme(theme="Bright")) #设置主题（默认主题一共有三套：“Dark”,“Bright,”Sky“） 运行以上代码之后，动态图表已经生成名为map_out的对象，只需使用plot函数调用一下map_out图表对象就可以看到该动态图表效果。 提示下，这里的map_out的对象是一个js代码生成的html对象，运行完plot之后，动态图表效果不是呈现在R的图表窗口而是调用了桌面浏览器的Web窗口。 12plot(map_out)Save img as: C:\Users\ADMINI~1\AppData\Local\Temp\RtmpAxQndv/ID_20161015191055_242761.html 运行完成之后，浏览器窗口会自动呈现动态图表效果： 其实仔细看以上代码，与ggplot的地图代码相比，要简单很多，数据集也很简单（最重要的直接支持地点名称而不需要经纬度数据），当然这些便利性主要归功于它的底层代码是调用Echarts项目，地理位置信息有百度地图的强大系统支持。 可选主题介绍：Dark主题：12map_out1&lt;-remap(mapdata=map_data,title="我是标题",subtitle="我是副标题",theme =get_theme(theme="Dark"))plot(map_out1) Sky主题：1234567map_out2&lt;-remap(mapdata=map_data,title="我是标题",subtitle="我是副标题",theme =get_theme(theme="Sky"))map_out&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme =get_theme(theme="Bright"))plot(map_out2) 关于主题自定义：以上是该函数内置的三款主题，当然如果你要想自定义主题的话，也是可以的，但是需要将theme=&quot;Sky&quot;设置为none，否则系统主题会覆盖掉你自定义的主题。 1234567891011map_out3&lt;-remap(mapdata=map_data, #设计流向地图title="我是标题", #设置标题subtitle="我是副标题", #设置副标题theme=get_theme(theme="none", #设置主题 lineColor="blue", #设置线条颜色backgroundColor="white", #设置背景颜色titleColor="black", #设置标题颜色borderColor="grey", #设置地区边界颜色regionColor="SandyBrown") #设置地区颜色)plot(map_out3) 但是个人习惯，还是比较喜欢先将主题定义好并命名，然后在运行图表代码的时候直接饮用，这样比较利于后期主题的微调： 123456mytheme&lt;-get_theme(theme="none", #设置主题 lineColor="blue", #设置线条颜色backgroundColor="white", #设置背景颜色titleColor="black", #设置标题颜色borderColor="grey", #设置地区边界颜色regionColor="Bisque") 12345map_out4&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme=get_theme(theme="none"))plot(map_out4) 当然如果将数据框中的数据两列调换，那么地图就可以做成流入图。 12origin&lt;- c("beijing","tianjin","shenyang","dalian","zhengzhou") #终点destination&lt;- rep("dalian",length(destination)) #起点 合成数据框格式的起终点数据1234567map_data&lt;- data.frame(origin,destination) map_out5&lt;-remap(mapdata=map_data, title="我是标题", subtitle="我是副标题", theme=get_theme(theme="Bright"))plot(map_out5) 如果想要存储该HTML对象，需要设定临时目录： 123setwd("D:/R/Rscript") #保存图片的位置，不做修改默认为R的工作路径options(remap.js.web=T) #动态网页图保存命令plot(map_out5) #保存的同时自动调用浏览器窗口 其实以上所有图表都是带有动态交互效果的！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>REmap</tag>
        <tag>在线地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leaflet在线地图进阶宝典之——高级辅助特性]]></title>
    <url>%2F2017%2F06%2F06%2Fleaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E4%B9%8B%E2%80%94%E2%80%94%E9%AB%98%E7%BA%A7%E8%BE%85%E5%8A%A9%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[本文跟大家分享leaflet在线地图的高级附加属性，这些属性通常来讲仅仅作为我们数据额可视化项目的修饰元素，而并不会影响数据元素。 但是有了这些辅助修饰元素，往往可以使你的数据可视化项目变得更具人性化。 本文内容根据leaflet的官方主页（R语言接口）翻译而来： 附加属性： 测度工具：Leaflet Measure 增加该工具可以轻而易举的让你在可视化地图中通过鼠标打点，测量两点之间的距离，如果是闭合区域，则可以直接计算闭合区域的真实面积。 网格线：Graticule 网格线可以提供平面坐标系下地理空间的经纬度位置参考线。 昼夜分界线：Terminator (day/night indicator) 昼夜分界线可以提供一天中不同地区的昼夜分界状况。 mini小地图：Minimap mini窗口小地图可以提供定位窗口，让你知道主版面中位置在更大范围地理区域上的大致方位，就相当于游戏中的mini导航图。 辅助按钮：EasyButton 辅助按钮可以提供一键初始化比例尺，一键定位功能。 自定义js属性：Custom JavaScript with htmlwidgets::onRender 你可以利用leaflet与HTML的接口工具对地图版面进行更加丰富的属性设置。 测度工具：Leaflet Measure123library(leaflet)m&lt;-leaflet()%&gt;%addTiles()m %&gt;%fitBounds(-73.9,40.75,-73.95,40.8) %&gt;%addMeasure() 右上侧的小弹窗打开之后选择创建测距选项，就可以通过鼠标打点儿，测量两点之间的地理距离，如果是三个以上的点，则会测量出闭合多边形区域的面积。 动态效果： 12345678m %&gt;% fitBounds(13.76134, 52.675499, 13.0884, 52.33812) %&gt;% #设定版面呈现的地理区域范围 addMeasure( position = "bottomleft", #测距菜单位置 primaryLengthUnit = "meters", #测量的点距离输出单位 primaryAreaUnit = "sqmeters", #测量的闭合多边形区域面积输出单位 activeColor = "#3D535D", # completedColor = "#7D4479") 网格线：Graticule1leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule() 12leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule(interval = 10, style = list(color = "#FF0000", weight = 1)) 而且网格线系统是可控元素，控制方式就是将其当成一个单独的图层，然后分组。 123leaflet() %&gt;% addTiles() %&gt;% setView(0,0,2) %&gt;% addGraticule(group = "Graticule") %&gt;% addLayersControl(overlayGroups = c("Graticule"),options=layersControlOptions(collapsed = FALSE)) 昼夜分界线：Terminator (day/night indicator)1leaflet() %&gt;% addTiles() %&gt;% addTerminator() 昼夜分界线支持自定义日期和分组功能： 123456789leaflet() %&gt;% addTiles() %&gt;% addTerminator( resolution=10, time = "2013-06-20T21:00:00Z", group = "daylight") %&gt;% addLayersControl( overlayGroups = "daylight", options = layersControlOptions(collapsed = FALSE)) mini导航地图：Minimap123leaflet() %&gt;% setView(0,0,3) %&gt;% addProviderTiles(providers$Esri.WorldStreetMap) %&gt;% addMiniMap() mini导航地图中的地图背景也是支持自定义的： 123leaflet() %&gt;% setView(0,0,3) %&gt;% addProviderTiles(providers$Esri.WorldStreetMap) %&gt;% addMiniMap(tiles = providers$Esri.WorldStreetMap,toggleDisplay = TRUE) 视频演示： 辅助工具菜单：123456789library(htmltools)library(htmlwidgets)leaflet() %&gt;% addTiles() %&gt;% addEasyButton(easyButton( #添加一键恢复初始窗口比利时 icon="fa-globe", title="Zoom to Level 1", onClick=JS("function(btn, map)&#123; map.setZoom(1); &#125;"))) %&gt;% addEasyButton(easyButton( #添加一键定位功能（根据你的所在位置） icon="fa-crosshairs", title="Locate Me", onClick=JS("function(btn, map)&#123; map.locate(&#123;setView: true&#125;); &#125;"))) 动态效果： 辅助按钮：EasyButton以下代码展示了如何通过调用js工具控件来通过打开菜单工具开启地图上的点聚合功能，同时关闭菜单工具按钮，关闭点聚合功能。 1234567891011121314151617181920212223242526272829303132leaflet() %&gt;% addTiles() %&gt;% addMarkers(data=quakes, clusterOptions = markerClusterOptions(), clusterId = "quakesCluster") %&gt;% addEasyButton(easyButton( states = list( easyButtonState( #状态1：打开菜单，开启点聚合 stateName="unfrozen-markers", icon="ion-toggle", title="Freeze Clusters", onClick = JS(" function(btn,map) &#123; var clusterManager = map.layerManager.getLayer('cluster', 'quakesCluster'); clusterManager.freezeAtZoom(); btn.state('frozen-markers'); &#125;") ), easyButtonState( #状态2：关闭菜单，结束点聚合功能 stateName="frozen-markers", icon="ion-toggle-filled", title="UnFreeze Clusters", onClick = JS(" function(btn, map) &#123; var clusterManager = map.layerManager.getLayer('cluster', 'quakesCluster'); clusterManager.unfreeze(); btn.state('unfrozen-markers'); &#125;") ) ) )) 动态效果： 自定义js属性：Custom JavaScript with htmlwidgets::onRender基础图层会根据导航窗内的图层风格改变而随之转换：1234567891011121314151617181920mymap&lt;-leaflet() %&gt;% setView(0,0,3)esri &lt;- grep("^Esri", providers, value = TRUE)for (provider in esri) &#123; mymap &lt;-mymap %&gt;% addProviderTiles(provider, group = provider)&#125;mymap %&gt;% addLayersControl(baseGroups = names(esri), options = layersControlOptions(collapsed = FALSE)) %&gt;% addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE, position = "bottomleft") %&gt;% htmlwidgets::onRender(" function(el, x) &#123; var myMap = this; myMap.on('baselayerchange', function (e) &#123; myMap.minimap.changeLayer(L.tileLayer.provider(e.name)); &#125;) &#125;") 动态效果： 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leaflet在线地图进阶宝典——json素材操纵与图层面板控制]]></title>
    <url>%2F2017%2F06%2F05%2FLeaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E8%BF%9B%E9%98%B6%E5%AE%9D%E5%85%B8%E2%80%94%E2%80%94json%E7%B4%A0%E6%9D%90%E6%93%8D%E7%BA%B5%E4%B8%8E%E5%9B%BE%E5%B1%82%E9%9D%A2%E6%9D%BF%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[这篇教程憋了很久，其实算是3个月前leaflet在线地图系列的进阶篇，但是因为当时对于leaflet地图的数据源结构理解有限，技能勉强操控shp数据源，对于json数据源所知甚少，一直拖了这么久才更新。 随着近期在json数据结构的理解不断加深，对于list结构和向量化运算的掌握也多有提高，这才能熟练的在leaflet系统中操控json数据。 本篇主要分为两大部分： 如何自如的操纵json数据来打造leaflet所能识别的数据源和style属性； 如何操控leaflet控制台版面中的地图图层和数据图层。 想要很好的理解本文，你需先对leaflet系统基础语法有所掌握（其实可视化的图层语法都大同小异，leaflet属于JavaScript语言打造的在线地图库，同D3、plotly、Rcharts以及Highcharts等接口的语法差别不大）。 但如果你在看本文之前已经看过我的前期四篇leaflet入门篇： 动态地理信息可视化——leaflet在线地图简介 动态地理信息可视化——散点地图系列 动态地理信息可视化——leaflet构造路径图 动态地理信息可视化——leaflet填充地图 那么本文理解起来就容易多了，仅仅是温故知新罢了！ 当然如果你学有余力的话，你也可以顺便把百度的Echarts系统地图接口也学习一下： R语言可视化——REmap动态地图 R语言可视化——REmap(路径图) R语言可视化——REmapC(填充地图) R语言可视化——REmapH(中心热度图) 如果你能熟练掌握以上两套在线地图语法，那么制作此类可视化项目至少在技术角度上来说已经没有任何门槛。 以下是本文的主要内容： json地图数据结构和变量操控： 加载包：12345678910library(jsonlite)library(leaflet)library(dplyr)library(geojsonio)library(rgdal)library(sf)library(ggplot2)library(maptools)library(plyr)library(htmltools) 导入数据集：这样的全局预设可以为你省却很多麻烦，强烈建议 1234options(stringsAsFactors=FALSE,warn=FALSE) setwd("D:/R/mapdatanew/")url&lt;-"https://raw.githubusercontent.com/ljtyduyu/DataWarehouse/master/Mapdata/City/110100.json" 最近把自己所有的关于地图可视化的数据传到了个人Github上，这样无论是大家以后调用数据还是自己平时练习都方便多了！ 以下数据导入json原生数据格式的三种方式：（2,3两种是没啥区别的，但是simplifyVector=FALSE参数设定与否则至关重要，他决定着输入的json数据是经过平整的向量化数据还是原生的list数据，这里的leaflet需要原生格式的json数据） 123geojson1&lt;-fromJSON(url) #在同一层级对象长度一致，便会被自动视作数据框。geojson2&lt;-fromJSON(url,simplifyVector=FALSE) #不强转化为数据框。geojson3&lt;-readLines(url,warn=FALSE,encoding="UTF-8")%&gt;%paste(collapse="\n")%&gt;%fromJSON(simplifyVector=FALSE) 设置随机中非常必要，否则容易导致每次的效果都不一样：1set.seed(1234) 向地图素材中添加作图数据：向list对象中添加数据（随机数据）1234geojson3$features&lt;-lapply(geojson3$features,function(feat)&#123;feat$properties$scale&lt;-runif(1,0,10)feat&#125;) 从list对象中读取数据(主要读取我们可做更改与扩展的行政区划列表信息)123456mydata&lt;-ldply(geojson3$features,function(feat)&#123; name&lt;-feat$properties$nameid&lt;- feat$properties$idscale&lt;-as.numeric(feat$properties$scale)mydata&lt;-data.frame(name,id,scale)&#125;) Default styles for all features it has higher precedence compare with the style in a function of GeoJSON1geojson3$style=list(weight=1,color="#555555",opacity=1,fillOpacity=0.8) Color by scale using quantiles1pal&lt;-colorQuantile("Greens",mydata$scale) Add a properties$style list to each feature123456geojson3$features &lt;- lapply(geojson3$features, function(feat) &#123; feat$properties$style&lt;-list( fillColor=pal(feat$properties$scale) ) feat&#125;) 关于属性设置的三个优先级：按照由高到低的顺序排列为：123 feature-specific styles #（也就是设置在 simple featrue的style） the top-level style object #（设置在features中的style）style-related arguments passed to the function #（设置在GeoJSON内的各种参数） 这是通过增加地图图层来进行图层控制的简单案例：123456789101112leaflet()%&gt;%addTiles(group ="OSM (default)")%&gt;%setView(lng=116.435889,lat=39.932642,zoom=8)%&gt;%addGeoJSON(geojson3,group="GeoJSON")%&gt;%addProviderTiles(providers$CartoDB.Positron,group="CartoDB")%&gt;%addProviderTiles(providers$Stamen.TonerLines,options=providerTileOptions(opacity=0.35),group="TonerLines")%&gt;%addProviderTiles(providers$Stamen.TonerLabels,group="TonerLabels")%&gt;%addLayersControl( baseGroups = c("OSM (default)", "CartoDB", "TonerLines","TonerLabels"), overlayGroups = c("GeoJSON"), options=layersControlOptions(collapsed = FALSE) ) 以下这段代码是之前leaflet系列教程的线图篇里面的案例，这里刚好应用一下： 123456789101112data&lt;-read.table("D:/R/File/subwayline.txt",header=TRUE,stringsAsFactors = FALSE)data$size&lt;-runif(47,10,25)data$Type&lt;-as.factor(data$Type)data1&lt;-filter(data,Type=="NO1")data2&lt;-filter(data,Type=="NO5")pal &lt;- colorFactor(topo.colors(2),data$Type)leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,radius=~size,group=~Type) 这是一个高度综合的案例，包含底图图层的多分类控制；数据图层的多分类控制以及点线面三种数据图层的综合运用。 123456789101112131415leaflet()%&gt;%addTiles(group ="OSM (default)")%&gt;%setView(lng=116.435889,lat=39.932642,zoom=8)%&gt;%addGeoJSON(geojson3,group="GeoJSON")%&gt;%addProviderTiles(providers$CartoDB.Positron,group="CartoDB")%&gt;%addProviderTiles(providers$Stamen.TonerLines,options=providerTileOptions(opacity=0.35),group="TonerLines")%&gt;%addProviderTiles(providers$Stamen.TonerLabels,group="TonerLabels")%&gt;%addPolylines(data=data1,~lon,~lat,color="red",group="line1")%&gt;%addPolylines(data=data2,~lon,~lat,color="orange",group="line2")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,radius=~size,group="address",color = "#1843F9")%&gt;%addLayersControl( baseGroups = c("OSM (default)", "CartoDB", "TonerLines","TonerLabels"), overlayGroups = c("GeoJSON","line1","line2","address"), options=layersControlOptions(collapsed = FALSE) ) 动态视频效果来一波！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>json</tag>
        <tag>leaflet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet填充地图]]></title>
    <url>%2F2017%2F06%2F05%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E5%A1%AB%E5%85%85%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[这一篇是leaflet动态地图的第四篇，也是最值得推荐的一篇，这一篇涉及到热力地图填充，通过该篇内容，大家可以体会大leaflet在线地图的R借口在处理热力地图上面颜色标度映射的强大优势。 加载包：12345678910library(plyr)library(maps)library(mapdata)library(leaflet)library(stringi)library(maptools)library(htmltools)library(RColorBrewer)library(ggplot2)library(rgdal) 地图素材加载：（leaflet支持多种地图素材，比如常见的shapefile格式、json格式以及其他在线地图，但是因为json格式本来还没有很熟练，这里用shp格式地图素材为例进行加讲解）。 肯定会有小伙伴儿会问，既然leaflet本身就是在线地图，为啥还要费事儿加载shp地图素材就进行映射，因为leaflet在线地图提供的地图底图本身具有多级缩放特性，每一缩放级别都有对应的行政区划界线，但是这些参数和行政区划是封装在底层的js语言中的，我们无法使用R语言直接进行调用，只能作为一个图层素材进行背景修饰，说白了，其实我们想要的仅仅是多级缩放的动态切换效果，这样再结合我们自定义的地图素材，可以呈现出更加完美的效果。（只有热力填充地图需要定义区域界线，而点图和线图都可以直接利用leaflet本身的地图素材，因为只需要坐标点位置即可）。 我们常用的地图素材资源无非以下三种，R包内置的地图数据、shapefile格式和json格式。以下是三种格式素材导入并在leaflet中制作的地图的基本代码： maps包:12mapStates&lt;-map("state",fill=TRUE,plot=FALSE)leaflet(mapStates) %&gt;% addTiles() %&gt;%addPolygons(fillColor=topo.colors(10,alpha =NULL), stroke = FALSE) 12mapWorld&lt;-map("world",fill=TRUE,col=rainbow(200),ylim=c(-60,90),mar=c(0,0,0,0))leaflet(mapWorld) %&gt;% addTiles() %&gt;%addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE) shapefile:123American_map &lt;-readShapePoly("C:/rstudy/USA_map/STATES.SHP")American_map$STATE_NAME = iconv(American_map$STATE_NAME,"UTF8","CP936") leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(popup=~STATE_NAME,fillColor=topo.colors(10,alpha=NULL),stroke=FALSE) json文件：1234library(jsonlite)geoData&lt;-readLines("D:/R/mapdata/State/USA.json",warn=FALSE)%&gt;%paste(collapse="\n")%&gt;%fromJSON(simplifyVector=FALSE)geoData$style=list(weight=1,color="red",fillColor="green",opacity=1,fill=TRUE,fillOpacity=0.6)leaflet()%&gt;%setView(lng=-98.961387,lat=39.708533,zoom=3)%&gt;%addTiles()%&gt;%addGeoJSON(geoData) 前两种素材作图过程大同小异，特别是一些标度的属性声明很类似ggplot中的函数过程，但是json格式的素材操作起来就不是很友好，他的标度属性是要在数据文件中新建style的list对象进行生命，而且json格式中的list非常多，结构相对复杂，至今我也没完全搞明白如果自由操作。 几张分类颜色标度填充效果：下面是承接上面shapefile格式素材做展现的四中颜色标度（三种连续性标度和一种分类标度的映射过程）。 colorQuantile（连续性数值变量的百分比颜色过度）:1234pal &lt;- colorQuantile("Greens",American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title = "1990年人口数量（万人）") 以下两种同属连续性数值变量（使用颜色数量不同）12345colorNumeric(多色过度):pal&lt;-colorNumeric(c("darkgreen","yellow","orangered"),American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles() %&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title = "1990年人口数量（万人") 12345colorNumeric（单色过度):pal&lt;-colorNumeric("Greens",American_map@data$POP1990)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity = 0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 以下两种也同属连续性数值变量的颜色标度映射 （但是可以自定义分组数量，其实实质上是对变量分割，后以分组形式填充，更准确的说，确实是应用了变量转换的方式（数值转有序因子），但是过程是自动进行的，而不是像在ggplot中一样不需手动转换） 12345colorBin（单色渐变分组过度):pal&lt;-colorBin("Greens",American_map@data$POP1990,10)leaflet(American_map)%&gt;%addTiles()%&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity=0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 12345colorBin（多色色渐变分组过度):pal&lt;-colorBin(c("darkgreen","yellow","orangered"),American_map@data$POP1990,8)leaflet(American_map) %&gt;% addTiles() %&gt;%addPolygons(color=~pal(American_map@data$POP1990),fillOpacity=0.8,weight=1)%&gt;%addLegend(pal=pal,values=American_map@data$POP1990,position="bottomleft",title="1990年人口数量（万人）") 离散标度： （这个例子是用在变量本身就是因子变量的情况下，算是分类变量情况下的颜色标度映射）1234567china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")mydata&lt;-read.csv("c:/rstudy/geshengzhibiao.csv")mydata$type&lt;-factor(sample(LETTERS[1:5],33,replace=TRUE))shape &lt;- merge(china_map,mydata,by="NAME")pal &lt;- colorFactor(c("green","red","blue","yellow","brown"), domain = c("A", "B","C","D","E"))#设置色盘：i_popup&lt;-paste0("&lt;strong&gt;Province:&lt;/strong&gt;",shape$NAME,"&lt;br&gt;","&lt;strong&gt;Level:&lt;/strong&gt;",shape$type) 12345设置弹出窗口leaflet(shape)%&gt;%addTiles()%&gt;% setView(116.387021,39.969369,zoom=3)%&gt;%addPolygons(fillColor=~pal(shape$type),fillOpacity=0.8,color="#000000",weight=1,popup=i_popup)%&gt;%addLegend(pal=pal,values=shape@data$type,position="bottomright",title=paste0("小魔方基团2016年","&lt;br&gt;","营业分布等级")) 以上地图效果都支持多节自动缩放和弹窗动态信息显示（需设置popup属性及少量html交互代码） leaflet在线地图底层由js源码编写，天然支持html语言，如能结合html搭配使用，可以在动态地图元素中，特别是弹窗中无缝嵌入图片、超链接甚至视频等多类元素，感兴趣的小伙伴儿可以自行探索。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>填色地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet构造路径图]]></title>
    <url>%2F2017%2F06%2F04%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E6%9E%84%E9%80%A0%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[根据先前几篇内容的框架，今天介绍leaflet在线地图的第三篇，以线条元素构造的路径图。 加载包：12library(leaflet)library(dplyr) 导入数据集：1234data&lt;-read.table("D:/R/File/subwayline.txt",header=TRUE,stringsAsFactors = FALSE)data$Type&lt;-as.factor(data$Type)data1&lt;-filter(data,Type=="NO1")data2&lt;-filter(data,Type=="NO5") 以上我用百度地图的坐标拾取平台采点拾取的背景地铁一号线和五号线的车站地理位置信息，（因为没有现成的数据，只能手工采点，可能不是很准确） 基本语法解释：今天要介绍的leaflet类型是线条，也即addPolylines函数，其基本语法如下： 12345678addPolylines(map, lng = NULL,lat = NULL, #指定数据源并做经纬度声明 layerId = NULL, group = NULL, #图层分组（制作动态可见性交互时使用） stroke = TRUE, #是否呈现路径线 color = "#03F",weight = 5,opacity = 0.5, #关于线条的颜色、宽度、透明度 fill = FALSE, fillColor = color, fillOpacity = 0.2, dashArray = NULL, smoothFactor = 1, noClip = FALSE, #线型参数，平滑度等 popup = NULL, options = pathOptions(), data = getMapData(map)) #弹窗、选项控制 构造色盘：1pal &lt;- colorFactor(topo.colors(2),data$Type) 可视化过程：作图函数：使用默认点标识12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addMarkers(data=data,~lon, ~lat,popup = ~address) 使用可自定义的圆点标识车站位置12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color="red") 12345leaflet()%&gt;%addTiles()%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircleMarkers(data=data,~lon, ~lat,popup = ~address,color=~Type) 以下是几种比较常用的地图背景素材1234addProviderTiles("Esri.WorldStreetMap") addProviderTiles("Esri.WorldImagery") addProviderTiles("Esri.WorldTerrain") addProviderTiles("Esri.NatGeoWorldMap") 几张常见的素材风格：12345leaflet()%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.WorldGrayCanvas") %&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 12345leaflet()%&gt;%addProviderTiles("Esri.NatGeoWorldMap") %&gt;%addPolylines(data=data1,~lon,~lat,color="blue")%&gt;%addPolylines(data=data2,~lon,~lat,color="green")%&gt;%addCircles(data=data,~lon, ~lat,popup = ~address,color=~Type) 是不是觉得花样不够多呀，那好吧，以下这些，全部都送给你，那好不谢！ OpenStreetMap.Mapnik OpenStreetMap.BlackAndWhite OpenStreetMap.DE OpenStreetMap.France OpenStreetMap.HOT OpenTopoMap Thunderforest.OpenCycleMap Thunderforest.Transport Thunderforest.TransportDark Thunderforest.SpinalMap Thunderforest.Landscape Thunderforest.Outdoors Thunderforest.Pioneer OpenMapSurfer.Roads OpenMapSurfer.Grayscale Hydda.Full Stamen.Toner Stamen.TonerBackground Stamen.TonerLite Stamen.Watercolor Stamen.Terrain Stamen.TerrainBackground Stamen.TopOSMRelief Esri.WorldStreetMap Esri.DeLorme Esri.WorldTopoMap Esri.WorldImagery Esri.WorldTerrain Esri.WorldShadedRelief Esri.WorldPhysical Esri.OceanBasemap Esri.NatGeoWorldMap Esri.WorldGrayCanvas MtbMap CartoDB.Positron CartoDB.PositronNoLabels CartoDB.PositronOnlyLabels CartoDB.DarkMatter CartoDB.DarkMatterNoLabels CartoDB.DarkMatterOnlyLabels HikeBike.HikeBike HikeBike.HillShading NASAGIBS.ModisTerraTrueColorCR NASAGIBS.ModisTerraBands367CR NASAGIBS.ViirsEarthAtNight2012 NASAGIBS.ModisTerraLSTDay NASAGIBS.ModisTerraSnowCover NASAGIBS.ModisTerraAOD NASAGIBS.ModisTerraChlorophyll 细数也有好几十个，够你玩一阵子了，使用方法仅仅是通过设置图层函数进行调用，然后就可以愉快的在图层上面进行可视化操作了。addProviderTiles(“地图类型”) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>路径图</tag>
        <tag>leaflet</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——散点地图系列]]></title>
    <url>%2F2017%2F06%2F03%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E6%95%A3%E7%82%B9%E5%9C%B0%E5%9B%BE%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[这是一篇拖了好久的稿子，因为过年玩high了，一直放着没写，今天得空，赶快得空，赶紧整理一下。 本篇主讲leaflet在线地图系列中的散点系列，包含颜色映射规则（离散和连续）、大小映射规则。 其实也就是包含了我们看到的常规的散点图类型和气泡图类型。同时结合leaflet丰富多彩的背景地图主题进行展开。 加载包：123456789library(plyr)library(maps)library(mapdata)library(leaflet)library(stringi)library(maptools)library(htmltools)library(RColorBrewer)library(ggplot2) 为方便展示这里统一使用中国省级行政地图（shp格式导入），在省会城市坐标进行指标数据映射。 地图素材数据导入：12345province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") #中国各省省会坐标province_city$size&lt;-round(runif(34,5,10),2) #添加连续数值变量province_city$type&lt;-factor(sample(LETTERS[1:5],34,replace=TRUE)) #添加因子变量以便之后演示co&lt;-substr(rainbow(34),1,7)province_city&lt;-data.frame(province_city,co) 制作色盘：12pal &lt;- colorFactor(c("green", "red","yellow","green","blue"), domain = c("A", "B","C","D","E"))#因子变量的映射色盘cPal &lt;- colorNumeric(palette = c("blue","yellow","red"),domain =province_city$size) #数值型变量的映射色盘 ###可视化图形： 作图函数：1leaflet(province_city)%&gt;%addTiles()%&gt;% addMarkers(lng=~jd,lat=~wd,popup=~city) 1leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) 1leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,radius=~size, color = ~co, fill=TRUE,popup=~city) 离散标度映射：1234leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,color = ~pal(type),weight=~size,popup=~city)%&gt;% addLegend("bottomright",pal=pal,values = ~type,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,color = ~pal(type),radius = ~size,fill=TRUE,popup=~city) addLegend("bottomright",pal=pal,values = ~type,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) 连续标度映射：123456leaflet(province_city)%&gt;%addTiles()%&gt;% addCircles(lng=~jd,lat=~wd,fillColor=~cPal(size),weight=~size,stroke=FALSE,fillOpacity=0.8,popup=~city)%&gt;%addLegend("bottomright",pal=cPal,values = ~size,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) leaflet(province_city)%&gt;%addTiles()%&gt;% addCircleMarkers(lng=~jd,lat=~wd,fillColor=~cPal(size),radius = ~size,stroke=FALSE,fillOpacity=0.8,popup=~city)%&gt;%addLegend("bottomright",pal=cPal,values = ~size,title = "GDP等级",labFormat = labelFormat(suffix = "档"),opacity=1) 几种常见的地图风格主题效果：默认点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) 实心点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addCircles(lng=~jd,lat=~wd,color="red",weight=~size,popup=~city) 带轮廓的点形状与几种常见的地图主题风格搭配效果：1234leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldStreetMap")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city) leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldImagery")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city)leaflet(province_city)%&gt;%addProviderTiles("Esri.WorldTerrain")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city)leaflet(province_city)%&gt;%addProviderTiles("Esri.NatGeoWorldMap")%&gt;%addCircleMarkers(lng=~jd,lat=~wd,radius=~size,color=~co,fill=TRUE,popup=~city) 可选择的地图类型：12345678addProviderTiles("Esri.WorldStreetMap") #浅色addProviderTiles("Esri.WorldImagery") #深色深色卫星云图addProviderTiles("Esri.WorldTerrain") #亮白色addProviderTiles("Esri.NatGeoWorldMap") #深沉轮廓色addProviderTiles("Stamen.Toner") #Third-Party TilesaddProviderTiles("Acetate.terrain") #addProviderTiles("CartoDB.Positron")addProviderTiles("Stamen.TonerLabels") # 本篇点形状是可以支持自定义的，需要使用网络图标资源，但是鉴于步骤和实用性，就此略过，如果感兴趣，可以私下探讨。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态地理信息可视化——leaflet在线地图简介]]></title>
    <url>%2F2017%2F06%2F02%2F%E5%8A%A8%E6%80%81%E5%9C%B0%E7%90%86%E4%BF%A1%E6%81%AF%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94leaflet%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[最近稍微涉猎了一下leaflet这个包，突然感到发现了动态可视化的新大门，这个包所提供的地图类型、动态效果、图层展示方式都大大扩展了ggplot作图系统的在数据地图上的缺陷。 leaflet是业界比较流行的JS开源交互式地图包，它支持直接调用OpenStreetMap, Mapbox, and CartoDB等主流地图数据作为辅助图层来进行地理信息数据的可视化操作。 除了这些在线地图素材之外，它对于shapefile格式和json格式以及sp包的空间数据格式的地图数据都有着很好的支持，在图层函数中涵盖了点标记、线条和多边形等常用地理信息可视化图形要素。 该包的代码对R语言的文档输出系统有着良好的支持，可以很方便的嵌入knitr/rmarkdown文档中，也能无缝嵌入shiny系统的webapp中，兼容性可称之为逆天。 接下来以中国地图为例，先对该地图所能呈现和调用的地图类型做一个简短的介绍，深入应用系列技巧可能要等到年后才能陆续更新，大小耐心等吧！ 加载包：12345library(plyr)library(mapdata)library(leaflet)library(maptools)library(ggplot2) 导入中国各省会城市地理信息数据：12345province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") province_city$size&lt;-round(runif(34,5,10),2)province_city$type&lt;-factor(sample(LETTERS[1:5],34,replace=TRUE))co&lt;-substr(rainbow(34),1,7)province_city&lt;-data.frame(province_city,co) leaflet函数的基本语法结构如下：该句加载地图数据，也可以说是对地图的初始化操作，相当于ggplot2作图系统中的ggplot（）函数，会建立一个没有内容的空白图层面板。1m&lt;-leaflet(data=province_city) 该句设定所要展示的图层中心位置，参数为带有数据的地图图层、经纬度信息以及呈现的缩放级别（3~9级不等）。1setView(m,lng=116.38,lat=39.9,zoom=3) 该句会自动调用一个默认的地图图层作为页面底图。其实是一个图层函数，相当于ggplot系统的geom_XXX对象。1m&lt;-addTiles(m) 该句也是一个图层对象函数，主要呈现点对象信息，点标识为常见的雨滴形状，当然也可以进行自定义。1addMarkers(m,lng=~jd,lat=~wd,popup=~city) #地标符号 以上四局代码会制作出一个以province_city为数据源、以(116.38,39.9)为视觉中心，缩放级别为3级，点标识对象为city的中国行政地图出来。 而且图表原生支持动态操作，你可以使用鼠标滚轮进行放大缩小操作（也可以使用页面左上角的加减号进行操作），每一个点标识都是支持鼠标点击显示弹窗信息的。（弹窗信息中支持定义文本、图片、视频、超链接，当然这些需要对html语言有一定的操作经验）。 该函数的另一大特色是，原生支持管道函数操作，让你的代码简洁、易懂、高效。（很多R函数是需要打开dplyr包并借助其完成对于管道函数的支持）。 以上例子我们可以完全使用管道操作函数进行代码简化。1leaflet(province_city)%&gt;%addTiles()%&gt;%setView(lng=116.38,lat=39.9,zoom=3)%&gt;%addMarkers(lng=~jd,lat=~wd,popup=~city) leaflet函数支持的点有三类（我所知的），默认的是雨滴形状（addMarkers），还有两种分别是addCircle、addCircleMarkers。 addCircle是实心点，只有一个颜色属性，addCircleMarkers是带轮廓的圆点，可以分别对轮廓和内园进行颜色设定，两者都支持大小（面积）映射。 当然剩余两种最为常见的地图图层属性就是线和面了，这是物理空间的重要三要素嘛 点图层：addMarkers\addCircle\addCircleMarkers 线图层:addPolylines 面图层：addPolygons 其实这些对象和ggplot中的图层对象对应的很完整，geom_point()\geom_line\geom_polygon 除此之外，无外乎颜色映射参数、图例参数等。 颜色映射对于数据地图而言是最复杂也最为重要的视觉对象，毕竟你的目光中要有很大一部分数据墨水比是由色彩来呈现的，但是小魔方再在前讲解ggplot数据地图系列的时候已经讲解过非常详细的颜色映射规则。 针对数据地图而言，颜色映射要依据数据类型而定，数值型变量（包含定距变量、定比变量）需要使用连续渐变色进行映射，因子变量（包含分类及有序）需要使用分类色、或者同色系的离散渐变进行颜色映射。 在leaflet函数中对颜色进行了非常精准和高效的分类。 用于连续数值的：colorNumeric，colorBin和colorQuantile; 用于分类输入，colorFactor。 colorNumeric：针对数值变量进行均匀插值，将颜色（定义的）连续均匀分布在数值区间内。 colorBin：针对数值型变量进行数量段的分组，然后按照组别分别填色。（其实相当于对数值型变量进行划组，生成有序的因子组，然后以分段因子变量的形式进行颜色映射，但是这个过程在leaflet函数中是自动化完成的，无需我们手工生成新变量，这一点儿是leaflet函数相对于ggplot函数在制作数据地图方面的重要优势）。 colorQuantile：也是针对数值型变量，只是是以百分比分位点的形式将数值变量划分为一组百分比分位点区间（其实理念和过程与colorBin一致，只是从绝对量分组变成了百分比分组），然后进行颜色映射。 colorFactor：这个就是单纯的分类变量（因子或者有序）映射的颜色设置方式。 图例对象：addLegend：是添加图例的图层对象，相当于ggplot中的guilde函数。 接来下给大家大致展现以下leaflet所能呈现的最为常见的几种风格地图样式。 ###你地图可视化类型： 地图类型：1234567addProviderTiles("Esri.WorldStreetMap") #浅色addProviderTiles("Esri.WorldImagery") #深色深色卫星云图addProviderTiles("Esri.WorldTerrain") #亮白色addProviderTiles("Esri.NatGeoWorldMap") #深沉轮廓色addProviderTiles("Stamen.Toner") #Third-Party TilesaddProviderTiles("CartoDB.Positron")addProviderTiles("Stamen.TonerLabels") # 1leaflet()%&gt;%addTiles() #默认风格 1leaflet()%&gt;%addProviderTiles("Esri.WorldStreetMap") 1leaflet()%&gt;%addProviderTiles("Esri.WorldImagery") 1leaflet()%&gt;%addProviderTiles("Esri.WorldTerrain") 1leaflet()%&gt;%addProviderTiles("Esri.NatGeoWorldMap") 1leaflet()%&gt;%addProviderTiles("Stamen.Toner") 1leaflet()%&gt;%addProviderTiles("CartoDB.Positron") 1leaflet()%&gt;%addProviderTiles("Stamen.TonerLabels") 限于字数和篇幅，本篇不宜再写下去了（主要小编太困了，上下眼皮打架，已经困得不行了） 关于leaflet内容，年前先暂时先更新这一篇（如果回家还有时间的话，也许继续更新）。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>地理信息可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>在线地图</tag>
        <tag>leaflet</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转数据地图系列之——地图上的迷你条形图]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%8E%A9%E8%BD%AC%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E7%B3%BB%E5%88%97%E4%B9%8B%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E8%BF%B7%E4%BD%A0%E6%9D%A1%E5%BD%A2%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[最近忙的厉害，产量下降的有点严重，感谢各位还没取关的小伙伴儿。 一周前更新了一篇数据地图上的气泡散点图的内容，不知怎地，这段时间就是跟地图死磕上了，今天还是数据地图，不过是在数据地图上呈现条形图、柱形图。 之前的一篇因为有现成的作图包支持，geom_scatterpie函数不用花费太大力气就解决了数据地图上的气泡散点图问题。 可是到目前为止我还没有发现支持对应坐标位置的条形图、柱形图，这一篇是参考了知乎上大神提供的思路。 加载包：1234library(maptools)library(ggplot2)library(plyr)library(ggmap) 导入地图素材及省会城市经纬度数据123china_shp &lt;-readShapePoly("c:/rstudy/bou2_4p.shp") china_map &lt;- fortify(china_shp) province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") #城市经纬度数据 新建三个指标，2015年和2016年的某经济度量指标（虚构）N15、N16和环比增长率Ratio。 12province_city1&lt;-mutate(province_city,N15=runif(34,min=500,max=1000),N16=runif(34,600,1100),Ratio=round((N16-N15)/N15,3))province_data&lt;-province_city1[sample(nrow(province_city1),10),] 合并后的数据结构如下，随即选取了10个城市的14、15年度某项经济指标（虚构）以及同比增长率。 ggplot的现有图层图形中是没有直接根据点坐标生成条形图、柱形图的，所以这里我们只能曲线救国，使用线条图和误差线来进行模拟。 首先来画底图：12ggplot()+geom_polygon(aes(x=long, y=lat, group=group), data=china_map, fill="white", colour="grey60") 接下来使用geom_linerange函数（也就是条线图函数）进行各个坐标点的模拟柱形绘制。 画出14年的指标值：123ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+N15/max(N15,N16)*5),size=5,color="orange",alpha=0.8) 再叠加一次16年的指标值1234ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",alpha=0.8)+geom_linerange(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",alpha=0.8) 接下来我们来对已经塑造好的双柱条形图进行美化操作，123456789windowsFonts(myFont = windowsFont("微软雅黑")) ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_linerange(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",alpha=0.8)+geom_linerange(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",alpha=0.8)+geom_text(aes(x=jd,y=wd-0.6,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2015", color= "#5B88A0", size=8)+ annotate("text", x=105, y=49, label="● 2016", color= "#FB882C", size=8) 其实最初在网上看到该图（大概是刘万祥老师的博客，在此感谢老师的启发），他的做法是使用geom_errbar图层函数，也就是误差线图层函数，其实理念是一致的。这里给出原方法。12345678ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_errorbar(data=province_data,aes(x=jd-0.5,ymin=wd,ymax=wd+0.7*N15/max(N15,N16)*5),size=3,color="#5B88A0",width=0,alpha=0.8)+geom_errorbar(data=province_data,aes(x=jd+0.5,ymin=wd,ymax=wd+0.7*N16/max(N15,N16)*5),size=3,color="#FB882C",width=0,alpha=0.8)+geom_text(aes(x=jd,y=wd-0.6,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2014", color= "#5B88A0", size=8)+ annotate("text", x=105, y=49, label="● 2015", color= "#FB882C", size=8) 其实如果能换个思路，使用geom_errorh函数，想必一定了以做出横向的条形图。 12345678ggplot()+geom_polygon(aes(x=long, y=lat,group=group),data=china_map, fill="white", colour="grey60")+geom_errorbarh(data=province_data,aes(x=jd,y=wd,xmin=jd-3,xmax=jd+3*N15/max(N15,N16)),size=3,color="#5B88A0",height=0,alpha=0.8)+geom_errorbarh(data=province_data,aes(x=jd,y=wd-0.8,xmin=jd-3,xmax=jd+3*N16/max(N15,N16)),size=3,color="#FB882C",height=0,alpha=0.8)+geom_text(aes(x=jd+0.2,y=wd+1,label=paste0(province_data$province,ifelse(Ratio&gt;0,"▲","▼"),Ratio*100,"%")), data=province_data,family="myFont",size=2.5)+theme_nothing()+annotate("text", x=105, y=52, label="● 2015", color= "#5B88A0", size=7)+ annotate("text", x=105, y=50, label="● 2016", color= "#FB882C", size=7) 以上思路仅供大家大家参考，就像伟大的哈德利.威科姆所说的一样，ggplot只是给你了一个发挥想象力的空间，无拘无束的发挥想象力，总能创造出令人惊讶的作品。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>ggplot2</tag>
        <tag>mini柱形/条形图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转R语言数据地图——地图上的迷你气泡饼图]]></title>
    <url>%2F2017%2F06%2F02%2F%E7%8E%A9%E8%BD%ACR%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E5%9C%B0%E5%9B%BE%E2%80%94%E2%80%94%E5%9C%B0%E5%9B%BE%E4%B8%8A%E7%9A%84%E8%BF%B7%E4%BD%A0%E6%9F%B1%E5%BD%A2%E9%A5%BC%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[这个周末刷微信的时候，偶然看到一篇关于R语言12月更新包的介绍，翻到底部看了一眼，刚好看到一个关于ggplot2的一个图层插件——geom_scatterpie。 这个包安装之后，可以提供给ggplot新的图层函数，并制作出气泡状饼图，饼图可以分类填色，饼图大小可以映射数值变量，特别是将这种图表形式引入地图之中，那么最终呈现的地图上的气泡饼图非常炫酷。 今天刚好整理了下完整思路，顺便分享。 加载包：12345678910library(ggplot2)library(plyr)library("maptools")library(scatterpie)world_map &lt;-readShapePoly("c:/rstudy/wold_map/World_region.shp")x &lt;- world_map@data xs &lt;- data.frame(x,id=seq(0:250)-1) world_map1 &lt;- fortify(world_map) world_map_data &lt;- join(world_map1, xs, type = "full") mydata&lt;-read.xlsx("D:/R/File/WorldGDP.xlsx",sheetName="Sheet1",header=T,encoding='UTF-8',stringsAsFactors = FALSE) 这里我使用2015年全球主要发达国家（15）的GDP、三大产业产比数据来演示此案例，GDP代表气泡图大小、三大产业占比用每一个气泡图的饼图份额占比来表示。 计算全球各国行政区划中心点：12midpos &lt;- function(x) mean(range(x,na.rm=TRUE))centres &lt;- ddply(world_map_data,.(COUNTRY),colwise(midpos,.(long,lat))) 匹配目标国家行政区划中心点：1mapdata&lt;-merge(centres,mydata,by.x="COUNTRY",by.y="FULLName",all.y=TRUE) 利用ggplot2函数结合scatterpie图层对象进行空间数据映射。 修正局部经纬度坐标：因为GDP数据量级太大，我将其折算成5~10之间的标准数，用于映射气泡半径。 123456789101112131415mapdata$order&lt;-as.factor(mapdata$order)mapdata$point&lt;-5*mapdata$GDP/max(mapdata$GDP)+5value&lt;-names(mapdata)[8:10]mapdata[1,c("long","lat")]&lt;-c(-77.013222,38.913611) #华盛顿mapdata[2,c("long","lat")]&lt;-c(2.329671,48.871029) #巴黎mapdata[3,c("long","lat")]&lt;-c(-0.124969,51.516434) #伦敦mapdata[4,c("long","lat")]&lt;-c(12.496336,41.91076) #罗马mapdata[5,c("long","lat")]&lt;-c(4.882042,52.372936) #阿姆斯特丹mapdata[6,c("long","lat")]&lt;-c(-3.704783,40.421502) #马德里mapdata[7,c("long","lat")]&lt;-c(139.650947,35.833005) #东京mapdata[8,c("long","lat")]&lt;-c(13.407002,52.527935) #柏林mapdata[9,c("long","lat")]&lt;-c(8.45468,47.440827) #苏黎世mapdata[11,c("long","lat")]&lt;-c(149.116199,-35.315167) #墨尔本mapdata[12,c("long","lat")]&lt;-c(-43.264882,-22.895071) #里约热内卢mapdata[15,c("long","lat")]&lt;-c(-99.129758,19.449516) #墨西哥城 因为有些国家的领土中含有远离本图的海洋小岛（可能是殖民时代的产物），导致所取的领土中心位置已经严重偏离本土，所以我更改了几个国家首府的经纬度。 1234567ggplot(world_map_data,aes(x=long, y=lat,group=group)) + geom_polygon(fill="white", color="grey")+ geom_scatterpie(data=mapdata,aes(x=long, y=lat,group=order,r=point),cols=value,color=NA, alpha=.8) + coord_equal()+ geom_scatterpie_legend(mapdata$point, x=-160, y=-55)+ scale_fill_wsj()+ theme_nothing(legend=TRUE) 除此之外，你可以可以使用maps包内置的世界地图，这样省去了自己自己加载并整理地图素材数据的麻烦： 12345678world &lt;- map_data('world') ggplot(world, aes(long, lat,group=group)) + geom_polygon(fill="white", color="grey")+ geom_scatterpie(data=mapdata,aes(x=long, y=lat,group=order,r=point),cols=value,color=NA, alpha=.8) + coord_equal()+ geom_scatterpie_legend(mapdata$point, x=-160, y=-55)+ scale_fill_wsj()+ theme_nothing(legend=TRUE) 使用maps包的地图好处是，地图数据是打包封装过的，处理效率比较高，自定义导入的shp格式地图数据需要手动进行各种操作，处理速度非常慢，建议大家尝试。 两幅图带图没有太大差别，导入的shp全球地图是不带南极洲的，但是maps中的世界地图是带有的。 该包的开发者是香港大学的Gangchuang Yu ，12月刚上线不久，下面网址是作者关于该包使用的一个小case，感兴趣可以参考。Gangchuang Yu 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>地理信息可视化</tag>
        <tag>ggplot2</tag>
        <tag>mini饼图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——用数据来聊聊国产电影~]]></title>
    <url>%2F2017%2F06%2F01%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E7%94%A8%E6%95%B0%E6%8D%AE%E6%9D%A5%E8%81%8A%E8%81%8A%E5%9B%BD%E4%BA%A7%E7%94%B5%E5%BD%B1%2F</url>
    <content type="text"><![CDATA[最近国产电影评分风波引起了很多人的关注，豆瓣和猫眼因国产电影评分过低此被电影局约谈了，猫眼电影还因此下线了自己的电影评分系统，作为好奇宝宝，小魔方也来凑一波热闹。 当然今天不是要谈政治啦，刚好最近在学爬虫，那就爬一点儿官产电影的数据，用数据告诉大家，国产电影的真实处境。。（受限于技术手段和代码水平，数据不全，分析过程不敢保证精准，仅作为个人练习使用，请谨慎使用）。 以下是本文所使用的一些依赖包：1234567library(rvest)library(data.table)library(stringr)library("dplyr")library("plyr")library("ggplot2")library(ggthemes) 爬虫过程：1234567891011121314url&lt;-'https://movie.douban.com/tag/中国大陆?start='final &lt;- data.frame()for (m in 1:99)&#123;fun&lt;-function(m)&#123;url&lt;-paste(url,(m-1)*20,"&amp;type=T",sep='')web&lt;-read_html(url,encoding="UTF-8")Name&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)&gt;div.pl2&gt;a")%&gt;% html_text()%&gt;%str_trim()Abstract&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)&gt;div.pl2&gt;p.pl")%&gt;% html_text()%&gt;%str_trim()Point&lt;-web %&gt;% html_nodes("div.star.clearfix&gt;span.rating_nums")%&gt;%html_text()%&gt;%as.numeric()Value&lt;-web %&gt;% html_nodes("div.star.clearfix&gt;span.pl")%&gt;%html_text()%&gt;%as.character()final&lt;-data.frame(Name=Name[1:20],Abstract=Abstract[1:20],Point=Point[1:20],Value=Value[1:20])&#125;final&lt;-rbind(final,fun(m))&#125; 1234final$Name&lt;-sub("\n","",final$Name)final$Name&lt;-sub("/","",final$Name)final$Name&lt;-sub(" ","",final$Name)final&lt;-final[1:1961,] 一共爬取了1961条有效电影记录（不知道这个数量是否能够涵盖16年所有公开上映的国产电影数量，其中可能混杂一些影视剧和娱乐节目）。 数据清洗：以下通过则这匹配提取了各部电影的上映具体日期：12m&lt;-regexpr("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;",final$Abstract,perl=TRUE)final$Date&lt;-substring(final$Abstract,m,m+attr(m,"match.length")-1) 提取出评价人数数据12m1&lt;-regexpr("\\d+",final$Value,perl=TRUE)final$Value&lt;-substring(final$Value,m1,m1+attr(m1,"match.length")-1) 清除掉电影剧情及演员介绍信息中的无关信息：12345final$Abstract&lt;-gsub("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;","",final$Abstract)final$Abstract&lt;-gsub("(\\(中国大陆\\)|\\(美国\\)|\\(台湾\\)|\\(香港\\)|\\(荷兰\\))","",final$Abstract)final$Abstract&lt;-gsub("((\\d&#123;4&#125;-\\d&#123;2&#125;)|(\\d+分钟)|\\(.*?电影节\\)|\\(公映版\\)|汉语普通话)","",final$Abstract)final$Abstract&lt;-gsub("\\/","",final$Abstract)final$Abstract&lt;-gsub("(中国大陆|香港|法国|美国)","",final$Abstract) 预览数据集：1DT::datatable(final) 以下过程将电影的详情介绍信息（包含类型、剧情及演员相关信息）做了分词处理，以便后续进行词云可视化： 12345678910newdata&lt;-paste(final$Abstract,collapse=" ")temp1 &lt;- str_split(newdata,' ')temp1&lt;-temp1[[1]]temp1&lt;-gsub("\\.&#123;3&#125;","",temp1)temp1&lt;-gsub("[a-zA-Z]&#123;2,&#125;","",temp1)temp1&lt;-grep("\\S",temp1,value=T)count1&lt;-count(temp1)count1$x&lt;-as.character(count1$x)mydata&lt;-filter(count1,nchar(x)&gt;=2,freq&gt;=37,x!="()") 数据可视化过程：加载词云包，可视化电影类型及高频出境电影明星的词频可视化： 12library(wordcloud2)wordcloud2(mydata, size = 2, fontFamily = "微软雅黑",minRotation = -pi/6, maxRotation = -pi/6,rotateRatio = 1) 所有电影类型中，排在前五位的是：剧情片、爱情片、喜剧片、动作片、纪录片。纪录片的上映率这么高吗，感觉有点难以置信。 1234567891011#提取并清洗电影演员及明星的出镜率词频数据：temp2&lt;-gsub("[\\((][\\s\\S]*[\\))]","",temp1)temp2&lt;-gsub("\\d+","",temp1)temp2&lt;-grep("\\S",temp2,value=T)count2&lt;-count(temp2)count2&lt;-count2[-c(1:107),]count2$l&lt;-count2$x %in% mydata$x mydata2&lt;-filter(count2,l==FALSE)mydata2&lt;-mydata2[-c(5,8,9,10),]mydata2&lt;-mydata2[,1:2] 电影参演明星及演员可视化词云wordcloud2(mydata2, size =.3,fontFamily = “微软雅黑”,color = “random-light”, backgroundColor = “grey”,shape = ‘star’) 排在前十位的电影明星分别是：范爷、黄晓明、周迅、黄渤、刘桦、邓超、佟大为、李晨、曾志伟、杨幂。 前三十的电影明星如下: 12mydata2&lt;-filter(mydata2,x!="音乐",x!="日本",x!="日语")mydata3&lt;-mydata2[order(-mydata2$freq),][1:30,] 1234567891011121314151617181920212223windowsFonts(myFont = windowsFont("微软雅黑")) ggplot(mydata3,aes(reorder(x,freq),freq))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+theme_wsj()+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(freq+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影最频繁出境明星")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 以上是通过对各部电影的详情描述进行分词所获得的电影类型及明星出镜率分析，接下来我们回到最初的数据集，对各部电影的评分评价分数以及上映年份进行更为详细的可视化分析。（为啥冯导可以与范爷并驾齐驱，可能是因为导演的电影比较多，这里爬的时候没有区分出来） 国产电影上映年份、季度、月份、周度 123456library(lubridate)final$Date&lt;-as.Date(final$Date) final$Year&lt;-year(final$Date)final$Month&lt;-month(final$Date)final$Week&lt;-week(final$Date)final$Quarter&lt;-quarter(final$Date) 以上通过超级好用的时间处理函数lubridate，整理出了所有影片上映的日期的年份、月份、季度、周等时间信息，接下来我们用这四个时间维度分别对电影的评分数据、评论数据进行精细化分析。 123456789101112131415161718datayear&lt;-data.frame(with(final,table(Year)),stringsAsFactors =FALSE)datayear$Year&lt;-as.numeric(as.character(datayear$Year))ggplot(datayear,aes(Year,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+xlim(2000,2017)+ggtitle("国产电影上映年份频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 因为抓取的电影上映年份以16年居多，所以16年是个高峰不足为奇，17年刚过去一周多，数量自然少一些。 1234567891011121314151617dataquarter&lt;-data.frame(with(final,table(Quarter)),stringsAsFactors =FALSE)dataquarter$Quarter&lt;-as.numeric(as.character(dataquarter$Quarter))ggplot(dataquarter,aes(Quarter,Freq))+geom_bar(stat="identity",fill="steelblue")+ggtitle("国产电影上映季度频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 从季度上来看，3、4季度上映上映最为频繁，可能是暑期档接着和贺岁档，时间段比较特殊。 123456789101112131415161718datamonth&lt;-data.frame(with(final,table(Month)),stringsAsFactors =FALSE)datamonth$Month&lt;-as.numeric(as.character(datamonth$Month))ggplot(datamonth,aes(Month,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+scale_x_continuous(breaks=seq(0,12,1))+ggtitle("国产电影上映月份频率分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 从月度数据上来看，也验证了季度数据的趋势，其中第三季度的高峰在9月（算是暑期的尾巴吧），第四季度高峰在12月（年末岁尾的最电影最火了）。 12345678910111213141516171819dataweek&lt;-data.frame(with(final,table(Week)),stringsAsFactors =FALSE)dataweek$Week&lt;-as.numeric(as.character(dataweek$Week))ggplot(na.omit(dataweek),aes(Week,Freq,group=1))+geom_line(size=2,linetype=1,col="steelblue")+scale_x_continuous(breaks=seq(0,52,1))+ggtitle("国产电影上映周分布")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.y=element_line(linetype="dashed",colour="grey60"), panel.grid.major.x=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.y=element_blank(), axis.line.x=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 周度数据也非常有趣，第7周、29周、36、37周、45周和51周出现了几个特高点，基本都超过40部/月的量级，也是与月度上映数据吻合。 接下来分析一下评分最高和最低的十部国产影片： 123456789101112131415161718192021datapointtop&lt;-final[order(-final$Point),][1:15,]ggplot(datapointtop,aes(reorder(Name,Point),Point))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Point+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影评分最高TOP15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 这次真的有点惊讶了，数据显示（仅限所抓取的数据，未覆盖全，并不代表真实情况），评分最高的一部国产剧是老农民，评分高达9.7，从名字上来看挺挺朴实的一部剧，不过我好想没有看过，有空要补脑一下。 评分最高的电影有一个趋势，选材和主题都偏现实和文化类，我觉得这是一个好的现象，能体现电影写实性和文化传承的效果，虽然这样的剧本和影片，可能很多小伙伴不愿意付费去看。 123456789101112131415161718192021datapointbot&lt;-final[order(final$Point),][1:15,]ggplot(datapointbot,aes(reorder(Name,Point),Point))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Point+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影评分最低BOT")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 评分最低的一部是心理罪，仅为2.1，而且评分最低的几部好像也不是大家耳熟能详的名字，好吧突然看到了16年的央视春晚，我能说我已经不看春晚好多年了吗！（实在不好意思，本来是想抓电影的，不知道为啥央视春晚要出来捣乱，肯定是走错片场了~） 以各部电影评价人数多少作为该作品关注度指标，我们可以统计最受关注的电影和最不受关注的电影榜单。 1234567891011121314151617181920212223final$Value&lt;-as.numeric(final$Value)dataValuetop15&lt;-final[order(-final$Value),][1:15,]ggplot(dataValuetop15,aes(reorder(Name,Value),Value))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Value+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影关注度最高TOP15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 关注度最高的一步电影是《让子弹飞》，好吧竟然是好你年前的一步老电影，获评570641。前十名中我看到了《少年派的奇幻漂流》、《大话西游之大圣娶亲》、《人在囧途之泰囧》、《老炮》、《美人鱼》等。虽然热度很高，都是评分并非遥遥领先，基本都在7~8分之间。 12345678910111213141516171819202122dataValuebot15&lt;-final[order(final$Value),][1:15,]ggplot(dataValuebot15,aes(reorder(Name,Value),Value))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+coord_flip()+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(Value+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=3,fontface="bold")+guides(fill=guide_legend(title=NULL))+ggtitle("国产电影关注度最低BOT15")+theme( axis.title = element_blank(), title=element_text(family="myFont",size=18), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=8,family="myFont") ) 最后是几部评论最少的电影，好吧几乎都没咋听过这几部影片的名字，但是好奇怪，虽然关注度不高，但是评分都还是马马虎虎的。是不是可以说国产电影的评分和关注度并非严格相关吧。 声明：限于技术手段和个人水平，以上所抓取数据，进涵盖豆瓣电影库中的一部分，而且其中还混杂诸多娱乐节目、连续剧以及纪录片等，所统计分析结果并不准确，仅作为爬虫和数据可视化练习使用，请勿做为商业决策依据！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>国产电影</tag>
        <tag>rvest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言爬虫可视化——用数据来聊聊2017年首周各大城市空气质量]]></title>
    <url>%2F2017%2F05%2F31%2FR%E8%AF%AD%E8%A8%80%E7%88%AC%E8%99%AB%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E7%94%A8%E6%95%B0%E6%8D%AE%E6%9D%A5%E8%81%8A%E8%81%8A2017%E5%B9%B4%E9%A6%96%E5%91%A8%E5%90%84%E5%A4%A7%E5%9F%8E%E5%B8%82%E7%A9%BA%E6%B0%94%E8%B4%A8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[最近学了些revst包的基础知识，勉强能爬到一些有用的数据，刚好趁着周末，捂着脸跟大家分享。 这一篇使用revst包爬取了中国环保部环境监测中心公布367个主要城市的日度AQI指数信息（2017年1~7日），由于个别城市数据有缺失，可视化过程可能会遗漏部分城市信息。 以下是本篇需要加载的环境包：12345678910library(rvest)library(stringr)library(dplyr)library(ggplot2)library(plyr)library(maptools)library(ggmap)library(Hmisc)library(leafletCN)library(ggthemes) 数据爬取过程：使用revst包爬取了2017年1日至7日的367各主要城市AQI指数数据： 123456789101112131415161718url&lt;-"http://datacenter.mep.gov.cn/report/air_daily/air_dairy.jsp?city=&amp;startdate=2017-01-01&amp;enddate=2017-01-07&amp;page="final &lt;- data.frame()for (m in 1:86)&#123;fun&lt;-function(m)&#123;url&lt;-paste(url,m,sep='')web&lt;-read_html(url,encoding="UTF-8")Num&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(1)") %&gt;% html_text()City&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(2)") %&gt;% html_text()Date&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(3)") %&gt;% html_text()AQI&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(4)") %&gt;% html_text()Level&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(5)") %&gt;% html_text()Mainpo&lt;-web %&gt;% html_nodes("tr&gt;td:nth-child(6)") %&gt;% html_text()final&lt;-data.frame(Num=Num[6:35],City=City[6:35],Date=Date[4:33],AQI=AQI[4:33],Level=Level[3:32],Mainpo=Mainpo[2:31],stringsAsFactors =FALSE)&#125;final&lt;-rbind(final,fun(m))&#125; 数据预处理：12345678910final&lt;-final[1:2569,]final$AQI&lt;-as.numeric(final$AQI)final$Level&lt;-factor(final$Level,levels=c("重度污染","严重污染","轻度污染","中度污染","良","优"),order=TRUE)address&lt;-unique(final$City)add&lt;-get_geo_position(address)final1&lt;-merge(final,add, by.x = "City", by.y = "city",all.x=TRUE)final1$day&lt;-substr(final1$Date,10,10)names(final1)final1&lt;-final1[,c("City","Num","Date","day","AQI","Level","Mainpo","lon","lat")]newdata1&lt;-final1[,c("City","lon","lat","day","AQI","Level","Mainpo")] 地图素材导入：1234567891011121314china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")x &lt;- china_map@data xs &lt;- data.frame(id=row.names(x),x) china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1, xs, type = "full") mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata, type="full")首先查看下所选取的367个主要城市在全国的分布情况：ggplot()+ geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+ geom_point(data=newdata1,aes(x=lon,y=lat),colour="red")+ coord_map("polyconic") + theme_nothing() 用气泡图展示主要城市AQI指数相对高低（气泡图大小及颜色深浅均表示AQI指数强弱） （以下数据基于2017年1日~7日367个城市的平均AQI指数数据） 1234567891011121314newdata2&lt;-newdata1[,c("City","day","AQI")];newdata2$day&lt;-as.factor(newdata2$day)newdata2&lt;-tapply(newdata2$AQI,list(newdata2$City),mean,na.rm=TRUE)newdata2&lt;-as.data.frame(newdata2)newdata2$Address&lt;-rownames(newdata2)names(newdata2)&lt;-c("AQIM","Address");newdata2&lt;-newdata2[,c("Address","AQIM")]newdata2&lt;-na.omit(newdata2)mynewdata&lt;-merge(newdata2,add, by.x = "Address", by.y = "city",all.x=TRUE)ggplot()+ geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+ geom_point(data=mynewdata,aes(x=lon,y=lat,size=AQIM,fill=AQIM),shape=21,colour="black")+ scale_size_area(max_size=5)+ scale_fill_gradient(low="white",high="#D73434")+ coord_map("polyconic") + theme_nothing() ###使用中心辐射热度图及散点图叠加 在宏观上洞察全国各省各地区的空气质量级别及集中分布趋势： 1234567ggplot()+geom_polygon(data=china_map,aes(x=long,y=lat,group=group),fill="#005A32",col="white")+geom_polygon(data=mynewdata,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .5, color = NA)+coord_map("polyconic") +geom_point(data=mynewdata,aes(x=lon,y=lat),col="red",size=1)+scale_fill_gradient2( low = "white",mid="yellow", high = "red")+theme_nothing() 使用热力地图查看整体城市空气质量的地域分布特征：1geojsonMap(mynewdata,"city",popup = paste0(mynewdata$Address,":",dat$AQIM),palette = "Reds", legendTitle = "AQI Index") AQI指数最高的10个城市：12345678910111213141516171819202122mynewdata3&lt;-newdata2[order(-newdata2$AQIM),][1:10,]ggplot(mynewdata3,aes(reorder(Address,AQIM),AQIM))+geom_bar(stat="identity",position="dodge",fill="#D6B869")+theme_wsj()+coord_flip()+scale_fill_wsj("rgby", "")+theme(axis.ticks.length=unit(0.5,'cm'))+geom_text(aes(label=round(AQIM+0.05,1)), position = position_dodge(0.9),hjust=1.1,colour="white",size=5)+guides(fill=guide_legend(title=NULL))+ggtitle("十大污染最严重城市")+theme( axis.title = element_blank(), legend.position='none', panel.grid.major.x=element_line(linetype="dashed",colour="grey60"), panel.grid.major.y=element_blank(), axis.ticks.x=element_blank(), axis.ticks.y=element_line(), axis.ticks.length=unit(0.3,'cm'), axis.line.x=element_blank(), axis.line.y=element_line(), axis.text.x=element_text(size=10), ) 因为所收集的数据中，行政区划名称与现有地图素材有出入，鉴于城市较多，匹配比较麻烦，暂时没有制作基于空气质量水平的离散填充地图，但是方法之前已经多有介绍，感兴趣的小伙伴儿可以借此自己练习。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>空气质量可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——中心放射状路径图]]></title>
    <url>%2F2017%2F05%2F31%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94%E4%B8%AD%E5%BF%83%E6%94%BE%E5%B0%84%E7%8A%B6%E8%B7%AF%E5%BE%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[最近一直在研究ggplot剩余还没有涉略过的图表类型，试图挖掘出一些新的图表形式，就像是该包的作者所暗示的那样，ggplot2只是给你搭建了一个图层语法环境，至于具体能创造出何种图形，全凭自己的想象力。 慢慢的我发现还有一类geom_segment对象自己一直没有尝试过，于是满心欢喜的尝试了一下，果然还是有收获的，我发现通过这个segment图层，可以批量的创建放射状线条图，也就是路径图，这解决了我一直以来的难题，今天顺便分享给大家。 加载包：1234library(ggplot2)library(ggmap)library(plyr)library(maptools) 加载中国省份行政地图：123china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp")x &lt;- china_map@data xs &lt;- data.frame(id=row.names(x),x) 转换为数据框并合并城市数据：12345china_map1 &lt;- fortify(china_map) china_map_data &lt;- join(china_map1, xs, type = "full") mydata &lt;- read.csv("c:/rstudy/geshengzhibiao.csv")china_data &lt;- join(china_map_data, mydata, type="full")province_city &lt;- read.csv("c:/rstudy/chinaprovincecity.csv") 拆分兰州数据：1234newdata&lt;-subset(province_city,city=="兰州")newdata1&lt;-subset(province_city,city!="兰州")sourcex&lt;-rep(newdata$jd,33)sourcey&lt;-rep(newdata$wd,33) 制作以兰州为中心的点对点作图数据：（可以类比之前REmap路径图数据源） 1234567tagetx&lt;-newdata1$jdtagety&lt;-newdata1$wddataA&lt;-data.frame(sourcex,sourcey,tagetx,tagety)dataB&lt;-newdata1[,1:2]dataC&lt;-cbind(dataB,dataA)dataC$point&lt;-round(runif(33,10,50)) 图形可视化过程利用geom_segment（）图层制作放射路径图： 123456ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+coord_map("polyconic") + geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 这里再稍微的扩展一下，其实以上你看到的放射状线条是兰州与其他城市之间的直线，之所以变的有弧度，只是因为加了地图投影的缘故，这里我可以取消投影参数，看下效果。 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 这里取消投影参数之后，线条变成了点间直线，但是默认的不带投影的地图看起来与我们认知中的中国地图形状有些不一样，好像被压扁了一样。 其实这里还有一个图层函数也可以做出来这种放射状线条，geom_curve（）,图层，不过它本身就是有弧度的曲线，曲率可以通过参数进行微调。 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+theme_nothing() 曲率调整：12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"),curvature = 0.8)+ #用于调整曲率，范围在-1~1之间。theme_nothing() 12345ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+geom_curve(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"),curvature =-0.5)+theme_nothing() 当然，通过图形叠加，我们还可以重复多次这样的放射状线条图。 以下以北京为例：12345678910newdataA&lt;-subset(province_city,city=="北京")newdataB&lt;-subset(province_city,city!="北京")soux&lt;-rep(newdataA$jd,33)souy&lt;-rep(newdataA$wd,33)tagx&lt;-newdataB$jdtagy&lt;-newdataB$wddataD&lt;-data.frame(soux,souy,tagx,tagy)dataE&lt;-newdataB[,1:2]dataF&lt;-cbind(dataD,dataE)dataF$point&lt;-round(runif(33,10,50)) 两个中心的路径图（兰州、北京） 1234567ggplot()+geom_polygon(data=china_data,aes(x=long,y=lat,group=group),fill="white",colour="grey60")+coord_map("polyconic") + geom_segment(data=dataC,aes(x=sourcex,y=sourcey,xend=tagetx,yend=tagety,colour="red"))+geom_segment(data=dataF,aes(x=soux,y=souy,xend=tagx,yend=tagy,colour="blue"))+geom_point(data =province_city,aes(x=jd,y=wd),colour="red")+theme_nothing() 当然，根据实际需要，你也可以将图层叠加N次，从而制作出与业务需求一致的多中心放射状路径图，这里只给出思路和大致步骤，感兴趣的小伙伴可以自己尝试。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>路径图</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R语言可视化——ggplot绘制中心密度辐射图]]></title>
    <url>%2F2017%2F05%2F30%2FR%E8%AF%AD%E8%A8%80%E5%8F%AF%E8%A7%86%E5%8C%96%E2%80%94%E2%80%94ggplot%E7%BB%98%E5%88%B6%E4%B8%AD%E5%BF%83%E5%AF%86%E5%BA%A6%E8%BE%90%E5%B0%84%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[今天这篇算是之前ggplot2图表系列的增补。 因为在ggplot2中一直没有看到好的关于密度辐射图（或者称它为热力辐射图，就是那种PowerMap中可以通过颜色色度探查区域指标分布密度的图表类型）的合适解决方案，最近在看github官网上ggmap的介绍帖，看到作者在ggmap函数中嵌套了geom_polygon图层并并使用fill=..level..参数和stat=”density_2d”来来制作类似的热度辐射图。 我就突发奇想，如果不是通过ggmap而是通过ggplot函数是否也可以呢，果然也是可以出效果的，先将方法介绍如下： 加载包：首先需要加载如下包：1234library(ggplot2) library(plyr) library(maptools) library(ggmap) 导入数据集：接下来导入两个数据集： 其中一个是中国省级边界轮廓图，早期关注过数据小魔方的用户大概都知道，我曾经共享过一个名为rstudy的文件包（我在刘万祥老师的公众号里发现的，现在应该也还可以获取），如果手上没有数据可以添加魔方学院的QQ群，在群共享里查找R语言资料。（共享文件比较多，可能需要找一阵子） 另一个是之前在讲解REmap热度辐射图时用过的城市价值指标数据集，推送后会共享在魔方学院的QQ群里。 导入数据集： 123china_map&lt;-readShapePoly("c:/rstudy/bou2_4p.shp") #地图数据 china_map1 &lt;- fortify(china_map) #转换为数据框data&lt;- read.csv(file="D:\\R\\map\\MoveChart\\cityvaluetop10.csv",header=T) #城市指标数据 因为这里使用地图仅仅是作为底图用作定位信息，可以说是陪衬，所以无需对地图和城市指标进行合并。 图表的正式生成过程：画底图：12p&lt;-ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="#005A32",col="white");p 添加热度图层12p&lt;-p+geom_polygon(data=data,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .3, color = NA)+coord_map("polyconic");p 调整热度图层1(p&lt;-p+scale_fill_gradient2( low = "white",mid="yellow", high = "red")） 清楚冗余元素1(p&lt;-p+theme_nothing()) 可以给以上热图添加散点辅助观测1(p&lt;-p+geom_point(data=data,aes(x=lon,y=lat),col="white")) 当然，你也可以给三点指定城市的指标数据使其变成气泡图1(p&lt;-p+geom_point(data=data,aes(x=lon,y=lat,size=prob),col="white")+scale_size_area(max_size=6)) 记得清除掉第5步，即从第四步开始 至于实际的数据标签，指标名称和区域名称，酌情添加，但是针对地图类图表，数据展示到位即可，不建议添加太多标签，影响美观性。 针对本图表类型，核心参数是第二个geom_polygon()中的fill = ..level..和stat=”density_2d”统计变换，使得多边形图转换成为二维水平密度图，但是至今我还没有搞懂里面的算法是什么样的，只能大概模仿出来，至于怎么用，看大家自由发挥了，效果跟真正的热力辐射图还是有些差别，但是勉强能用。 总结下，用到的所有代码如下：12345678ggplot()+geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),fill="#005A32",col="white")+geom_polygon(data=data,aes(x=lon,y=lat,fill = ..level..), stat="density_2d", alpha = .3, color = NA)+coord_map("polyconic") +geom_point(data=data,aes(x=lon,y=lat,size=prob),col="white")+scale_size_area(max_size=6)+scale_fill_gradient2( low = "white",mid="yellow", high = "red")+theme_nothing() #这一句清空主题的代码是ggmap包中的，必须加载才能用 感兴趣的小伙伴儿可以移步去github官网上搜索ggmap官方介绍，里面使用ggmap调用谷歌地图做的热度图，效果很棒。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>热力地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用ggplot2制作静态数据可视化报告!]]></title>
    <url>%2F2017%2F05%2F30%2F%E7%94%A8ggplot2%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A%2F</url>
    <content type="text"><![CDATA[对于可视化呈现来说，一个图表呈现的数据信息是有限的，更多时候，我们需要呈现的是多角度多维度的数据信息。 这时候，就需要用在同一个版面上容纳多副相关的图表形成一个版面的可视化报告，今天是网易数独的一个数据报告，使用ggplot还原了（其中用到的国旗出现了点儿小bug，至今没有解决，有知情的的大神还望赐教！） 加载包：12345678library("tidyverse")library("scales")library("countrycode")library("ggimage")library("grid")library("Rmisc")library("showtext")library("Cairo") 以下是原图： 很明显这个版面是由上下两幅图表组成的，那个使用R来做也是同样的思路，制作两幅 单独的图然后将二者合并。 图形可视化过程以下是模仿过程的代码： 图一（上半部分圆环图）1234name&lt;-c("司法界","商人","外交领域","军人","记者","经济学家","医学界","学术界","工程师")label&lt;-factor(name,levels=name,order=T)percent&lt;-c(0.196,0.166,0.126,0.107,0.083,0.083,0.082,0.078,0.072)mydata&lt;-data.frame(label,percent) 12mydata$anti_percent&lt;-1-mydata$percentmydata1&lt;-gather(mydata,index,Percent,-label) 1234conservation_status &lt;-paste0(name,"\n",percent(percent))names(conservation_status)&lt;-nameglobal_labeller &lt;-labeller(.defalut=label_value,label=conservation_status)font.add("myfont","msyhl.ttc") 123456789101112131415p1&lt;-ggplot()+geom_col(data=mydata1,aes(x=1,y=Percent,fill=index),width=.2)+scale_fill_manual(values=c("percent"="#00A0E9","anti_percent"="#EAEBEB"),guide=FALSE)+xlim(0.6,1.1)+coord_polar(theta="y")+facet_grid(.~label,labeller=global_labeller)+theme_minimal()+theme( line=element_blank(), axis.text=element_blank(), title=element_blank(), panel.spacing=unit(0,"cm"), strip.text=element_text(family="myfont",size=25,lineheight=1.2), plot.margin=unit(c(.5,3,0,2),'lines') );p1 1234567setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")CairoPNG(file="infography1.png",width=1600,height=480)showtext.begin()grid.newpage()p1showtext.end()dev.off() 图二：（堆积条形图）1234567name2&lt;-c("学术界","商人","公务员","外交领域","经济学家","工程师","司法界","医学界","军人","教育工作者","其他")巴西&lt;-c(1,1.7,0,0.5,1.4,0.3,2.2,2.25,0.3,1.4)中国&lt;-c(0.15,0,3.2,0.5,0.35,6.3,0.75,0.2,1.1,1.1)埃及&lt;-c(3.15,0.5,0.3,1.7,1.9,1.9,3.5,0.4,0.9,0)印度&lt;-c(0.6,2.1,0.35,0.4,1.9,1,4.2,0.5,0,0)韩国&lt;-c(2,1.6,2.1,1.7,1.75,0,1.2,0,3.2,0)美国&lt;-c(0,2.6,0.2,0.1,0,0,8.6,0.4,1,1.1) 1234567891011121314151617colorpalette&lt;-c("#5B8DA2","#155E7B","#E49D85","#1C98CB","#6CC5E8","#22918B","#6DB3A8","#211E1F","#E35840","#76261C","#798A94")mydata2&lt;-data.frame(巴西,中国,埃及,印度,韩国,美国)mydata2&lt;-data.frame(t(mydata2))mydata2[,11]&lt;-16-apply(mydata2,1,sum)names(mydata2)&lt;-name2mydata2&lt;-mydata2/16mydata2$country&lt;-rownames(mydata2)coname&lt;-c("Brazil","China","Egypt","India","Korea","United States of America")code=countrycode(coname, "country.name", "iso2c")mydata2$code&lt;-coderownames(mydata2)&lt;-NULLmydata2&lt;-cbind(mydata2[,12:13],mydata2[,1:11])mydata3&lt;-gather(mydata2,cato,percent,-1:-2)mydata3$cato&lt;-factor(mydata3$cato,levels=rev(name2),order=T) 123456789101112131415161718192021p2&lt;-ggplot(data=mydata3,aes(x=country,y=percent,fill=cato))+geom_bar(stat="identity",width=0.8)+expand_limits(y =-.1) +scale_x_discrete(limits=rev(c("巴西","中国","埃及","印度","韩国","美国")))+scale_fill_manual(values=rev(colorpalette),breaks=rev(levels(mydata3$cato)))+geom_flag(y=-.08,aes(image=code),size=.1) + guides(fill=guide_legend(keywidth=3.5,keyheight=.2,nrow=1,title.hjust=.5,title.vjust=.5,title=NULL))+geom_text(aes(label=ifelse(mydata3$percent!=0,percent(mydata3$percent),"")),position=position_stack(vjust=0.5),family="myfont",size=6.5,col="white")+coord_flip()+theme_transparent()+theme(text=element_text(family="myfont",size=25,lineheight=1.2),legend.direction="horizontal",legend.key.size=unit(.5,'cm'),legend.position="top",line=element_blank(),panel.spacing=unit(1,"cm"),title=element_blank(),axis.text.x=element_blank(),plot.margin=unit(c(0,0,0,2),'lines'));p2 图层合并：1234567setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")CairoPNG(file="infography2.png",width=1600,height=720)showtext.begin()grid.newpage()p2showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
        <tag>版面设计</tag>
        <tag>图层控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[百分比方块比较图]]></title>
    <url>%2F2017%2F05%2F29%2F%E7%99%BE%E5%88%86%E6%AF%94%E6%96%B9%E5%9D%97%E6%AF%94%E8%BE%83%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该图案例来自经济学人，国内看到刘老师在博客上用Excel仿制过，这里仍然使用ggplot2进行仿制。 加载包：12library(ggplot2)library(ggmap) 构造数据源：12345678910111213141516171819mydata&lt;-data.frame(X=c(3,7,11,15,19),A=c(2471,1893,1248,1078,556),B=c(1385,951,869,784,366),C=c(56,7,19,13,40))mydata$Axmin&lt;-mydata$X-sqrt(mydata$A)/30mydata$Axmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Aymin&lt;-0mydata$Aymax&lt;-sqrt(mydata$A)/15mydata$Bxmin&lt;-mydata$X+sqrt(mydata$A)/30-sqrt(mydata$B)/15mydata$Bxmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Bymin&lt;-0mydata$Bymax&lt;-sqrt(mydata$B)/15mydata$Cxmin&lt;-mydata$X+sqrt(mydata$A)/30-sqrt(mydata$C)/10mydata$Cxmax&lt;-mydata$X+sqrt(mydata$A)/30mydata$Cymin&lt;-0mydata$Cymax&lt;-sqrt(mydata$C)/10mydata$text&lt;-c("University of\n Pennsylvania","University of\n Notre Dame","Princeton\n University","Stanford\n University","California Institute\n of Technology")mydata$full&lt;-c("31663","16548","27189","34348","5225") 可视化图形过程：12345678910111213141516171819windowsFonts(myFont = windowsFont("arial"))ggplot(mydata)+geom_rect(aes(xmin=Axmin,xmax=Axmax,ymin=Aymin,ymax=Aymax),fill="#59AF8A")+geom_rect(aes(xmin=Bxmin,xmax=Bxmax,ymin=Bymin,ymax=Bymax),fill="#0074A3")+geom_rect(aes(xmin=Cxmin,xmax=Cxmax,ymin=Cymin,ymax=Cymax),fill="#C72733")+geom_linerange(aes(x=X+2,ymin=0,ymax=4.8),col="grey",linetype=2)+ylim(-.5,6)+labs(x="",y="")+geom_text(aes(x=X,y=4.5,label=text),size=4,fontface="bold",family="myFont")+geom_label(aes(x=X,y=3.7,label=full),fill="#EFE5CA",colour="black",fontface="bold",size=3.5,label.r=unit(0.15,"lines"),family="myFont")+geom_text(aes(x=Axmin,y=Aymax,label=A),hjust=-.2,vjust=1,size=3.5,col="white",family="myFont")+geom_text(aes(x=Bxmin,y=Bymax,label=B),hjust=-.2,vjust=1,size=3.5,col="white",family="myFont")+geom_text(aes(x=Cxmin,y=Cymax,label=C),hjust=-.2,vjust=1,size=3,col="white",family="myFont")+annotate("text",x=2.5,y=5.7,label="Class Struggle",col="black", size=6,family="myFont")+ annotate("text",x=8.85,y=5.2,label="A spot on a university or college's waitlist rarely translates into admission. A look at the numbers for several institutions", size=4,family="myFont")+ annotate("text",x=3.9,y=-.32,label="Source:The universities and 2011-2012 Common Data Set",col="black",size=3,family="myFont")+ annotate("text",x=19.8,y=-.32,label="The wall Street Jaunual",col="black",size=3,family="myFont")+ theme_nothing()+theme(panel.background=element_rect(fill="#F5F2E1")) 建议保存尺寸（1035*330） 更加紧促的方式：123456789101112131415161718mydata1&lt;-mydata[,5:8]names(mydata1)&lt;-c("xmin","xmax","ymin","ymax")mydata1$Group&lt;-"A"mydata2&lt;-mydata[,9:12]names(mydata2)&lt;-c("xmin","xmax","ymin","ymax")mydata2$Group&lt;-"B"mydata3&lt;-mydata[,13:16]names(mydata3)&lt;-c("xmin","xmax","ymin","ymax")mydata3$Group&lt;-"C"mynewdata&lt;-rbind(mydata1,mydata2,mydata3)mynewdata$Group&lt;-factor(mynewdata$Group,order=T)ggplot(mynewdata)+geom_rect(aes(xmin=xmin,xmax=xmax,ymin=ymin,ymax=ymax,fill=Group))+scale_fill_manual(values=c("#59AF8A","#0074A3","#C72733")) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国人口金字塔动态图]]></title>
    <url>%2F2017%2F05%2F29%2F%E4%B8%AD%E5%9B%BD%E4%BA%BA%E5%8F%A3%E9%87%91%E5%AD%97%E5%A1%94%E5%8A%A8%E6%80%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[中国人口金字塔动态图 以下是一个之前在网络上引起巨大轰动的人口金字塔动态图： 没有找到原始数据，后来在UN的官网上找到了一个五年间隔的数据，顺便还原了下图表： 加载包：1234567library(ggplot2)library(animation)library(dplyr)library(tidyr)library(xlsx)library(ggthemes)setwd("E:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表/动态图表") 整理并导入人口结构数据：12345678female&lt;-read.xlsx("Population.xlsx",sheetName="Female",header=T,encoding='UTF-8',check.names = FALSE)male&lt;-read.xlsx("Population.xlsx",sheetName="Male",header=T,encoding='UTF-8',check.names = FALSE)female&lt;-female%&gt;%gather(Year,Poputation,-1)male&lt;-male%&gt;%gather(Year,Poputation,-1)female$Poputation&lt;-female$Poputation*-1male$sex&lt;-"male";female$sex&lt;-"female" 12345China_Population&lt;-rbind(male,female)%&gt;%mutate(abs_pop=abs(Poputation))China_Population$agegroup&lt;-factor(China_Population$agegroup,levels=c("0-4","5-9","10-14","15-19","20-24","25-29","30-34","35-39","40-44","45-49","50-54","55-59","60-64","65-69","70-74","75-79","80+") ,order=T)m&lt;-seq(1950,2015,by=5) 可视化动态图表：12345678910111213141516171819202122232425262728saveGIF(&#123; for (i in m) &#123; title &lt;- as.character(i) year_data &lt;- filter(China_Population,Year==i) g1&lt;-ggplot(year_data,aes(x =agegroup,y=Poputation,fill=sex,width=1)) + coord_fixed()+ coord_flip() + geom_bar(data=subset(year_data,sex=="female"),stat = "identity") + geom_bar(data=subset(year_data,sex=="male"), stat = "identity") + scale_y_continuous(breaks = seq(-70000,70000,length=9), labels = paste0(as.character(c(abs(seq(-70,70,length=9)))), "m"), limits = c(-75000, 75000)) + theme_economist(base_size = 14) + scale_fill_manual(values = c('#D40225', '#374F8F')) + labs(title=paste0("Population structure of China:", title), caption="Data Source:United Nations Department of Economic and Docial Affairs\nPopulation Division\nWorld Population Prospects,the 2015 Revision" ,y="Population",x="Age") + guides(fill=guide_legend(reverse = TRUE))+ theme( legend.position =c(0.8,0.9), legend.title = element_blank(), plot.title = element_text(size=20), plot.caption = element_text(size=12,hjust=0), ) print(g1) &#125;&#125;,movie.name='japan_pyramid.gif',interval=0.5,ani.width=700,ani.height=600) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>gif</tag>
        <tag>动态图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态世界地图]]></title>
    <url>%2F2017%2F05%2F28%2F%E5%8A%A8%E6%80%81%E4%B8%96%E7%95%8C%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[上帝视角——给世界一个特写~ 最近在研究使用R包制作动画图表，也就是类似GIF动图，感觉很有趣，也是动态图表呈现的一个非常独特的领域，刚刚研究出了些成果，今天这篇分享使用GIF动画+球型投影来制作呈现地球转动效果的动态GIF图表。 过程要使用谢益辉大神的动画包——animation，该包依赖可执行程序——ImageMagic，所以导入animation包之前要提前下载并安装该动画软件。 加载包：12345678910library(ggplot2)library(maps) library(plyr) library(grid)library(showtext)library(Cairo)library(xlsx)library(RColorBrewer)library(dplyr)library("animation") 可视化过程： 本次使用maps中的世界地图素材： 1world_map &lt;- map_data("world") 预览地图素材效果： 为了区分大洲，我将该地图中的国家按照地理位置进行了归类（七大洲） 1234567data&lt;-read.csv("D:/R/mapdata/Word_State.csv",stringsAsFactors = FALSE,check.names = FALSE) ggplot(data,aes(map_id=region))+geom_map(aes(fill=Address),map=world_map,col="white")+expand_limits(x=world_map$long,y=world_map$lat)+scale_y_continuous(breaks=(-2:2)*30) +scale_x_continuous(breaks=(-4:4)*45)+coord_map("ortho", orientation = c(30,110,0)) 呈现特定视角地球：筛选其中某一个州进行特定角度呈现： 123456789101112131415161718data1&lt;-data[data$Address=="North America",]ggplot()+geom_map(data=data,aes(map_id=region),map=world_map,col="white",fill="#A3A3A3")+geom_map(data=data1,aes(map_id=region,fill=Address),map=world_map,col=NA)+expand_limits(x=world_map$long,y=world_map$lat)+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+coord_map("ortho", orientation = c(0,-95,0))+guides(fill=FALSE) +theme( axis.ticks=element_blank(), axis.text=element_blank(), axis.title=element_blank(), panel.background=element_rect(fill="white",colour=NA), panel.grid.major = element_line(colour = "grey60",size=.25), panel.grid.minor = element_line(colour = "grey60",size=.25) ) 12345678world_map_data&lt;-merge(world_map,data,all.x=TRUE)midpos&lt;-function(x) mean(range(x,na.rm=TRUE))centres&lt;-ddply(world_map_data,.(Address),colwise(midpos,.(long,lat)))centres&lt;-centres[centres$Address!="Antarctica",]centres$angle&lt;-0centres$long[centres$Address=="Asia"]=100centres$long[centres$Address=="North America"]=-100centres$long[centres$Address=="Oceania"]=130 计算每个大洲的地区中心（个别中心偏离中心大陆太远，需要手动调整） 使用grid的版面控制系统进行多图排版：123456789101112131415161718192021222324252627282930313233setwd("E:/数据可视化/R/R语言学习笔记/可视化/Shiny/动态图表")world_map_data&lt;-arrange(world_map_data,group,order)CairoPNG(file="wordmap.png",width=1600,height=1200)showtext.begin()grid.newpage()pushViewport(viewport(layout=grid.layout(2,3)))vplayout&lt;-function(x,y)&#123;viewport(layout.pos.row =x,layout.pos.col=y)&#125;for(i in 1:nrow(centres))&#123;mydata&lt;-world_map_data[world_map_data$Address==centres$Address[i],]p&lt;-ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group),fill="grey95",colour="grey",size=.25)+geom_map(data=mydata,aes(map_id=region),map=world_map_data,colour="white",fill="#F8766D",size=.25)+coord_map("ortho",orientation=c(centres$lat[i],centres$long[i],0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+labs(title=centres$Address[i])+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),text=element_text(size=20),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),plot.title=element_text(size=20,family="myfont",hjust=.5),plot.margin = unit(c(ifelse(i&lt;=3,5,.5),1,ifelse(i&gt;=3,5,.5),1),"lines"))print(p,vp=vplayout(ifelse(i&lt;=3,1,2),ifelse(i&lt;=3,i,i-3)))&#125;grid.text(label="God's Perspective",x=.01,y=.98,gp=gpar(col="black",fontsize=35),draw=TRUE,just="left")grid.text(label="Data Source:DataMofang",x=.02,y=.02,gp=gpar(col="black",fontsize=20),draw=TRUE,just="left")showtext.end()dev.off() 使用animation包将361帧地图合并为GIF动画使用animation包将361帧地图合并为GIF动画（友情提示：机器性能太弱请不要随便玩火，容易爆内存~！！！） 1234567891011121314151617181920saveGIF(&#123;ani.options(interval=.15,convert=shQuote("D:/Program Files/ImageMagick-7.0.5-Q16/convert.exe"))for(i in 0:360)&#123;p&lt;-ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group,fill=Address),colour="grey",size=.25)+coord_map("ortho",orientation=c(0,i,0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+scale_fill_brewer(name="million($)",palette="Set2")+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank())print(p)&#125;&#125;,movie.name='Movingworld_map.gif',ani.width=1200,ani.height=1000) 因为原图有13M，微信公众平台限制图片大小为5m，所以大图能就没法奉上了，不过又做了一个压缩版的小图，效果如下： 12345678910111213141516171819202122draw = function(i)&#123; ggplot()+geom_polygon(data=world_map_data,aes(x=long,y=lat,group=group,fill=Address),colour="grey",size=.25)+coord_map("ortho",orientation=c(0,i,0))+scale_y_continuous(breaks=(-6:6)*15) +scale_x_continuous(breaks=(-12:12)*15)+scale_fill_brewer(name="million($)",palette="Set2")+theme(panel.background=element_rect(fill="white",colour=NA),panel.grid.major = element_line(colour = "grey60",size=.25),panel.grid.minor = element_line(colour = "grey60",size=.25),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank()) &#125; oopts=ani.options(ffmpeg = "D:/Program Files/ImageMagick-7.0.5-Q16/ffmpeg.exe") saveVideo(&#123; for(i in 1:36) print(draw(i)) ani.options(interval = 0.6,nmax=230)&#125;, video.name ="world_map_move.gif",other.opts="-b 4000k") 该案例涉及到的技术面比较广，需要使用循环、grid图形版面控制、地图投影、自编函数、颜色填充等，仅作为探索可视化道路上的一个小台阶，也许现在看起来有些高不可攀，但是当你真正深入的了解R语法以及函数编程和ggplot2之后，就没那么难理解了！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>gif</tag>
        <tag>动态地图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[炫彩仪表盘图表]]></title>
    <url>%2F2017%2F05%2F28%2F%E7%82%AB%E5%BD%A9%E4%BB%AA%E8%A1%A8%E7%9B%98%E5%9B%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[该图表示利用ggplot2来模拟制作实际商务分析场景中应用的单值仪表盘。 这种单值仪表盘最初发源于汽车驾驶舱的控制系统，也广泛用于飞行器、机械驾驶舱内的导航控制系统，但用在商务分析与决策系统却是别有一番风味。 加载包：12345library(ggplot2)library("showtext")library(Cairo)library("Rmisc")library(grid) 生成辅助数据：1234font.add("myfont","msyh.ttc")bardata&lt;-seq(from=0,to=270,length=1000)rectdata&lt;-seq(from=0,to=270,by=27)%&gt;%c(360)setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170415") 12target&lt;-1/3assist&lt;-target*270 生成单个仪表盘：123456789101112131415161718192021CairoPNG(file="dashboard.png",width=800,height=540)showtext.begin()ggplot(data=NULL)+geom_rect(aes(xmin=rectdata[-12],xmax=rectdata[-1],ymin=5,ymax=10),fill="#F2F2F2",col="white")+geom_bar(aes(x=bardata,y=5,col=bardata),stat="identity",fill=NA,size=2)+geom_text(aes(x=rectdata[-12],y=-5,label=seq(0,100,by=10)),vjust=.5,hjust=.5,size=5,family="myfont",col="#0F1110")+geom_segment(aes(x=assist,y=-50,xend=assist,yend=-10),arrow =arrow(length=unit(0.4,"cm")),size=1.2,col="red")+geom_point(aes(x=assist,y=-50),shape=21,fill="white",col="black",size=7)+annotate("text",x=315,y=-30,label=percent(target),size=12,hjust=.5,vjust=.5,family="myfont",col=ifelse(target&lt;.5,"#F32626","#38E968"),fontface="plain")+ annotate("text",x=315,y=-15,label="指标1",size=15,hjust=.5,vjust=.5,family="myfont")+ ylim(-50,12)+coord_polar(theta="x",start=179.85)+scale_colour_gradient(low="#F32626",high="#38E968",guide=FALSE)+theme_minimal()+theme(text=element_blank(),line=element_blank(),rect=element_blank())showtext.end()dev.off() 123set.seed(123)target&lt;-runif(5,0,1)assist&lt;-270*target 生成仪表盘组合：123456789101112131415161718192021222324252627CairoPNG(file="bigdashboard.png",width=1500,height=675)showtext.begin()grid.newpage()pushViewport(viewport(layout=grid.layout(1,5)))vplayout&lt;-function(x,y)&#123;viewport(layout.pos.row =x,layout.pos.col=y)&#125;for(i in 1:5)&#123;p&lt;-ggplot(data=NULL)+geom_rect(aes(xmin=rectdata[-12],xmax=rectdata[-1],ymin=5,ymax=12),fill="#F2F2F2",col="white")+geom_bar(aes(x=bardata,y=5,col=bardata),stat="identity",fill=NA,size=2)+geom_text(aes(x=rectdata[-12],y=-5,label=seq(0,100,by=10)),vjust=.5,hjust=.5,size=3.5,family="myfont",col="#0F1110")+geom_segment(aes(x=assist[i],y=-50,xend=assist[i],yend=-10),arrow =arrow(length=unit(0.4,"cm")),size=1.2,col="red")+geom_point(aes(x=assist[i],y=-50),shape=21,fill="white",col="black",size=7)+annotate("text",x=315,y=-30,label=percent(target[i]),size=7.5,hjust=.5,vjust=.5,family="myfont",col=ifelse(target[i]&lt;.5,"#F32626","#38E968"),fontface="plain")+ annotate("text",x=315,y=-15,label=paste0("指标",i),size=8.5,hjust=.5,vjust=.5,family="myfont")+ ylim(-50,12)+coord_polar(theta="x",start=179.85)+scale_colour_gradient(low="#F32626",high="#38E968",guide=FALSE)+theme_minimal()+theme(text=element_blank(),line=element_blank(),rect=element_blank())print(p,vp=vplayout(1,i))&#125;showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>仪表盘</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>仪表盘</tag>
        <tag>排版</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[鱼眼百分比信息图]]></title>
    <url>%2F2017%2F05%2F27%2F%E9%B1%BC%E7%9C%BC%E7%99%BE%E5%88%86%E6%AF%94%E4%BF%A1%E6%81%AF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该图表案例来源于某财经杂志，我是从刘万祥老师那里看来的，之后又在知乎上发现有人发帖求做法。我就抱着试一试的心态，用ggplot2尝试着做，没想到真的让我给弄出来了。 这里分享给大家我的做法和思路： 加载包：123library(tidyverse)require(grid)library("Rmisc") 生成辅助数据：12345px1&lt;-seq(from=0,to=10,length=1000)py1&lt;-sqrt(5^2-(px1-5)^2)Project1x&lt;-c(px1,rev(px1))Project1y&lt;-c(py1,-py1) 圆环数据构造过程：这里全部都是同一个套路的数据 123456789101112131415161718192021Project1&lt;-data.frame(lon=Project1x,lat=Project1y)Project1$group&lt;-"ProjectA"Project1$order&lt;-1:nrow(Project1)Project2&lt;-data.frame(lon=Project1x+15,lat=Project1y)Project2$group&lt;-"ProjectB"Project2$order&lt;-1:nrow(Project2)Project3&lt;-data.frame(lon=Project1x+30,lat=Project1y)Project3$group&lt;-"ProjectC"Project3$order&lt;-1:nrow(Project3)Project4&lt;-data.frame(lon=Project1x+45,lat=Project1y)Project4$group&lt;-"ProjectD"Project4$order&lt;-1:nrow(Project4)Project5&lt;-data.frame(lon=Project1x+60,lat=Project1y)Project5$group&lt;-"ProjectE"Project5$order&lt;-1:nrow(Project5)Project&lt;-rbind(Project1,Project2,Project3,Project4,Project5) 1ggplot(Project)+geom_path(aes(lon,lat,group=group)) 多边形数据构造过程：123456789101112131415161718192021222324Proj1&lt;-Project1[,1:2]%&gt;%filter(lat&lt;=-4)Proj1[nrow(Proj1)+1,]&lt;-c(8,-4)Proj1$group&lt;-"ProjA"Proj1$order&lt;-1:nrow(Proj1)Proj2&lt;-Project2[,1:2]%&gt;%filter(lat&lt;=-3)Proj2[nrow(Proj2)+1,]&lt;-c(24,-3)Proj2$group&lt;-"ProjB"Proj2$order&lt;-1:nrow(Proj2)Proj3&lt;-Project3[,1:2]%&gt;%filter(lat&lt;=0)Proj3[nrow(Proj3)+1,]&lt;-c(40,0)Proj3$group&lt;-"ProjC"Proj3$order&lt;-1:nrow(Proj3)Proj4&lt;-Project4[,1:2]%&gt;%filter(lat&lt;=3)Proj4$group&lt;-"ProjD"Proj4$order&lt;-1:nrow(Proj4)Proj5&lt;-Project5[,1:2]%&gt;%filter(lat&lt;=4)Proj5$group&lt;-"ProjE"Proj5$order&lt;-1:nrow(Proj5)Projdata&lt;-rbind(Proj1,Proj2,Proj3,Proj4,Proj5) 可视化图形：12windowsFonts(myFont=windowsFont("msyh.ttc"))labeldata&lt;-data.frame(x=seq(from=5,to=65,length=5),y=c(-4,-3,0,3,4),label=sprintf("%2d%%",c(10,20,50,80,90))) 12345678910111213p1&lt;-ggplot()+geom_polygon(data=Projdata,aes(x=lon,y=lat,group=group),fill="#92D24F",col=NA)+geom_path(data=Project,aes(x=lon,y=lat,group=group),col="black",size=1.2)+geom_text(data=labeldata,aes(x=x,y=y+1,label=label),hjust=.5)+scale_x_continuous(breaks=labeldata$x,labels=paste0("Project",LETTERS[1:5]))+ylim(-5.5,6)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text.y=element_blank(),plot.margin = unit(c(.2,.2,1,.2), "cm")) 12345678910111213p2&lt;-ggplot()+geom_polygon(data=Projdata,aes(x=lon,y=lat,group=group),fill="#FFC000",col=NA)+geom_path(data=Project,aes(x=lon,y=lat,group=group),col="black",size=1.2)+geom_text(data=labeldata,aes(x=x,y=y+1,label=label),hjust=.5)+scale_x_continuous(breaks=labeldata$x,labels=paste0("Project",LETTERS[1:5]))+ylim(-5.5,6)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text.y=element_blank(),plot.margin = unit(c(.2,.2,1,.2), "cm")) 12345grid.newpage()pushViewport(viewport(layout=grid.layout(2,2)))vplayout &lt;- function(x,y)&#123;viewport(layout.pos.row = x, layout.pos.col = y)&#125;print(p1,vp=vplayout(1,1:2))print(p2,vp=vplayout(2,1:2)) 1234library(gridExtra)library("plyr")library("lattice")multiplot(p1,p2,layout=matrix(c(1,1,2,2),nrow=2,byrow=TRUE)) 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>信息图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[北京历史天气emoji表情包可视化]]></title>
    <url>%2F2017%2F05%2F27%2F%E5%8C%97%E4%BA%AC%E5%8E%86%E5%8F%B2%E5%A4%A9%E6%B0%94emoji%E8%A1%A8%E6%83%85%E5%8C%85%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[最近在网络上看到一个R圈大神开发的关于emoji表情包，可以将表情装入ggplot2的aes（）函数美学映射内。 感觉这是一个很好的创意，我学着它的路子，抓取了北京历史天气数据，用该不同表情还原了一年中的不同天气。 数据获取：1234567891011library(RCurl)library(XML)library(dplyr)library(stringr)library(tidyr)library(plyr)library(rvest)library(ggimage)library(Cairo)library(showtext)library(lubridate) 1234url&lt;-"http://lishi.tianqi.com/beijing/index.html"myheader &lt;-c("User-Agent"="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36")webpage&lt;-getURL(url,httpheader=myheader)mymonthlink&lt;-getHTMLLinks(url,externalOnly=TRUE)%&gt;%grep(".*?2016\\d&#123;2&#125;.html",.,value=T) 以下是最初想用的办法解决数据清洗问题，但是结果失败了，于是又转回传统的路子。 失败的探索：1234567891011#####page1&lt;-getURL(mymonthlink[2],.encoding="gbk")#rd&lt;-iconv(page1,"gbk","utf-8")#rdhtml&lt;-htmlParse(rd,encoding="UTF-8")#cesh&lt;-readHTMLList(rdhtml,trim=TRUE,elFun=xmlValue)%&gt;%grep("\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;",.,value=T)#cesh&lt;-cesh%&gt;%sub("([a-z])(\\()(\\\)","",.)#cesh&lt;-cesh1%&gt;%str_split(',')%&gt;%plyr::ldply(.fun=NULL)#cesh$V1&lt;-cesh$V1%&gt;%sub("[a-z]\\(","",.)%&gt;%as.Date()#names(cesh)&lt;-c("date","high","low","state","wind","index")#####以上代码写了一半写不下去了，我有rvest为啥要用RCurl，肯定自己脑抽筋了！ 用rvest包解决了问题：123456789101112mynewdata&lt;-c()for (i in mymonthlink)&#123;mymonthdata&lt;-read_html(i,encoding="gbk")%&gt;%html_nodes("div.tqtongji2&gt;ul")%&gt;%html_text(trim=FALSE)%&gt;%str_trim(.,side="right")%&gt;%.[-1]mynewdata&lt;-c(mynewdata,mymonthdata)&#125;mynewdata1&lt;-mynewdatamynewdata&lt;-mynewdata1%&gt;%gsub("\t\t\t|\t|\r\n","",.)%&gt;%str_split(' ')%&gt;%plyr::ldply(.fun=NULL)%&gt;%.[,-2]names(mynewdata)&lt;-c("date","high","low","state","wind","index")mynewdata$date&lt;-as.Date(mynewdata$date)mynewdata$high&lt;-as.numeric(mynewdata$high)mynewdata$low&lt;-as.numeric(mynewdata$low) 数据清洗与预处理：123456#cleanning the dirty data. unique(mynewdata$state) happy&lt;-c("晴","阵雨~晴","多云转晴","多云~晴","雷阵雨~晴","阴~晴","霾~晴","浮尘~晴") depressed&lt;-c("霾","阴","多云","晴~多云","霾~多云","晴~霾","多云~霾","阵雨转多云","多云转阴","阴~多云","多云~阴","晴~阴","阵雨~多云","小雨~多云","小雨~阴","霾~雾","小雪~阴","阴~小雪","小雨~雨夹雪") angry&lt;-c("小雨","雨夹雪","小雪","雷阵雨","阵雨","中雨","小到中雨","雷阵雨~阴","多云~雷阵雨","阴~雷阵雨","霾~雷阵雨","多云~阵雨","晴~阵雨","阴~小雨","阵雨~小雨") Terrified&lt;-c("中到大雨","暴雨","雷阵雨~中到大雨") 12345678910#create a new factor[categorical] varibale.mynewdata$mode&lt;-NULLmynewdata$mood&lt;-ifelse(mynewdata$state%in% happy,"happy",ifelse(mynewdata$state%in% depressed,"depressed",ifelse(mynewdata$state%in% angry,"angry","Terrified"))) mynewdata &lt;- within(mynewdata,&#123; mood_code &lt;- NA mood_code[mood=="happy"]&lt;-"1f604" mood_code[mood=="depressed"]&lt;-"1f633" mood_code[mood=="angry"]&lt;-"1f62d" mood_code[mood=="Terrified"]&lt;-"1f621"&#125;) 12345678#tidy the time/date varibales.mynewdata$month&lt;-as.numeric(as.POSIXlt(mynewdata$date)$mon+1)mynewdata$monthf&lt;-factor(mynewdata$month,levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) mynewdata$weekday&lt;-as.POSIXlt(mynewdata$date)$wdaymynewdata$weekdayf&lt;-factor(mynewdata$weekday,levels=rev(0:6),labels=rev(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE)mynewdata$week &lt;- as.numeric(format(mynewdata$date,"%W"))mynewdata&lt;-ddply(mynewdata,.(monthf),transform,monthweek=1+week-min(week))mynewdata$day&lt;-day(mynewdata$date) 可视化图形：123setwd("F:/数据可视化/R/R语言学习笔记/可视化/ggplot2/商务图表")write.table(mynewdata,"historyweather.csv",sep=",",row.names=FALSE)mynewdata&lt;-read.csv("historyweather.csv",stringsAsFactors = FALSE,check.names = FALSE) 123456789mytheme&lt;-theme( rect=element_blank(), axis.ticks=element_blank(), text=element_text(face="plain",lineheight=0.9,hjust=0.5,vjust=0.5,size=15), title=element_text(face="plain",lineheight=0.9,hjust=0,vjust=0.5,size=30), axis.title=element_blank(), strip.text=element_text(size = rel(0.8)), plot.margin = unit(c(5,2,5,2),"lines") ) 日历emoji表情天气可视化123456789101112CairoPNG("emoji1.png",1000,870)showtext.begin()ggplot(mynewdata,aes(weekdayf,monthweek,fill=high))+geom_tile(colour='white')+scale_fill_gradient(low=NA, high=NA,guide=FALSE)+ggtitle("The emoji-weather visualization of beijing in 2016")+scale_y_reverse(breaks=seq(from=6,to=0,by=-1))+ggimage::geom_emoji(aes(image=mood_code),size=.1)+facet_wrap(~monthf ,nrow=3)+mythemeshowtext.end()dev.off() 环形日历emoji表情天气可视化123456789mytheme2&lt;-theme( rect=element_blank(), axis.ticks=element_blank(), text=element_text(face="plain",lineheight=0.9,hjust=0.5,vjust=0.5,size=15), title=element_text(face="plain",lineheight=0.9,hjust=0,vjust=0.5,size=30), axis.title=element_blank(), strip.text=element_text(size = rel(0.8)), plot.margin = unit(c(1,1,1,1),"lines") ) 1234567891011121314CairoPNG("emoji2.png",1200,1200)showtext.begin()ggplot(mynewdata,aes(x=factor(day),y=monthf,fill=high))+geom_tile(colour='white')+expand_limits(y =c(-12,12))+scale_x_discrete(position=c("bottom"))+coord_polar(theta="x")+scale_fill_gradient(low=NA, high=NA,guide=FALSE)+ggimage::geom_emoji(aes(image=mood_code),size=.015)+geom_image(aes(x=0,y=-12),image ="weather.png", size =.15)+ggtitle("The emoji-weather visualization of beijing in 2016")+mytheme2showtext.end()dev.off() and this one is a small-background in the second photo which i search on the web. 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
        <tag>emoji</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿ECO事件圆环图]]></title>
    <url>%2F2017%2F05%2F26%2F%E4%BB%BFECO%E4%BA%8B%E4%BB%B6%E5%9C%86%E7%8E%AF%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[该案例取自刘万祥老师的博客——EexclPro。最初使用Excel完成，相当复杂，我自己是没有那个水平了，所以本例使用R语言完成。 还原度相对来说比较高，但是该图实用性确实不很高，经济学人也只是偶尔亮出来装点门面而已。 加载包：123456789library("ggplot2")library("Cairo")library("ggmap")library("xlsx")library("lubridate")library("reshape2")library("showtext")library("grid")library("plyr") 案例图:经济学人版 刘老师版 关键步骤： 12setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170403")ECOdata&lt;-read.xlsx("ECOCircle.xlsx",sheetName="Sheet1",header=T,encoding="UTF-8",stringsAsFactors=FALSE) 123456f&lt;-c(99,91,84,77)for (i in 1:nrow(ECOdata))&#123;m&lt;-sum(ECOdata[i,3:6]==1)h&lt;-grep(1,ECOdata[i,3:6])ECOdata[i,h+2]&lt;-f[1:m]&#125; 创建时间轴：12newdate&lt;-seq(from=as.Date("2014-01-01"),to=as.Date("2014-12-31"),by="1 day")newmonth&lt;-month(newdate) 12345mydata&lt;-data.frame(newdate,newmonth);mydata$ID&lt;-1:nrow(mydata)mydata$Type&lt;-ifelse(mydata$newmonth%%2==0,"A","B")mydata$Scale&lt;-100a&lt;-seq(from=90,to=-90,length=181);b&lt;-seq(from=90,to=-90,length=184)mydata$Circle&lt;-c(a,b) 合并数据：12mynewdata&lt;-merge(mydata,ECOdata,by.x="newdate",by.y="date",all.x=T)mynewdataone&lt;-melt(na.omit(mynewdata), id.vars =names(mynewdata)[1:7],variable.name = "Class", value.name = "Fact") 12circlemonth&lt;-seq(15,345,length=12)circlebj&lt;-rep(c(-circlemonth[1:3],rev(circlemonth[1:3])),2) 1234mynewdataoneA&lt;-mynewdataone[mynewdataone$Fact!=0&amp;mynewdataone$ID&lt;180,]mynewdataoneA&lt;-mynewdataoneA[!duplicated(mynewdataoneA[,1]),]mynewdataoneB&lt;-mynewdataone[mynewdataone$Fact!=0&amp;mynewdataone$ID&gt;180,]mynewdataoneB&lt;-mynewdataoneB[!duplicated(mynewdataoneB[,1]),] 可视化图形：123456789101112131415161718192021222324252627282930313233343536font.add("myfont","msyhl.ttc")CairoPNG(file="ECOCircle.png",width=1000,height=1050)showtext.begin()ggplot()+geom_bar(data=mydata[mydata$Type=="A",],aes(x=ID,y=Scale),stat="identity",width=1,fill="#ECEDD1",col="#ECEDD1")+geom_bar(data=mydata[mydata$Type=="B",],aes(x=ID,y=Scale),stat="identity",width=1,fill="#DFE0B1",col="#DFE0B1")+geom_point(data=mynewdataone[mynewdataone$Fact!=0,],aes(x=ID,y=Fact,fill=Class),size=5,shape=21,col="white")+ylim(-90,130)+scale_fill_manual(limits=c("Legislative","Referendum","President","Primary"),values=c("#93A299","#CF543F","#B5AE53","#86825B"),labels=c("立法","公投","总统","初选"))+geom_text(data=mynewdataoneA,aes(x=ID,y=max(mynewdataoneA$Fact)+20,label=State,angle=Circle),family="sans",size=5,hjust=0)+geom_text(data=mynewdataoneB,aes(x=ID,y=max(mynewdataoneB$Fact)+20,label=State,angle=Circle),family="sans",size=5,hjust=1)+geom_text(data=NULL,aes(x=circlemonth,y=30,label=paste0(1:12,"月"),angle=circlebj),family="myfont",size=7,hjust=.5,vjust=.5)+guides(colour=guide_legend(title=NULL))+coord_polar(theta="x")+labs(title="2014年全球选举事件图",subtitle="这是一幅用心良苦的好图",caption="Source：Economics\nMake:EasyCharts",x="",y="",fill="")+theme(text=element_text(family="myfont"),axis.text=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.position=c(0.03,0.92),legend.background=element_blank(),legend.key=element_blank(),legend.key.size=unit(1.55,'cm'),legend.key.height=unit(1.2,'cm'),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50),plot.subtitle=element_text(size=35),plot.caption=element_text(size=25,hjust=0),plot.margin=unit(c(.5,.5,.5,.5),"lines"),)showtext.end()dev.off() 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国经管类核心期刊地域分布数据可视化]]></title>
    <url>%2F2017%2F05%2F26%2F%E4%B8%AD%E5%9B%BD%E7%BB%8F%E7%AE%A1%E7%B1%BB%E6%A0%B8%E5%BF%83%E6%9C%9F%E5%88%8A%E5%9C%B0%E5%9F%9F%E5%88%86%E5%B8%83%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[最近在看文献，看的有些烦躁了，想找点儿数据练练手，刚好看到百度百科有这个关于经管类核心期刊的汇总表，顺手就抓过来练习练习。 本来百度百度中核心期刊栏目的列表里，关于经济学72中核心期刊的详细地址不全，我申请了编辑字条，编完一直在审核，想想算了，根据百度百科的审核流程和效率，估计不知道要申到猴年马月了，自己搜了确实的地址信息。 以下数数据的爬取、清洗和可视化过程： 数据抓取：加载包：12345678910library(rvest)library(stringr)library(dplyr)library(ggplot2)library(plyr)library(rjson)library(Cairo)library(Cairo)library(showtext)library(maptools) 表格爬取（这里用revst来爬，效率特别高） 12url&lt;-"http://baike.baidu.com/link?url=VRCRtZ-GR4Lv483tBm2d6IQ3mOjTlcc1z80EBBzFwCGAlDT16NvxH_yqshJdSD95_AEEu_Hzg4uE3ok3bDIohkkl9sTwpE9cVJcRP7RpAmVBIeEmwZ4gdXNetbA8lvmU"info&lt;-read_html(url,encoding="UTF-8")%&gt;%html_nodes("table")%&gt;%html_table(header=TRUE,fill=TRUE) 数据清洗：表格的提取过程：12economic&lt;-info[[1]][,-1];names(economic)&lt;-c("Name","Address");economic$Class&lt;-"C"mangement&lt;-info[[2]][,-1];names(mangement)&lt;-c("Name","Address");mangement$Class&lt;-"M" 打开数据编辑器，自己把缺失的地址补全1fix(economic) 剔除掉地址中的哪些邮箱类信息（可能会干扰经纬度抓取的准确性）1234myfulldata&lt;-rbind(economic,mangement)myfulldata$Address&lt;-sub("\\（\\d.+\\）","",myfulldata$Address)myfulldata$Address&lt;-sub("\\(\\d.+\\)","",myfulldata$Address)myfulldata$Address&lt;-sub("\\d.+\\信箱","",myfulldata$Address) 抓取经纬度数据使用过百度地图的API匹配经纬度（各位小伙伴儿高抬贵手，自己去申请个API把，不要老拿我的API玩耍，这个有限额，用完了就不能用了） 123456789101112131415baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"address&lt;-myfulldata$Addressfor(location in address)&#123;url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="")url_string &lt;- URLencode(url) json&lt;- readLines(url_string, warn=F) geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng) baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,longitude=baidu_lng,latitude=baidu_lat,stringsAsFactors=FALSE) 合并经纬度数据：123mynewfulldata&lt;-merge(myfulldata,result,by.x="Address",by.y="address",all.x=T)mynewfulldata&lt;-unique(mynewfulldata)mynewfulldata&lt;-mynewfulldata[,c(2,1,4,5,3)];names(mynewfulldata)[3:4]&lt;-c("lon","lat") 地域可视化：导入地图数据：12china_map &lt;- readShapePoly("D:/R/rstudy/CHN_adm/bou2_4p.shp") china_map1 &lt;- fortify(china_map) 接下来我们通过几张图表来展示社科经管类核心期刊的地域分布、城市分布情况。 经管类总体数量分布：提取出所有的地址中地级市数量： 12345678910111213diyufenbujing&lt;-myfulldata$Addressdiyufenbu&lt;-sub("中国","",diyufenbujing)part1&lt;-grep("市",diyufenbu,value=T)part1&lt;-sub("(安徽|四川省|湖南省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbu,value=T,invert =T)part2&lt;-sub("四川","",part2)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 所有核心期刊的城市分布情况 1234567891011121314151617181920CairoPNG(file="hexinqikanall.png",width=800,height=600)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="经管类核心期刊数量城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=1.2,colour="white",size=8)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 经济学核心期刊城市分布：123456789101112diyufenbujingji&lt;-myfulldata[which(myfulldata$Class=="C"),]$Addressdiyufenbujingji&lt;-sub("中国","",diyufenbujingji)part1&lt;-grep("市",diyufenbujingji,value=T)part1&lt;-sub("(河南省|湖南省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbujingji,value=T,invert =T)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 123456789101112131415161718192021setwd("F:/微信公众号/公众号——数据小魔方/2017年3月/20170319")CairoPNG(file="jingjixue1.png",width=900,height=620)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="经济学核心期刊城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=1,colour="white",size=7)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 管理学核心期刊城市分布：123456789101112diyufenbujinggl&lt;-myfulldata[which(myfulldata$Class=="M"),]$Addressdiyufenbujinggl&lt;-sub("中国","",diyufenbujinggl)part1&lt;-grep("市",diyufenbujinggl,value=T)part1&lt;-sub("(安徽省|四川省)","",part1)order&lt;-gregexpr("市",part1)city&lt;-c()for(j in 1:length(part1))&#123;city&lt;-substring(part1,0,order[[j]][1])&#125;part2&lt;-grep("市",diyufenbujinggl,value=T,invert =T)cityvalue2&lt;-paste0(substring(part2,1,2),"市")cityvalue2&lt;-c(city,cityvalue2)%&gt;%count()%&gt;%arrange(-freq) 1234567891011121314151617181920CairoPNG(file="jingjixue2.png",width=800,height=600)font.add("myfont","msyh.ttc")showtext.begin()ggplot(cityvalue2,aes(reorder(x,freq),freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="管理学核心期刊数量城市分布",caption="数据来源：百度百科")+geom_text(aes(label=freq),hjust=2,colour="white",size=10)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 下面我们通过几张数据地图来观察一下这些期刊在地图空间分布上的趋势。 经济学类核心期刊地域分布123456789101112131415161718192021222324mynewfulldata1&lt;-filter(mynewfulldata,Class=="C")CairoPNG(file="hexinqikanC.png",width=1200,height=640)font.add("myfont","msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_polygon(data=mynewfulldata,aes(x=lon,y=lat,fill = ..level..),stat="density_2d",alpha=.8,color=NA)+geom_point(data=mynewfulldata,aes(x=lon,y=lat),shape=21,size=3,fill="orange",col="white")+ scale_fill_gradient2(low="white",mid="yellow", high = "red")+ coord_map("polyconic")+ guides(fill=FALSE)+ labs(title="经济学核心期刊地域分布密度图",caption="数据来源：百度百科")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 管理学核心期刊地域分布12345678910111213141516171819202122232425mynewfulldata2&lt;-filter(mynewfulldata,Class=="M")CairoPNG(file="hexinqikanM.png",width=1200,height=640)font.add("myfont","msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_polygon(data=mynewfulldata2,aes(x=lon,y=lat,fill = ..level..),stat="density_2d",alpha=.8,color=NA)+geom_point(data=mynewfulldata2,aes(x=lon,y=lat),shape=21,size=3,fill="#0C8DC4",col="white")+ scale_fill_gradient2(low="white",mid="yellow", high = "red")+ coord_map("polyconic")+ guides(fill=FALSE)+ labs(title="管理学核心期刊地域分布密度图",caption="数据来源：百度百科")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), panel.grid=element_blank(), panel.background=element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 经济学和管理学核心期刊地域分布对比图。123456789101112131415161718192021222324CairoPNG(file="jingguanphoto.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=china_map1,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_point(data=mynewfulldata,aes(x=lon,y=lat),shape=21,size=8,fill="transparent",col="#014D64")+ geom_point(data=mynewfulldata2,aes(x=lon,y=lat),shape=21,size=3,fill="#C72E29",col="transparent",alpha=.6)+ coord_map("polyconic") + labs(title="中国社科类经管核心期刊地域分布图",caption="数据来源：百度百科")+ annotate("text", x=63.4, y=45, label="○ C: 经济学", color= "#014D64", size=6.5) + annotate("text", x=65, y=42, label=" ● M: 管理学", color= "#C72E29", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.caption=element_text(family="myfont",size=18,hjust=0), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.6), )showtext.end()dev.off() 不知道大家看了以上核心期刊的地域分布滞后，内心作何感想呢，本来想写几句短评到的，但是相信通过以上可视化形式的呈现，大家都已经明白我想说什么了！ 再者自己是个学渣，这个话题不适合我~—~，有啥感想，都可以写在底部评论里，让我看到你们的声音！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实习僧招聘网招聘信息爬虫数据可视化]]></title>
    <url>%2F2017%2F05%2F25%2F%E5%AE%9E%E4%B9%A0%E5%83%A7%E6%8B%9B%E8%81%98%E7%BD%91%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[这一篇是在最近开始接触RSelenium以来，第一次尝试使用该工具操控浏览器获取网页数据，确实方便不少。第一次操作能够这么顺利确实令我非常诧异，仅以此篇纪念我的学习经历！ 我本来对实习僧网站是没什么好感的，因为之前自己在实习僧上投的实习简历几乎全部都石沉大海了（一个文科生偏要去投数据分析岗不碰壁才怪~_~）！ 然鹅看到最近知乎爬虫圈儿里的两大趋势：爬美图；爬招聘网站。 后来大致了解下了，几乎各类大型的招聘文章都被别人爬过了，自己再去写免不了模仿之嫌，而且大神们都是用Python去爬的（Python我刚学会装包和导数据），自己也学不来。现在只能选一个还没怎么被盯上的招聘网站，没错就它了——实习僧。 实习僧 说老实话，实习僧的网站做的还是不错的，看着结构挺简单，可是我用比较主流的Rvest和RCurl都失败了（主要自己技术太渣了，抓包又抓不好）。最后只能勉强用RSelenium爬完了全部所需内容。（用代码驱动浏览器的好处就是不用怎么考虑时延和伪装包头了，但是要遍历成百上千页网址真的很耗时，爬完这个数据用了大约40多分钟）。 以下是爬虫部分： 加载包及配置环境：1234567891011121314151617library(rvest)library(stringr)library(plyr)library(dplyr)library(Rwebdriver)library(dplyr)library(Rwordseg)library(wordcloud2)library(treemap)library(showtext)library(Cairo)library(ggplot2)library(scales)library(grid)library(RColorBrewer)library(ggimage)library(geojsonio) 本文主要用的Rwebdriver包来驱动Chrome浏览器，使用该包需要提前配置好桌面环境： 下载selenium启动服务器； 下载Chrome的chromedriver插件并放入Chrome主目录（添加系统环境变量） 下载Rwebdriver包 启动服务PowerShell启动12cd "D:/Rwebdriver-master"java -jar selenium-server-standalone-3.3.1.jar Rstudio启动：12start_session(root="http://localhost:4444/wd/hub/",browser ="chrome")options(stringsAsFactors=FALSE,warn=FALSE) 爬虫主程序：网页遍历123遍历实习僧的招聘信息网页baseurl&lt;-"http://www.shixiseng.com/interns?k=&amp;t=zh&amp;c=%E5%85%A8%E5%9B%BD&amp;p="pageurl&lt;-paste0(baseurl,1:500) 爬虫主体代码部分：123456789101112131415homepage=internship=companyweb=company=Position=address=salary=period=duration=NULLfun&lt;-function(url)&#123;post.url(url=url)baseinfo&lt;-read_html(url,encoding="utf-8")homepage &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.names&gt;a")%&gt;% html_attr("href")internship&lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.names&gt;a")%&gt;%html_text()companyweb&lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part&gt;a")%&gt;%html_attr("href")company &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part&gt;a")%&gt;%html_text()Position &lt;-baseinfo%&gt;%html_nodes("div.po-name&gt;div.part")%&gt;%html_text()address &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.addr&gt;span")%&gt;%html_text()salary &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(2)")%&gt;%html_text()period &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(5)")%&gt;%html_text()duration &lt;-baseinfo%&gt;%html_nodes("div.po-detail&gt;div.xz&gt;span:nth-child(8)")%&gt;%html_text()interninfo&lt;-data.frame(homepage,internship,companyweb,company,Position,address,salary,period,duration)&#125; 爬虫执行程序：1234567final&lt;-data.frame()for (i in pageurl)&#123;final&lt;-rbind(final,fun(i))&#125;quit_session()DT::datatable(final) 保存本地：1write.table (final,"D:/R/File/shixiseng.csv",sep=",",row.names=FALSE) 数据清洗接下来做数据清洗：12345678910111213141516171819202122mydata&lt;-read.csv("D:/R/File/shixiseng.csv",stringsAsFactors=FALSE,check.names=FALSE) mydata&lt;-mydata[-5001,]#补全实习发布单位的招聘信息主页：mydata$homepage&lt;-str_c("http://www.shixiseng.com",mydata$homepage,sep="")#补全实习发布单位的公司信息主页：mydata$companyweb&lt;-str_c("http://www.shixiseng.com",mydata$companyweb,sep="")mydata$work&lt;-str_split(mydata$Position[1:10], " - ", simplify=TRUE)[,2]#清除salary中的空格和斜杠mydata$salary&lt;-str_trim(mydata$salary,side="both")mydata$salary&lt;-str_extract(mydata$salary,"\\d+\\-\\d+")#拆分实习工资的高低区间mydata$salary_low&lt;-str_split(mydata$salary, "-", simplify=TRUE)[,1]mydata$salary_high&lt;-str_split(mydata$salary, "-", simplify=TRUE)[,2]#清除period中的汉字和特殊字符mydata$period&lt;-str_extract(mydata$period,"\\d+")#清除duration中的汉字和特殊字符mydata$duration&lt;-str_extract(mydata$duration,"\\d+")mydata &lt;- tbl_df(mydata)mydata&lt;-select(mydata,-Position)#因为address中所含的地址可能有存在多个，影响我们后续的可视化分析，这里为了方便起见，一律使用第一个地址。mydata$address_unique&lt;-str_split(mydata$address, ",", simplify=TRUE)[,1]至此，数据清洗工作告一段落，接下来我们要进入分析与可视化阶段 12345678910111213names(mydata)"homepage"-------公司实习职位简介"internship"-----公司招聘性质"companyweb"-----公司主页"company"--------公司名称"address"--------所在地"address_unique"-所在地（唯一值，只取默认第一个地址）"salary"---------实习工资区间"salary_low"-----实习工资（最低值）"salary_high"----实习工资（最高值）"period"---------到岗天数（每周）"duration"-------实习周期（按月算）"work"-----------具体职位 我们最终获取的清洗后数据如上所示。假如本次项目需求（虚拟）要求我们获取以下几个问题： 实习僧的实习招聘主页岗位主要是什么性质的？ 哪些公司最缺实习僧？ 实习岗位具体分布的地域和城市？ 哪些城市对实习僧的需要最为强烈？ 实习工资大致什么水平，与城市和地域是否有关系？ 实习岗位一般都要求每周到岗多少天？ 实习周期一般需要多长时间？ 哪些职位需求最为频繁，职位需要量与城市之间的大致是如何分布的？ 带着这些个问题，让我们尽情的畅游在可视化的世界里吧…… 数据可视化阶段实习僧的实习招聘主页主要是什么性质的？12length(unique(mydata$internship))3357 绝望了，一共爬了5000条实习职位信息，做了去重处理，显示仍有3357条，建议实习僧的产品运营团队考虑下要不要标准化一下这个职位性质，内门怎么可以创造这么多独特的职位~_~ 对于这个问题，真的难倒我了，因为所爬数据中的职位性质没有统一的预设标准，所以我只能用文本分词的形式来进行提取了，先分词，然后统计高频词，最后按照词频来进行模糊分析啦（可我我对文本挖掘一窍不通啊~_~） 123top100&lt;-table(mydata$internship)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;% arrange(desc(Freq))%&gt;%.[1:100,]treemap(top100, index=c("Var1"), vSize="Freq",title='实习僧职位性质分布图',palette='RdBu',fontsize.title=18,fontsize.labels=12,fontface.labels="plain",fontfamily.title="mono",fontfamily.labels="mono") 从实习职位分布图上来看，人力资源实习生职位需求最为强烈，其次是运营、财务、新媒体，这些类型的职位多为现代新兴服务业，更为符合大学生这一群体的口味和兴趣。 123456myrevieww&lt;-mydata$internshipthewords &lt;- segmentCN(myrevieww,nature=T)%&gt;%unlist()thewords &lt;- gsub("[a-z]|\\.", "", thewords)thewords&lt;-thewords[nchar(thewords)&gt;1]reviewdata&lt;-table(thewords)%&gt;%as.data.frame(stringsAsFactors = FALSE)%&gt;% arrange(desc(Freq))%&gt;%filter(thewords!="实习生")wordcloud&lt;-wordcloud2(reviewdata[1:1000,],color="random-light",minSize=.6,size=1,backgroundColor="dark",minRotation=-pi/6,maxRotation=-pi/6,fontFamily ="微软雅黑");wordcloud 但是将职位性质分词整理成关键词后，似乎结果有所不同。 哪些公司最缺实习僧？这里我们来统计所爬职位信息中公司发布职位的频率，发布最多的则作为评价公司对实习生需求的标准。123myjob&lt;-table(mydata$company)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))#看看前十名都是那些公司：myjob15&lt;-arrange(myjob[1:15,],desc(Freq)) 1234567891011121314151617181920212223242526CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/circle-rose.png",width=1580,height=950)showtext.begin()ggplot(data=myjob15,aes(x=reorder(Var1,-Freq),y=Freq,fill=Freq))+geom_linerange(aes(ymin=0,ymax=42),linetype=5,size=.2,colour="#858585")+geom_image(aes(x=0,y=-40),image="D:/R/Image/image1.jpg", size =.2)+geom_text(aes(y=45,label=paste0(Var1,"\n",Freq)),vjust=1,size=5)+geom_bar(stat="identity",width=1,col="white")+geom_hline(yintercept =54,color="black",size=.5)+geom_point(aes(y=48,size=Freq),shape=21,fill="#ED7D31",,alpha=0.6,col="orange")+labs(title="Top 15 of Company",caption="Data Source:shixiseng")+coord_polar(theta="x")+ylim(-40,60)+scale_size_area(max_size=20)+guides(fill=FALSE,size=guide_legend(reverse=TRUE,title=NULL))+theme_minimal()+theme(axis.title=element_blank(),axis.text=element_blank(),panel.grid=element_blank(),legend.text=element_text(family="myfont",size=12),legend.title=element_text(family="myfont",size=15,hjust=1),plot.title=element_text(family="myfont",size=35),plot.caption=element_text(family="myfont",size=18,hjust=0,lineheight=1.2))showtext.end()dev.off() 1write.table (myjob[1:100,],"D:/R/File/shixiseng_job.csv",sep=",",row.names=FALSE) 前一百个实习生需求最旺盛企业： 实习岗位具体分布的地域和城市？先做一个地域分布图：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051add&lt;-table(mydata$address_unique)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))%&gt;%filter(nchar(Var1)==2)#城市经纬度查询：library(rjson)library(RCurl)library(REmap)library(baidumap)address&lt;-add$Var1baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"for(location in address)&#123; url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="") url_string &lt;- URLencode(url) msg.load &lt;- tryCatch(&#123; json &lt;-readLines(url_string,warn=F,encoding="UTF-8") msg.load &lt;- "TRUE" &#125;,error=function(e) &#123; "error" &#125;) if(msg.load=='error')&#123; Sys.sleep(runif(1,3,10)) msg.load &lt;- tryCatch(&#123; connect &lt;- readLines(url_string,warn=F,encoding = "UTF-8") msg.load &lt;- "TRUE" &#125;, error = function(e)&#123; "error" &#125; ) &#125;geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) if(msg.load=='error')&#123; lng&lt;-'error1' lat&lt;-'error1' &#125;else&#123; lng&lt;-geo$result$location$lng lat&lt;-geo$result$location$lat if(length(lng) == 0)&#123; lng &lt;- "error2" lat &lt;- "error2" &#125; &#125;lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng)baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,long=baidu_lng,lat=baidu_lat,stringsAsFactors=FALSE)pointdata&lt;-left_join(add,result,by=c("Var1"="address"))#成功获取目标城市经纬度信息： 接下来来制作分布图： 12345678910111213141516171819202122232425geojson &lt;-readOGR("D:/R/mapdata/State/china.geojson","OGRGeoJSON",stringsAsFactors=FALSE)Encoding(geojson$name)&lt;-"UTF-8"china_Mapdata&lt;-geojson@datachina_MapdataPloygon&lt;-fortify(geojson)CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/shixiseng_jobcity.png",width=1200,height=640)showtext.begin()ggplot()+ geom_polygon(data=china_MapdataPloygon,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2,alpha=.4)+geom_point(data=pointdata,aes(x=long,y=lat,size=Freq),shape=21,fill="#C72E29",col="#014D64",alpha=0.6)+ scale_size_area(max_size=15,guide=guide_legend(reverse=TRUE,title=NULL))+ coord_map("polyconic") + labs(title="实习僧职位需求城市分布图",caption="数据来源：实习僧官网")+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.caption=element_text(family="myfont",size=18,hjust=0), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.6), )showtext.end()dev.off() 哪些城市对实习僧的需要最为强烈？从第三个问题及其分析结果上我们已经看出了整体形势，北上广深依然是需求最为旺盛的地区，这也符合城市的实际经济发展情况及我们的预期。 12345678910111213141516171819CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/jingjixue2.png",width=800,height=600)showtext.begin()ggplot(pointdata[1:20,],aes(reorder(Var1,Freq),Freq))+geom_bar(fill="#0C8DC4",stat="identity")+coord_flip()+labs(title="实习僧职位需求城市分布",caption="数据来源：实习僧官网")+geom_text(aes(y=Freq+25,label=Freq),hjust=2,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=15,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=10), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 实习工资大致什么水平，与城市和地域是否有关系？1234567891011121314151617181920212223242526myjob_salary&lt;-mydata[,c("address_unique","salary_low","salary_high")] myjob_salary$salary_low&lt;-as.numeric(myjob_salary$salary_low)myjob_salary$salary_high&lt;-as.numeric(myjob_salary$salary_high)myjob_salary&lt;-na.omit(myjob_salary)%&gt;%arrange(salary_high)%&gt;%filter(salary_high&gt;=20&amp;salary_high&lt;=500)myjob_salary$id&lt;-seq_len(nrow(myjob_salary))myjob_salary$meansalary&lt;-(myjob_salary$salary_low+myjob_salary$salary_high)/2CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/shixiseng_jobsaleryarea.png",width=1200,height=800)showtext.begin()ggplot(myjob_salary,aes(id))+geom_ribbon(aes(ymin=salary_low,ymax=salary_high),fill = "grey70")+labs(title="实习僧职位工资区间分布",caption="数据来源：实习僧官网")+geom_line(aes(y=meansalary))+theme_minimal()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=30,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=20), axis.title=element_blank(), axis.text.y=element_text(size=15), axis.text.x=element_blank() )showtext.end()dev.off() 1234567myjob_salary$address_unique&lt;-substr(myjob_salary$address_unique,1,2)myjobcitysalary&lt;-aggregate(meansalary~address_unique,data=myjob_salary,FUN=mean)treemap(na.omit(myjobcitysalary), index=c("address_unique"),vSize="meansalary",title='实习僧职位薪酬地域分布图',palette='RdBu',fontsize.title=18,fontsize.labels=12,fontface.labels="plain",fontfamily.title="mono",fontfamily.labels="mono") 按照全部参与计算聚合的平均工资来看，北上广深反而没有什么吸引力了排名普遍不高，我猜想是因为一线城市的低工资职位数量过多，压低了平均值。 接下来我们按照100，150的临界点进行工资高低的划分。 1234567891011121314151617181920salary100&lt;-myjob_salary%&gt;%filter(meansalary&lt;=100)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary100&lt;-na.omit(salary100)%&gt;%arrange(desc(Freq));names(salary100)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary100.png",width=1200,height=900)showtext.begin()ggplot(salary100[salary100$num&gt;=5,],aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪低于100）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 1234567891011121314151617181920salary200&lt;-myjob_salary%&gt;%filter(meansalary&gt;=200)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary200&lt;-na.omit(salary200)%&gt;%arrange(desc(Freq));names(salary200)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary200.png",width=1200,height=900)showtext.begin()ggplot(salary200,aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪高于200）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 123456789101112131415161718192021salary100_200&lt;-myjob_salary%&gt;%filter(meansalary&gt;100 &amp; meansalary&lt;200)%&gt;%select(address_unique)%&gt;%table()%&gt;%as.data.frame(stringsAsFactors=FALSE)salary100_200&lt;-na.omit(salary100_200)%&gt;%arrange(desc(Freq));names(salary100_200)&lt;-c("city","num")CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/salary100-200.png",width=1600,height=900)showtext.begin()ggplot(salary100_200,aes(reorder(city,-num),num))+geom_bar(fill="#0C8DC4",stat="identity")+labs(title="实习僧职位薪资城市分布（日薪处于100-200之间）",caption="数据来源：实习僧官网")+geom_text(aes(y=num+10,label=num),hjust=.5,colour="#C72E29",size=5)+theme_bw()+theme( panel.border=element_blank(), panel.grid.major=element_line(linetype="dashed"), panel.grid.minor=element_blank(), plot.title=element_text(size=25,colour="#003087",family="myfont"), plot.caption=element_text(hjust=0,size=18), axis.title=element_blank(), axis.text=element_text(size=15) )showtext.end()dev.off() 分析到这里，趋势已经很明显了，因为北上广深等一线城市的职位实在是太多了，无论是高新职位还是低薪实习岗位都能排在全国各城市的前列，所以出现日均工资很普通的现象。相对而言，日薪在200以上的高薪职位更能代表各大城市对日常实习生需求的强烈程度，因为在这一阶段，北上广深的优势非常明显，遥遥领先与其他二线城市，而针对日薪高于200的实习职位统计结果可以看出来，北上技压群雄（不愧是帝都和魔都），深圳和广州处于第二线，200以上的高新实习职位遇北上相比，相差比较大，仅占前两者约1/3~1/5。而杭州、南京、武汉、合肥则稳稳处于第三梯队。 实习岗位一般都要求每周到岗多少天？123456789101112131415myperiod&lt;-mydata$periodCairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/internperiod.png",width=1000,height=750)showtext.begin()ggplot(data=NULL,aes(myperiod)) +geom_histogram(stat="count",show.legend=FALSE,binwidth=1,fill="#F86977",col=NA) +labs(title="实习职位要求每周工作天数",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 从分布上看，一周五天居多，这样是正常的工作日现象。3天、4天也是用人单位补缴能接受的周工作天数。 实习周期一般需要多长时间？1234567891011121314151617myduration&lt;-mydata$durationmydurationhz&lt;-table(myduration)%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/internduration.png",width=1000,height=750)showtext.begin()ggplot(data=mydurationhz,aes(reorder(myduration,-Freq),Freq)) +geom_bar(stat="identity",show.legend=FALSE,width=1,fill="#065573",col=NA) +geom_text(aes(y=Freq+20,label=Freq),hjust=.5,colour="#C72E29",size=5)+labs(title="实习职位要求工作时间周期",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 哪些职位需求最为旺盛？ 下面开始分析最后一个问题，也是我认为最有价值，最值得探究的问题，最后一个待分析指标是实习职位，这个指标跟我们最初分析的那个岗位性质略有不同，该变量相对比较规范（职位类别有确定的预设范围）。 我们新建一个分析数据，用职位、工资区间的中间值，地区三个变量进行后续分析：1234mydata$salary_high&lt;-as.numeric(mydata$salary_high)mydata$salary_low&lt;-as.numeric(mydata$salary_low)mydata$salary_mean&lt;-(mydata$salary_low+mydata$salary_high)/2myworkdata&lt;-mydata[,c("address_unique","work","salary_mean")] 首先分析下岗位的集中分布情况：1234567891011121314151617myworkcount&lt;-table(myworkdata[,2])%&gt;%as.data.frame(stringsAsFactors=FALSE)%&gt;%arrange(desc(Freq))CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/interndworkcount.png",width=1000,height=750)showtext.begin()ggplot(data=myworkcount,aes(reorder(Var1,-Freq),Freq)) +geom_bar(stat="identity",show.legend=FALSE,width=.75,fill="#5D8DA6",col=NA) +geom_text(aes(y=Freq+50,label=Freq),hjust=.5,colour="#C72E29",size=5)+labs(title="实习职位类别分布",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=20,family="myfont"), plot.caption=element_text(hjust=0,family="myfont"), axis.line=element_line(colour="grey80"), axis.text=element_text(size=12,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 各个岗位工资分布：12345678910111213141516myworkmean&lt;-aggregate(salary_mean~work,data=myworkdata,FUN=mean)CairoPNG(file="E:/微信公众号/公众号——数据小魔方/2017年5月/20170512/interndworkmean.png",width=1000,height=750)showtext.begin()ggplot(data=myworkmean,aes(reorder(work,-salary_mean),salary_mean)) +geom_bar(stat="identity",show.legend=FALSE,width=.75,fill="#5D8DA6",col=NA) +geom_text(aes(y=salary_mean+5,label=round(salary_mean,1)),hjust=.5,colour="#C72E29",size=10)+labs(title="实习职位类别平均工资",caption="数据来源：实习僧官网")+theme(panel.background=element_rect(fill=NA), plot.background=element_rect(fill=NA), plot.title =element_text(size=25,family="myfont"), plot.caption=element_text(hjust=0,family="myfont",size=20), axis.line=element_line(colour="grey80"), axis.text=element_text(size=18,family="myfont"), axis.title=element_blank())showtext.end()dev.off() 从工资均数上来看，七大类职位差距不大，说明仅就实习岗位工资而言，结合爬取的总体样本，不考虑地域差异，实习工资差异不很明显。也许是因为实习岗位中真正有含金量的并不多，换句话说，企业的高价值岗位，对于工作经验、技能的要求相对较高，而实习生则在这方面都不具备优势。（如果是社招或者小校招岗位信息的话，可能工资均值的差异会大一些）。 最后，让我们用一个桑基图来完结本次针对实习僧网站的爬虫分析： 1write.table (myworkdata,"D:/R/File/shixiseng_workdata.csv",sep=",",row.names=FALSE) 桑基流向图的趋势灰常明显，北上两市在所有类别职位（7大类）上均居前列，各职位类别中，市场和运营职位需求最为强烈，北京和上海在对市场和运营职位的需求容量机会平分秋色。广州和深圳仍然略于北上，但是与其他二线城市相比较，优势仍然很明显。（也许是因为实习僧做为主打校园实习岗位信息咨询平台，针对的主流群体基本以在校大学生为主，而北上广深的高等教育资源分布差异明显，在高校数量方面，北上的要沾光很多，广州与深圳的高校资源相对比较匮乏，在以上分析的各项指标中都占尽劣势）。 爬虫和代码分析，算起来整整花了将近12个小时，虽然分析的不是很精准、客观，但是过程还是很有收获的，期待下一次做的更好！ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>爬虫</tag>
        <tag>PowerBI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[山东省公共财政预算数据可视化]]></title>
    <url>%2F2017%2F05%2F24%2F%E5%B1%B1%E4%B8%9C%E7%9C%81%E5%85%AC%E5%85%B1%E8%B4%A2%E6%94%BF%E9%A2%84%E7%AE%97%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%2F</url>
    <content type="text"><![CDATA[自带学习R语言以来，从来没用把这些技能用在自己的专业方向上，说好的学以致用呢~ 最近看到的一篇微信公众号推文，内容是关于山东省各县（细化到137个县级行政区）2016年的GDP规模、公共预算收入规模及其增速指标，数据质量还不错，是山东省发改委公布的。 http://mp.weixin.qq.com/s/Sk4fIh3-ykcNK8uP0gZryw 感觉自己终于离专业方向近了一些（本人学财政的），数据就在眼前，这次机会一定要抓住了。 数据虽然质量不错，但是苦于手头没有最新的山东省县级地图素材（之前练习用的SHP素材都是很古老的素材，使用市级范围没啥问题，但是县级行政单位变更太快了，根本没法用）。所以这篇文章写作过程特别艰难~ 我用了半个上午爬取并整理数据，却用了两天时间寻找地图素材、最终找到了山东省17个地级市的json素材（还不会合并json数据），找到了个在线json转shp的平台，用17个json文件拼接成一个 完整的山东省地图，然后导出shp数据，这才搞定了县级地图工作。（想想也是太执着了~） 本篇文章主要主要还是演示地图可视化为主，其中包含基础的数据抓取、数据清洗、数据聚合、变量结构和ggplot图层语法，最终得到7福高质量的数据地图。 加载包以下是本文需要用到的包： 1234567891011121314151617library(XML)library(RCurl)library(stringr)library(dplyr)library(plyr)library(ggplot2) library(maptools) library(Cairo) library(RColorBrewer) library(xlsx)library(rjson)library(rgdal)library(data.table)library(tidyr)library(grid)library(showtext)library(sqldf) 数据抓取数据抓取过程1234567891011url&lt;-"http://mp.weixin.qq.com/s/Sk4fIh3-ykcNK8uP0gZryw"Name&lt;- getURL(url,.encoding="utf-8")%&gt;%htmlParse(encoding="UTF-8")%&gt;%getNodeSet("//strong/span") title&lt;-grep("按",laply(Name,xmlValue,trim=T),value=T);titletbls&lt;-readHTMLTable(url,header=TRUE,trim=TRUE)names(tbls)&lt;-title;names(tbls)sapply(tbls,nrow)[1] "按公共财政预算收入规模：" "按公共财政预算收入增长幅度："[3] "按GDP规模：" "按GDP增长幅度：" [5] "按人均GDP：" 以下数据网页中五张表格的提取过程： 1234567891011121314151617181920212223242526BudgetScale&lt;-tbls$`按公共财政预算收入规模：`[-1];names(BudgetScale)&lt;-c("Country","BudgetScale")BudgetScale$Country&lt;-as.character(BudgetScale$Country)BudgetScale$BudgetScale&lt;-as.numeric(as.character(BudgetScale$BudgetScale))BudgetGrowth&lt;-tbls$`按公共财政预算收入增长幅度：`[-1];names(BudgetGrowth)&lt;-c("Country","BudgetGrowth")BudgetGrowth$Country&lt;-as.character(BudgetGrowth$Country)BudgetGrowth$BudgetGrowth&lt;-as.numeric(as.character(BudgetGrowth$BudgetGrowth))GDPScale&lt;-tbls$`按GDP规模：`[-1];names(GDPScale)&lt;-c("Country","GDPScale")GDPScale$Country&lt;-as.character(GDPScale$Country)GDPScale$GDPScale&lt;-as.numeric(as.character(GDPScale$GDPScale))GDPGrowth&lt;-tbls$`按GDP增长幅度：`[-1];names(GDPGrowth)&lt;-c("Country","GDPGrowth")GDPGrowth$Country&lt;-as.character(GDPGrowth$Country)GDPGrowth$GDPGrowth&lt;-as.numeric(as.character(GDPGrowth$GDPGrowth))PerGDPGrowth&lt;-tbls$`按人均GDP：`[-1];names(PerGDPGrowth)&lt;-c("Country","PerGDPGrowth")PerGDPGrowth$Country&lt;-as.character(PerGDPGrowth$Country)PerGDPGrowth$PerGDPGrowth&lt;-as.numeric(as.character(PerGDPGrowth$PerGDPGrowth))BudgetScale&lt;-arrange(BudgetScale,Country)BudgetGrowth&lt;-arrange(BudgetGrowth,Country)GDPScale&lt;-arrange(GDPScale,Country)GDPGrowth&lt;-arrange(GDPGrowth,Country)PerGDPGrowth&lt;-arrange(PerGDPGrowth,Country) 本来137个县级行政区的名称应该是一致的，但是网页中公布的数据名称不一致，所以没法合并，需要自己集合最新的行政区划名称手动修改，费老大劲！ 先将五张表格的数据写入一个工作薄中，然后手动修改: 12345write.xlsx(BudgetScale,"D:/R/File/shddata.xlsx",sheetName="BudgetScale",append=FALSE,row.names=FALSE)write.xlsx(BudgetGrowth,"D:/R/File/shddata.xlsx",sheetName="BudgetGrowth",append=TRUE,row.names=FALSE)write.xlsx(GDPScale,"D:/R/File/shddata.xlsx",sheetName="GDPScale",append=TRUE,row.names=FALSE)write.xlsx(GDPGrowth,"D:/R/File/shddata.xlsx",sheetName="GDPGrowth",append=TRUE,row.names=FALSE)write.xlsx(PerGDPGrowth,"D:/R/File/shddata.xlsx",sheetName="PerGDPGrowth",append=TRUE,row.names=FALSE) 因为以上五个表格所用到的行政区划名称不完全相同，需要手动各县级行政区划对应的隶属地级市名称才能进行列合并。 以下是我从网络上找到并整理的山东省17地级市，137县级（包含县级市）行政单位的代号，名称，经纬度信息。 12345678setwd("D:/R/mapdata/Country/shandong")shandong_city&lt;-read.xlsx("City.xlsx",sheetName="City",header=T,encoding='UTF-8',stringsAsFactors=FALSE)shandong_district&lt;-read.xlsx("City.xlsx",sheetName="District",header=T,encoding='UTF-8',stringsAsFactors=FALSE)shandong_district&lt;-unite(shandong_district,address,City,Name,sep="")shandong_district&lt;-transform(shandong_district,Adress=paste0("山东省",shandong_district$address))[,-1][,c(4,1,2,3)]names(shandong_district)[1]&lt;-"address" 通过以上shandong_district表中的城市、县级市名称字段合理规范以上五张表中的县级行政单位名称，总最终合并至表6——shandongdata注意五张表在同一个工作薄中。 经纬度地址解析：解析经纬度地址：这里调用百度地图的API解析县级市的经纬度地址：（大家最好自己去注册百度地图开发者，然后申请免费秘钥） 123456789101112131415baidu_lng &lt;- c()baidu_lat &lt;- c()ak&lt;-"X8zlxPUdSe2weshrZ1WqnWxb43cfBI2N"address&lt;-shandong_district$addressfor(location in address)&#123;url&lt;-paste("http://api.map.baidu.com/geocoder/v2/?ak=",ak,"&amp;callback=renderOption&amp;output=json&amp;address=",location,sep="")url_string &lt;- URLencode(url) json&lt;- readLines(url_string, warn=F) geo &lt;- fromJSON(substr(json,regexpr("\\(",json)+1,nchar(json)-1)) lng&lt;-geo$result$location$lnglat&lt;-geo$result$location$lat baidu_lng&lt;-c(baidu_lng,lng) baidu_lat&lt;-c(baidu_lat,lat)&#125;result&lt;-data.frame(address=address,longitude=baidu_lng,latitude=baidu_lat,stringsAsFactors=FALSE) 将县级市数据与经纬度数据合并： 123456shandong_district_data&lt;-merge(shandong_district,result,by="address")[,-c(3,4)]names(shandong_district_data)[3:4]&lt;-c("lon","lat")shandong_district_data$address&lt;-as.character(shandong_district_data$address)shandong_zhibiao_data&lt;-read.xlsx("shddata.xlsx",sheetName="Shandongdata",header=T,encoding='UTF-8',stringsAsFactors=FALSE)names(shandong_zhibiao_data)[2]&lt;-"address"shandong_district_data&lt;-merge(shandong_district_data,shandong_zhibiao_data,by="address") 以上得到了山东省所有县级行政单位的点坐标信息。 导入背景地图素材数据读图背景素材导入： 素材一：山东省县级地图素材： 123456mymap&lt;-readOGR(".","map",encoding = "UTF-8",verbose=FALSE)myShape &lt;- fortify(mymap) x &lt;- mymap@datanames(x)[3]&lt;-"Code" xs &lt;- data.frame(x,ID=seq(0:139)-1)[,c(3,8)]shandong_district_map_data&lt;-merge(myShape,xs,by.x="id",by.y="ID",type="full")[,-c(5,6)] 很遗憾，我们从以上素材中所提取的城市名称数据，可能涉及到编码的问题，中文全部成为了乱码，这样我们前期整理的山东省GDP及公共财政相关数据的中名称便无法与该地图进行匹配，好在行政区代码还在，这样我们就可以从之前找到行政区划代码和名称信息进行匹配。 将县级行政区地图与县级市进行匹配，获得信息完整的县级地图数据。 12shandong_district_map_data&lt;-merge(shandong_district_map_data,shandong_district_data[,-c(3,4)],by="Code",all.x=TRUE)shandong_district_map_data&lt;-shandong_district_map_data[order(shandong_district_map_data$order),] 素材2：山东省市级地图素材： 12345678CHN_adm2 &lt;- readOGR("D:/R/rstudy/CHN_adm/CHN_adm2.shp") CHN_adm2_1 &lt;- fortify(CHN_adm2) CHN_adm2_1$id&lt;-as.numeric(CHN_adm2_1$id)shx &lt;- CHN_adm2@data shxs &lt;- data.frame(shx,id=seq(0:344)-1) china_map_data &lt;- join(CHN_adm2_1,shxs,type="full") shandong_city_map_data&lt;-subset(china_map_data,NAME_1==c("Shandong"))[,c(1,2,7,14)]mydata&lt;-read.csv("D:/R/rstudy/State/huanbohai.csv",header=T)[,-3] 12#匹配市级行政单位信息：shandong_city_map_data &lt;-join(shandong_city_map_data,mydata,by="NAME_2",type="left") 接下来整合指标信息与地图作图数据：山东省市级地图作图数据： 因为我们之前获取的指标数据是按照县级行政区划整理的，这里需要使用聚合函数，整理成市级的。因为增长比率数据汇总聚合后意义不大，即便是平均值也不是很有意义，所以这里只用市级的公共预算支出和GDP数据。 12345678shandongdata&lt;-data.table(shandong_zhibiao_data)shandongnewdata&lt;-shandongdata[,.(SUM_BudgetScale=sum(BudgetScale),SUM_GDPScale=sum(GDPScale)),by=City]shandong_city_map_data&lt;-merge(shandong_city_map_data,shandongnewdata,by.x="city",by.y="City") shandong_fill_map_data&lt;-shandongnewdatashandong_fill_map_data$city&lt;-paste0(shandong_fill_map_data$City,"市")shandong_fill_map_data&lt;-shandong_fill_map_data[,c(1,4,2,3)]shandong_fill_map_data&lt;-merge(shandong_fill_map_data[,-1],shandong_city,by.x="city",by.y="City")shandong_fill_map_data&lt;-shandong_fill_map_data[,c(1,4,5,6,2,3)] 现在所有的数据已经整理完毕，我们一共得到了四张有用的数据集： 市级地图数据——shandong_city_map_data（含城市指标） 县级地图数据——shandong_district_map_data（含17个地级市指标及经纬度） 市级指标数据——shandong_fill_map_data（含城市经纬度及两个指标：GDP规模和公众预算规模） 县级指标数据——shandong_district_data（含137个行政县指标及经纬度和五个指标数据，GDP规模、GDP增速，人均GDP增速，预算规模、预算增速）。 因为地级市数据限制，只有两个指标（GDP规模和预算规模），所以，最多只能制作两张地图。县级行政区数据比较齐全，这里计划的呈现的维度是GDP规模与GDP增速，GDP规模与人均GDP增速，GDP增速与人均GDP增速。预算规模和预算增速。合计一共四张图。 接下来我们进入地图制作环节：市级地图：（这两将包含两幅地图：GDP规模、公共预算收入规模） 为了更加明显的呈现出各个地级市的GDP和预算规模，这里我准备将两个指标的连续数值型变量切割成有序分段因子变量。 首先浏览下各市GDP的极差分布： 12&gt; range(shandong_city_map_data$SUM_GDPScale)[1] 703 9901 所以这里范围使用0~10000，均分为5组； 1shandong_city_map_data$FA_SUM_GDPScale&lt;-cut(shandong_city_map_data$SUM_GDPScale, breaks=c(0,1500,3000,4500,6000,10000),labels=c('0~1500','1500~3000','3000~4500','4500~6000','6000~10000'),order=TRUE) 123456789101112131415161718192021222324252627CairoPNG(file="GDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+geom_polygon(data=shandong_city_map_data,aes(x=long,y=lat,group=group,fill=FA_SUM_GDPScale),col="white",size=.2)+scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各地级市2016年GDP规模分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=shandong_fill_map_data,aes(x=long,y=lat,label=city),family="myfont",fontface="plain",size=6)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 浏览下各市公共预算规模的极差分布： 12&gt; range(shandong_city_map_data$SUM_BudgetScale)[1] 47.2 1003.3 使用直方图大致了解下最终的预算规模数据分布； 1ggplot(shandong_city_map_data,aes(SUM_BudgetScale))+geom_histogram() 所以这里范围使用0~1200，不等分为5组； 1234567891011121314151617181920212223242526272829shandong_city_map_data$FA_SUM_BudgetScale&lt;-cut(shandong_city_map_data$SUM_BudgetScale, breaks=c(0,150,300,450,600,1005),labels=c('0~150','150~300','300~450','450~600','600~ '),order=TRUE) CairoPNG(file="BudgetScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+geom_polygon(data=shandong_city_map_data,aes(x=long,y=lat,group=group,fill=FA_SUM_BudgetScale),col="white",size=.2)+scale_fill_brewer(palette="OrRd")+ coord_map("polyconic") + labs(title="山东省各地级市2016年公共预算收入规模分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=shandong_fill_map_data,aes(x=long,y=lat,label=city),family="myfont",fontface="plain",size=6)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.08,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上是地级市数据可视化两个维度的全部代码，通过2016GDP规模以公共预算支出的规模对比可以发现，山东省地区间经济发展水平差异还是很大的，其中青岛在两个指标上都遥遥领先，也是全国为数不多的地级市发展好于省会的城市之一。 县级地图，以下过程将会输出五福图形，展示山东省县级行政区在GDP和预算规模的绝对量、增长率等各维度信息。分别包含GDP规模与增速、GDP规模与人均GDP增速、预算规模与预算增速、GDP规模与预算规模、GDP增速与预算增速对比。 为了与上面过程保持一致，这里的绝对量还是要换算成分段因子变量，这样比较适合通过分段颜色来更好的呈现山东省各县的相关数据信息。 首先还是简略查看下GDP的极差分布： 12345range(shandong_district_map_data$GDPScale)[1] 67 2766shandong_district__dataggplot(shandong_district_map_data,aes(GDPScale))+geom_histogram() 可以看出来，县级地区GDP的分布比较诡异，出现了一个特别的值，其他县市都集中在1200以下。 123sqldf("SELECT address,Max(GDPScale) AS GDPmax FROM shandong_district_data") address GDPmax1 山东省青岛市黄岛区 2766 果然青岛市各县GDP黄岛区占了大头儿。如果数据分布不是很规律的话，平均分组可能 导致有些组没数据，有些组特别集中的情况。 这里尝试着对各县GDP进行分组，期待能够分组合理的利用可视化呈现的分组。 12345678shandong_district_map_data$FA_GDPScale&lt;-cut(shandong_district_map_data$GDPScale, breaks=c(0,300,600,900,1200,3000),labels=c('0~300','300~600','600~900','900~1200','1200~3000'),order=TRUE) summary(shandong_district_map_data$FA_GDPScale) 0~300 300~600 600~900 900~1200 1200~3000 2930 2549 1064 539 85 text&lt;-arrange(shandong_district_data,desc(GDPScale))%&gt;%select(Country,lon,lat,GDPScale)text&lt;-text[1:10,] 山东省各行政县（包含县级市）2016年GDP规模&amp;增速分布 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictGDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_GDPScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPGrowth),shape=21,fill="#FB832D",col="#ED7D31",alpha=.6)+ #ED7D31E02939scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 山东省各行政县（包含县级市）2016年GDP规模&amp;人均GDP增速分布 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictPerGDPScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_GDPScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=PerGDPGrowth),shape=21,fill="#098154",col="#ED7D31",alpha=.6)+ #ED7D31E02939scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="OrRd")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;人均GDP增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.05,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 除了GDP之外，还有另一个规模性指标——预算规模，接下来，我们针对预算规模来分析。 查看各县预算规模的极差分布状况。 12345678910111213summary(shandong_district_map_data$BudgetScale) Min. 1st Qu. Median Mean 3rd Qu. Max. NA's 1.30 14.00 22.90 34.26 46.00 212.40 346 shandong_district_map_data$FA_BudgetScale&lt;-cut(shandong_district_map_data$BudgetScale, breaks=c(0,40,80,120,160,240),labels=c('0~50','50~100','100~150','150~200','200~250'),order=TRUE) &gt; summary(shandong_district_map_data$FA_BudgetScale) 0~50 50~100 100~150 150~200 200~250 NA's 4999 1544 521 53 50 346 text1&lt;-arrange(shandong_district_data,desc(BudgetScale))%&gt;%select(Country,lon,lat,BudgetScale)text1&lt;-text1[1:10,] 山东省各行政县（包含县级市）2016年公共预算收入规模&amp;增速分布 123&gt; summary(shandong_district_data$BudgetGrowth) Min. 1st Qu. Median Mean 3rd Qu. Max. -15.600 6.500 9.500 9.085 11.400 31.300 1234567891011121314151617181920212223242526272829CairoPNG(file="DistrictBudgetScale.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group,fill=FA_BudgetScale),col="grey60",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=abs(BudgetGrowth)),shape=21,fill=ifelse(shandong_district_data$BudgetGrowth&gt;0,"#FB832D","#014D64"),col="#ED7D31",alpha=.6)+ #气泡图颜色根据正负值分开填充scale_size(range=c(1,8),guide=FALSE)+ scale_fill_brewer(palette="Greens")+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年公共预算收入规模&amp;增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ guides(fill=guide_legend(reverse=TRUE,title=NULL))+ geom_text(data=text1,aes(x=lon,y=lat-.1,label=Country),family="myfont",fontface="plain",size=4)+ theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), legend.text.align=1, legend.text=element_text(hjust=-5,size=12), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上三个维度分别展示了山东省各县GDP规模与增速指标、GDP规模与人均GDP增速指标、财政公共预算收入与增速指标的分布情况。 接下来我们在呈现各县GDP相对于公共预算收入规模的分布情况。 123456789101112131415161718192021222324252627CairoPNG(file="DistrictGDP&amp;Budget.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPScale,fill=BudgetScale),shape=21,col="grey60",alpha=.8)+ scale_size(range=c(1,12),guide=FALSE)+ scale_fill_gradient2(low="#014D64",mid="grey",high="#C72E29",midpoint=range(na.omit(shandong_district_map_data$BudgetScale))/2,guide=FALSE)+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP规模&amp;公共预算收入分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ annotate("text", x=114.8, y=38.3, label="● 高（预算）", color= "#C72E29", size=6) + annotate("text", x=114.8, y=38, label="● 低（预算）", color= "#014D64", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 下面是关于人均GDP增速与各县公共预算收入增速之间的关系： 123456789101112131415161718192021222324252627CairoPNG(file="DistrictPerGDPGrowth&amp;BudgetGrodth.png",width=1200,height=640)font.add("myfont", "msyh.ttc")showtext.begin()ggplot()+ geom_polygon(data=shandong_district_map_data,aes(x=long,y=lat,group=group),col="grey60",fill="white",size=.2)+geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=GDPScale),shape=21,fill="transparent",col="#014D64")+ geom_point(data=shandong_district_data,aes(x=lon,y=lat,size=BudgetScale),shape=21,fill="#C72E29",col="transparent",alpha=.6)+ scale_size(range=c(1,12),guide=FALSE)+ coord_map("polyconic") + labs(title="山东省各行政县（包含县级市）2016年GDP增速&amp;公共预算收入增速分布",subtitle="单位：（亿元）",caption="数据来源：山东省发展与改革委员会")+ annotate("text", x=114.8, y=38.3, label="○ GDP（增速）", color= "#014D64", size=6) + annotate("text", x=114.8, y=38, label="● 预算（预算）", color= "#C72E29", size=6) + theme( title=element_text(family="myfont",size=18), plot.title=element_text(size=24), plot.subtitle=element_text(family="myfont",size=18), #plot.caption=element_text(family="myfont",size=18), panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), legend.position = c(0.02,0.8), plot.caption=element_text(hjust=0) )showtext.end()dev.off() 以上过程确实有些烧脑，大篇幅的代码，可以就是代码驱动的可视化，让数据呈现更为直观，数据可视化本就服务于数据呈现，无助于数据呈现的可视化相当于数据灾难。 本篇算是学习R以来比较完善的一篇以实战为目的的案例练习，虽然写的有些杂乱，但是过程还是学习了很东西，补了很多平时遗忘的漏洞。 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>数据可视化</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emoji表情可视化北京历史天气]]></title>
    <url>%2F2017%2F05%2F23%2Femoji%E8%A1%A8%E6%83%85%E5%8F%AF%E8%A7%86%E5%8C%96%E5%8C%97%E4%BA%AC%E5%8E%86%E5%8F%B2%E5%A4%A9%E6%B0%94%2F</url>
    <content type="text"><![CDATA[数据抓取：加载包1234567891011121314library(RCurl)library(XML)library(dplyr)library(ggplot2)library(stringr)library(rvest)library(lubridate)library("DT")library(openair)library(ggplot2)library(scales)library(showtext)library(grid)library(Cairo) 用更加优雅的方式加载包：1234567all.pcg&lt;-c("RCurl","XML","dplyr","ggplot2","stringr","rvest","lubridate","DT","scales","showtext","grid","Cairo") req.pcg &lt;- function(pcg)&#123; new &lt;- pcg[!(pcg %in% installed.packages()[, "Package"])] if (length(new)) install.packages(new, dependencies = T) sapply(req.pcg, require, ch = T) &#125; req.pcg(all.pcg) 构建历史天气数据网页链接：1234year&lt;-2014:2016month&lt;-sprintf("%02d",1:12)url&lt;- paste("https://www.aqistudy.cn/historydata/daydata.php?city=北京&amp;month=",expand.grid(year,month)$Var1,expand.grid(year,month)$Var2,sep="") 以上过程构造了北京市2014~2016年三整年的历史空气质量数据： 测试单段代码： 12345678910111213先写完一个看下具体情况:tbls&lt;-read_html(url[1],encoding="utf-8")%&gt;%html_table(.,header=TRUE,trim=TRUE);tbls&lt;-tbls[[1]]构建循环下载函数：mytable&lt;-data.frame()for (i in url)&#123;Sys.sleep(sample(1:5,1))fun&lt;-function(m)&#123;table&lt;-read_html(m,encoding="utf-8")%&gt;%html_table(.,header=TRUE,trim=TRUE)table&lt;-table[[1]]&#125;mytable&lt;-rbind(mytable,fun(i))&#125; 数据清洗与处理：预览一下以上数据结构：1234567dim(mytable)[1] 1096 11attributes(mytable)$names [1] "日期" "AQI" "范围" "质量等级" "PM2.5" "PM10" "SO2" [8] "CO" "NO2" "O3" "排名" 使用DT表格预览数据集：datatable(mytable) 1mytable&lt;-read.csv("beijingtianqi.csv",stringsAsFactors=FALSE,check.names=FALSE) 1234567891011121314#查看数据结构和变量属性是否符合分析需要：str(mytable)'data.frame': 1096 obs. of 11 variables: $ 日期 : chr "2014-01-01" "2014-01-02" "2014-01-03" "2014-01-04" ... $ AQI : int 87 119 81 151 121 181 144 29 44 86 ... $ 范围 : chr "76~99" "80~218" "38~202" "87~229" ... $ 质量等级: chr "良" "轻度污染" "良" "中度污染" ... $ PM2.5 : num 45 111.4 46.5 114.4 90.5 ... $ PM10 : num 111.3 168.5 97.7 147 117.5 ... $ SO2 : num 27.7 69.3 29 40 35.9 46.3 34.4 13 19.3 53.2 ... $ CO : num 1.5 3.43 1.31 2.82 2.31 ... $ NO2 : num 61.9 93.1 52 75.4 67 68.2 59.8 21.1 34.5 70.5 ... $ O3 : int 64 17 65 10 57 11 55 59 65 28 ... $ 排名 : int 32 66 41 112 67 104 85 9 25 58 ... 定义日期变量格式： 1234567891011mytable$日期&lt;-as.Date(mytable$日期)names(mytable)[c(1,3,4,11)]&lt;-c("date","Range","Level","Order")mytable$Year&lt;-year(mytable$date)breaks&lt;-c(0,50,100,150,200,300,500)label&lt;-c("excellent","good","Mild pollution","moderate pollution","heavy pollution ","serious pollution")filter(mytable,Year==2014)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2014)filter(mytable,Year==2015)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2015)filter(mytable,Year==2016)%&gt;%calendarPlot(.,pollutant="AQI",breaks=breaks,labels=label,year=2016) 可视化阶段接下来让我们疯狂一把，将北京三年的空气质量指标AQI用一幅图形尽数呈现。 数据整体与备份：12345mydata1&lt;-mytablewrite.table (mytable,"beijingtianqi.csv",sep=",",row.names=FALSE)mydata11&lt;-mydata1[c("date","AQI","Year")]myasst&lt;-mydata11[mydata11$date %in% as.Date(c("2014-01-01","2015-01-01","2016-01-01")),]mydata11&lt;-rbind(mydata11,myasst) 因为作图需要，2016年是闰年，2月有29天，14、15年均为28天，会导致最终数据不等长，影响之后的图表制作过程，这里暂且将其去除。1234567mydata11&lt;-arrange(mydata11,Year,date)mydata11&lt;-mydata11[mydata11$date!="2016-02-29",]mydata11$Month&lt;-month(mydata11$date)mydata11$Monthdata&lt;--5mydata11$Monthjo&lt;-ifelse(mydata11$Month%%2==0,"A","B")circlemonth&lt;-seq(0,180,length=17)circlebj&lt;-rep(c(-circlemonth[1:3],rev(circlemonth[1:3])),2) 12345678910111213141516mydata11$ID&lt;-rep(seq(from=0,to=365),3)mydata11$Year&lt;-factor(mydata11$Year,order=T)mydata11$Asst&lt;-5mydata11$Asst[mydata11$Year==2015]&lt;-10mydata11$Asst[mydata11$Year==2016]&lt;-15mydata11A&lt;-mydata11[mydata11$Year==2014&amp;mydata11$Monthjo=="A",]mydata11B&lt;-mydata11[mydata11$Year==2014&amp;mydata11$Monthjo=="B",]mydata11$Quarter&lt;-quarter(mydata11$date)mydata11$Quarterdata&lt;-20mydata11C&lt;-mydata11%&gt;%filter(mydata11$Year==2014)%&gt;%filter(Quarter %in% c(1,3)) mydata11D&lt;-mydata11%&gt;%filter(mydata11$Year==2014)%&gt;%filter(Quarter %in% c(2,4)) circlequarter&lt;-seq(45,315,length=4)circleqd&lt;-rep(c(-circlequarter[1],circlequarter[1]),2)mydata11$FADD&lt;-cut(mydata11$AQI,breaks=c(0,50,100,150,200,300,500),labels=c("0~50","51~100","101~150","151~200","201~300","301~500"),order=T) 瓦片图可视化历史天气1234567891011121314151617181920212223242526272829#作图方法1：（简便方法，但效果不太好调整）CairoPNG(file="ECOCirclejj.png",width=1488,height=996)showtext.begin()ggplot(data=mydata11)+geom_tile(aes(ID,Year,fill=FADD))+coord_polar(theta="x")+expand_limits(ylim=c(-4,4))+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",x="",y="",fill="")+theme(axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1, legend.position=c(1,0.95),legend.justification=c(1,1),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"))showtext.end()dev.off() 光栅图可视化历史天气1234567891011121314151617181920212223242526272829#这里使用geom_raster()图层进行映射（不支持极坐标转换）breaks&lt;-aggregate(ID~Month,data=mydata11[mydata11$Year==2014,],FUN=median)CairoPNG(file="ECOCirclejjj.png",width=1200,height=600)showtext.begin()ggplot(data=mydata11)+geom_raster(aes(ID,Year,fill=FADD))+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+scale_x_continuous(breaks=breaks[,2],labels=paste0(1:12,"月"))+labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",fill="")+theme(text=element_text(family="myfont"),axis.text=element_text(size=20),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1,legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"))showtext.end()dev.off() 构造多重柱形图模拟北京历史天气可视化123456789101112131415161718192021222324252627282930313233343536373839404142#作图方法2：（虽然代码多但是调整相对自由）setwd("F:/微信公众号/公众号——数据小魔方/2017年4月/20170404")font.add("myfont","msyhl.ttc")CairoPNG(file="ECOCircle.png",width=1488,height=996)showtext.begin()ggplot()+geom_bar(data=mydata11A,aes(x=ID,y=Monthdata),stat="identity",width=1,fill="#ECEDD1",col="#ECEDD1")+geom_bar(data=mydata11B,aes(x=ID,y=Monthdata),stat="identity",width=1,fill="#DFE0B1",col="#DFE0B1")+geom_bar(data=mydata11C,aes(x=ID,y=Quarterdata),stat="identity",width=1,fill="#BDBDBD",col="#BDBDBD")+geom_bar(data=mydata11D,aes(x=ID,y=Quarterdata),stat="identity",width=1,fill="#D4D2D3",col="#D4D2D3")+geom_bar(data=mydata11[mydata11$Year==2016,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+geom_bar(data=mydata11[mydata11$Year==2015,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+geom_bar(data=mydata11[mydata11$Year==2014,],aes(x=ID,y=Asst,fill=FADD),stat="identity",width=1)+scale_fill_brewer(palette="YlOrRd",type="seq",direction=1,guide=guide_legend(reverse=TRUE))+coord_polar(theta="x")+ylim(-20,20)+guides(colour=guide_legend(reverse=TRUE))+geom_text(data=NULL,aes(x=circlemonth,y=-2.5,label=paste0(1:12,"月"),angle=circlebj),family="myfont",size=7,hjust=0.5,vjust=.5)+geom_text(data=NULL,aes(x=circlequarter,y=17.5,label=paste0(c("一","二","三","四"),"季度"),angle=circleqd),family="myfont",size=7,hjust=0.5,vjust=.5)+annotate("text",x=0,y=-15,label="北京",size=25,hjust=.5,vjust=1,family="myfont") + labs(title="2014~2016年度北京市空气质量水平可视化",subtitle="数据根据AQI指标水平进行分段分割",caption="Source：https://www.aqistudy.cn/",x="",y="",fill="")+theme(text=element_text(family="myfont"),axis.text=element_blank(),axis.title=element_blank(),axis.ticks=element_blank(),panel.background=element_blank(),panel.grid=element_blank(),panel.border=element_blank(),legend.key.size=unit(1.2,'cm'),legend.key.height=unit(1,'cm'),legend.text.align=1, legend.position=c(1,0),legend.justification=c(1,0),legend.text=element_text(size=20,hjust=3,vjust=3,face="bold"),plot.background=element_blank(),plot.title=element_text(size=50,lineheight=1.5),plot.subtitle=element_text(size=35,lineheight=1.5),plot.caption=element_text(size=25,hjust=0,lineheight=1.2),plot.margin=unit(c(.5,.5,.5,.5),"lines"),)showtext.end()dev.off() 联系方式： wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介： 杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。 Mail:578708965@qq.com 备注信息： 本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中国字体地图]]></title>
    <url>%2F2017%2F05%2F22%2F%E4%B8%AD%E5%9B%BD%E5%AD%97%E4%BD%93%E5%9C%B0%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[数据获取加载包12345678library(rvest) library(dplyr) library(stringr) library(showtext) library(Cairo) library(RColorBrewer) library(ggplot2) library(grid) 由于本文用到了一款中国行政区划的字体地图——EyesAsia，每一个行政区都是以一个字母代替的，所以需要获取该地图字体对应的索引表。该字体的开源项目主页为：EyesAsia与此对应的，还有一款也很fashion的字体地图（StateFace），是美帝的行政区划字体地图。项目主页在这里:stateface 一共43个编号，以下是提取过程，因为是一个table，所以可以直接使用rvest非常便捷的表格抓取工具。 抓取数据12345678url&lt;-"https://github.com/haoyuns/EyesAsia"table&lt;-read_html(url,encoding="utf-8")%&gt;%html_table()%&gt;%.[[2]]table1&lt;-table[table$lowercase!="",]table2&lt;-table[table$lowercase=="",]%&gt;%.[,2:3]table11&lt;-table1[,1:2]%&gt;%rename(case=lowercase)table12&lt;-table1[,3:4]%&gt;%rename(case=UPPERCASE)table13&lt;-table2%&gt;%rename(case=Content,Content=UPPERCASE)tabledata&lt;-rbind(table11,table12,table13) 筛选出中国的34个省级行政区12345678910tabledata$Cname&lt;-str_extract(tabledata$Content,"[\\u4e00-\\u9fa5]+")tabledata$Ename&lt;-str_extract(tabledata$Content,"[^\\u4e00-\\u9fa5]+")%&gt;%str_trim(side=c("right"))tabledata&lt;-tabledata[,-2]setwd("D:/R/File")write.table(tabledata,"EyesAsia.csv",sep=",",row.names=FALSE)word&lt;-c("日本","蒙古","朝鲜","韩国","青海湖","鄱阳湖","洞庭湖","太湖","洪泽湖")mymapdata&lt;-tabledatamymapdata$m&lt;-mymapdata$Cname %in% wordmymapdata&lt;-mymapdata%&gt;%filter(m==FALSE)%&gt;%.[,1:3]write.table(mymapdata,"EyesAsia.csv",sep=",",row.names=FALSE) 作图主要过程分为三部分：步骤一：外围字体圆环图：12345678#导入数据：#生成一个虚拟指标，并分割为有序分段因子变量。mymapdata&lt;-read.csv("EyesAsia.csv",stringsAsFactors=FALSE,check.names=FALSE)mymapdata&lt;-transform(mymapdata,scale=5,peform=runif(34,20,50))mymapdata$scale&lt;-as.numeric(mymapdata$scale)mymapdata$group&lt;-cut(mymapdata$peform,breaks=c(20,26,32,38,44,50),levels=,labels=c("20~26","26~32","32~38","38~44","44~50"),order=TRUE)mymapdata&lt;-arrange(mymapdata,desc(peform));mymapdata$order=1:nrow(mymapdata)mymapdata$order&lt;-as.numeric(mymapdata$order) 作图函数： 123456789101112131415CairoPNG("chineserador.png",900,900)showtext.begin()ggplot(mymapdata,aes(order,scale,label=case))+ylim(-6,6)+coord_polar(theta="x",start=0)+geom_text(aes(colour=group),family="myfont",size=20)+scale_colour_brewer(palette="Greens",guide=FALSE)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text=element_blank(),)showtext.end()dev.off() 制作中心中国地图其实针对中国省级地图素材而言，大部分shp格式的地图都是可以放心使用的，但是为了练习自己对于json数据的操控能力（毕竟是非常流行的web端数据存储格式），这里我硬生生的抽取了json格式的中国地图数据，所以以下代码看着有些不适，请大家谨慎观看！ 载入包： 12345library(plyr) library(maptools) library(scales) library(jsonlite)library(jsonview) 导入json格式中国地图： 123setwd("D:/R/mapdata/State/")china_data&lt;-fromJSON("china.json")json_tree_view(china_data) 最新发现的可以自动化解析并渲染json树结构的包，它不仅可以渲染json数据，也可以渲染xml、html格式的树结构： 抽取行政区里列表信息： 12345china_city_data&lt;-china_data$features$properties[,c(1,3)]names(china_city_data)[2]&lt;-"region"china_city_data$ID&lt;-1:nrow(china_city_data)china_city_data$size&lt;-runif(34,900,1150)china_city_data$group&lt;-cut(china_city_data$size,breaks=c(900,950,1000,1050,1100,1150),labels=c("900~950","951~1000","1001~1050","1051~1100","1101~1150"),order=TRUE) 抽取行政区划边界经纬度多边形数据：（最艰难的部分） 1china_map_data&lt;-china_data$features$geometry$coordinates 还时上次讲到的困难，中国某些省份辖区内有独立于主区域的分离区域（比如河北的廊坊，以及山东、及南部沿海多岛屿的省份）。 今天这个json素材要比上次提取的那个安徽省的素材更加复杂，具体步骤也不详细讲解了，看不太懂就直接略过吧，反正代码写的也比较烂，基本写不出那种可以通用的代码！ 1234567891011num&lt;-c();id&lt;-c()for( i in 1:length(china_map_data))&#123;citymapdata&lt;-china_map_data[[i]]num[i]&lt;-length(citymapdata)id&lt;-1:ia&lt;-data.frame(id,num)&#125;a[a$num&lt;=2,] id num12 12 214 14 2 12dim(china_map_data[[14]][[1]])=c(length(china_map_data[[14]][[1]])/2,2)dim(china_map_data[[14]][[2]])=c(length(china_map_data[[14]][[2]])/2,2) 12345678910111213141516171819202122mapdata1&lt;-data.frame()mapdata2&lt;-data.frame()for( i in 1:length(china_map_data))&#123; citymapdata&lt;-china_map_data[[i]] if (length(citymapdata)&lt;=2)&#123; for(m in 1:length(citymapdata))&#123; citymapdata1&lt;-data.frame(citymapdata[[m]])%&gt;%dplyr::rename(long=X1,lat=X2) citymapdata1$ID&lt;-i citymapdata1$group&lt;-as.numeric(paste0(i,".",m,1)) citymapdata1$order&lt;-1:nrow(citymapdata1) mapdata1&lt;-rbind(mapdata1,citymapdata1,citymapdata2) &#125; &#125;else&#123; dim(citymapdata)=c(length(citymapdata)/2,2) citymapdata2&lt;-data.frame(citymapdata)%&gt;%dplyr::rename(long=X1,lat=X2) citymapdata2$ID&lt;-i citymapdata2$group&lt;-as.numeric(paste0(i,".",1)) citymapdata2$order&lt;-1:nrow(citymapdata2) mapdata2&lt;-rbind(mapdata2,citymapdata2) &#125; mydatanew&lt;-rbind(mapdata1,mapdata2)&#125; 至此经纬度的边界点信息也有了，接下来就可可以映射地图了： 1mydatanew&lt;-dplyr::arrange(mydatanew,ID,order) 合并经纬度边界点信息和行政区划信息。 1mydatanew_map_data&lt;-merge(mydatanew,china_city_data[,c(2,3,4)]) 预览地图素材是否可用： 123456789ggplot(mydatanew_map_data,aes(long,lat,group=group))+geom_polygon(col="white",fill="grey")+coord_map("polyconic")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank() ) 预览效果图： 拼接两幅地图。第一款字体时最初提到的地图字体（需要事先下载哦）；第二款就是微软雅黑喽，渲染省份标签用的。 12font.add("myfont","EyesAsia-Regular.otf")font.add("myyh","msyhl.ttc") 为了更加舒适的看圆环上的省份标签，这里给标签添加角度偏移量。 123circle&lt;-seq(0,95,length=9)circleALL&lt;-rep(c(-circle,rev(circle[2:9])),2)mymapdata$circle&lt;-circleALL 鉴于ggplot极坐标下的首尾不衔接的缺陷，这里再查补一个缺失值。 1234mymapdata&lt;-arrange(mymapdata,order)mapx&lt;-mymapdata[mymapdata$order==34,]mapx$order&lt;-35;mapx$Cname=NA;mapx$case=NAmymapdata1&lt;-rbind(mymapdata,mapx) 所有的步骤都弄完之后，接下来将两幅图表存为对象。 123456789101112p1&lt;-ggplot(mymapdata1,aes(x=order,y=scale))+ylim(-6,7.5)+coord_polar(theta="x",start=0)+geom_text(aes(colour=group,label=case),family="myfont",size=15)+geom_text(aes(y=scale+2,angle=circle,label=Cname),family="myyh",size=6,vjust=0.5,hjust=.5)+scale_colour_brewer(palette="Greens",guide=FALSE)+theme_minimal()+theme(panel.grid=element_blank(),axis.title=element_blank(),axis.text=element_blank(),) 图表效果大致是这样的： 12345678910111213p2&lt;-ggplot(china_city_data,aes(map_id=region,fill=group))+geom_map(map=mydatanew_map_data,colour="white")+expand_limits(x=mydatanew_map_data$long,y=mydatanew_map_data$lat)+scale_fill_brewer(palette="YlOrRd",guide=FALSE)+coord_map("polyconic")+ theme( panel.grid = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), plot.background=element_rect(I(0),linetype=0) ) 图表效果大致是这样的： 拼接： 12345678CairoPNG("chineserador.png",1000,1000)showtext.begin()vs &lt;- viewport(width=0.95,height=0.95,x=0.5,y=0.5) print(p1,vp=vs) vs &lt;- viewport(width=0.75,height=0.8,x=0.5,y=0.5) print(p2,vp=vs) showtext.end()dev.off() 以下是最终的结果： OK了，做完收工~ 联系方式：wechat：ljty1991Mail:578708965@qq.com个人公众号：数据小魔方（datamofang）团队公众号：EasyChartsqq交流群：[魔方学院]553270834 个人简介：杜雨财经专业研究僧；伪数据可视化达人；文科背景的编程小白；喜欢研究商务图表与地理信息数据可视化，爱倒腾PowerBI、SAP DashBoard、Tableau、R ggplot2、Think-cell chart等诸如此类的数据可视化软件，创建并运营微信公众号“数据小魔方”。Mail:578708965@qq.com 备注信息：本作品采用知识共享署名-非商业性使用 4.0 国际许可协议进行许可。]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>数据可视化</tag>
        <tag>ggplot2</tag>
      </tags>
  </entry>
</search>